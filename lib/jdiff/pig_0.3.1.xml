<?xml version="1.0" encoding="iso-8859-1" standalone="no"?>
<!--
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<!-- Generated by the JDiff Javadoc doclet -->
<!-- (http://www.jdiff.org) -->
<!-- on Mon Sep 07 22:28:48 PDT 2009 -->

<api
  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
  xsi:noNamespaceSchemaLocation='api.xsd'
  name="pig 0.3.1"
  jdversion="1.0.9">

<!--  Command line arguments =  -doclet jdiff.JDiff -docletpath /home/gkesavan/clean_code/pig/branch-0.3/build/ivy/lib/Pig/jdiff-1.0.9.jar:/home/gkesavan/clean_code/pig/branch-0.3/build/ivy/lib/Pig/xerces-1.4.4.jar -classpath /home/gkesavan/clean_code/pig/branch-0.3/lib/hbase-0.18.1.jar:/home/gkesavan/clean_code/pig/branch-0.3/lib/hbase-0.18.1-test.jar:/home/gkesavan/.ivy2/cache/com.jcraft/jsch/jars/jsch-0.1.38.jar:/home/gkesavan/.ivy2/cache/jline/jline/jars/jline-0.9.94.jar:/home/gkesavan/.ivy2/cache/net.java.dev.javacc/javacc/jars/javacc-4.2.jar:/home/gkesavan/.ivy2/cache/junit/junit/jars/junit-4.5.jar:/home/gkesavan/clean_code/pig/branch-0.3/build/pig-0.3.1.jar -sourcepath /home/gkesavan/clean_code/pig/branch-0.3/src -apidir /home/gkesavan/clean_code/pig/branch-0.3/lib/jdiff -apiname pig 0.3.1 -->
<package name="org.apache.pig">
  <!-- start interface org.apache.pig.Algebraic -->
  <interface name="Algebraic"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getInitial" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return A string to instatiate f_init. f_init should be an eval func]]>
      </doc>
    </method>
    <method name="getIntermed" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return A string to instantiate f_intermed. f_intermed should be an eval func]]>
      </doc>
    </method>
    <method name="getFinal" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return A string to instantiate f_final. f_final should be an eval func parametrized by
 the same datum as the eval func implementing this interface]]>
      </doc>
    </method>
    <doc>
    <![CDATA[An interface to declare that an EvalFunc's 
 calculation can be decomposed into intitial, intermediate, and final steps.
 More formally, suppose we have to compute an function f over a bag X. In general, we need to know the entire X
 before we can make any progress on f. However, some functions are <i>algebraic</i> e.g. SUM. In
 these cases, you can apply some initital function f_init on subsets of X to get partial results. 
 You can then combine partial results from different subsets of X using an intermediate function
 f_intermed. To get the final answers, several partial results can be combined by invoking a final
 f_final function. For the function SUM, f_init, f_intermed, and f_final are all SUM. 
 
 See the code for builtin AVG to get a better idea of how algebraic works.
 
 When eval functions implement this interface, it is a hint to the system to try and compute
 partial results early which causes queries to run faster.]]>
    </doc>
  </interface>
  <!-- end interface org.apache.pig.Algebraic -->
  <!-- start class org.apache.pig.ComparisonFunc -->
  <class name="ComparisonFunc" extends="org.apache.hadoop.io.WritableComparator"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ComparisonFunc"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="compare" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="a" type="org.apache.hadoop.io.WritableComparable"/>
      <param name="b" type="org.apache.hadoop.io.WritableComparable"/>
    </method>
    <method name="compare" return="int"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t1" type="org.apache.pig.data.Tuple"/>
      <param name="t2" type="org.apache.pig.data.Tuple"/>
      <doc>
      <![CDATA[This callback method must be implemented by all subclasses. Compares 
 its two arguments for order. Returns a negative integer, zero, or a 
 positive integer as the first argument is less than, equal to, or 
 greater than the second. The order of elements of the tuples correspond 
 to the fields specified in the order by clause. 
 Same semantics as {@link java.util.Comparator}.
 
 @param t1 the first Tuple to be compared.
 @param t2 the second Tuple to be compared.
 @throws IOException
 @see java.util.Comparator]]>
      </doc>
    </method>
    <method name="setReporter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reporter" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PigProgressable"/>
    </method>
    <field name="reporter" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PigProgressable"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.ComparisonFunc -->
  <!-- start class org.apache.pig.EvalFunc -->
  <class name="EvalFunc" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="EvalFunc"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getSchemaName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="input" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
    </method>
    <method name="getReturnType" return="java.lang.reflect.Type"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="progress"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="warn"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="msg" type="java.lang.String"/>
      <param name="warningEnum" type="java.lang.Enum"/>
    </method>
    <method name="finish"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Placeholder for cleanup to be performed at the end. User defined functions can override.]]>
      </doc>
    </method>
    <method name="exec" return="java.lang.Object"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[This callback method must be implemented by all subclasses. This
 is the method that will be invoked on every Tuple of a given dataset.
 Since the dataset may be divided up in a variety of ways the programmer
 should not make assumptions about state that is maintained between
 invocations of this method.
 
 @param input the Tuple to be processed.
 @return result, of type T.
 @throws IOException]]>
      </doc>
    </method>
    <method name="outputSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
      <doc>
      <![CDATA[@param input Schema of the input
 @return Schema of the output]]>
      </doc>
    </method>
    <method name="isAsynchronous" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This function should be overriden to return true for functions that return their values
 asynchronously.  Currently pig never attempts to execute a function
 asynchronously.
 @return true if the function can be executed asynchronously.]]>
      </doc>
    </method>
    <method name="getReporter" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PigProgressable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setReporter"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="reporter" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PigProgressable"/>
    </method>
    <method name="getArgToFuncMapping" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
      <doc>
      <![CDATA[@return A List containing FuncSpec objects representing the Function class
 which can handle the inputs corresponding to the schema in the objects]]>
      </doc>
    </method>
    <method name="getPigLogger" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PigLogger"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setPigLogger"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="pigLogger" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PigLogger"/>
    </method>
    <method name="getLogger" return="org.apache.commons.logging.Log"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="reporter" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PigProgressable"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="log" type="org.apache.commons.logging.Log"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="pigLogger" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PigLogger"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="returnType" type="java.lang.reflect.Type"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[The class is used to implement functions to be applied to
 a dataset. The function is applied to each Tuple in the set.
 The programmer should not make assumptions about state maintained
 between invocations of the invoke() method since the Pig runtime
 will schedule and localize invocations based on information provided
 at runtime.  The programmer also should not make assumptions about when or
 how many times the class will be instantiated, since it may be instantiated
 multiple times in both the front and back end.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.EvalFunc -->
  <!-- start class org.apache.pig.ExecType -->
  <class name="ExecType" extends="java.lang.Enum"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <method name="values" return="org.apache.pig.ExecType[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.apache.pig.ExecType"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <field name="LOCAL" type="org.apache.pig.ExecType"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Run everything on the local machine]]>
      </doc>
    </field>
    <field name="MAPREDUCE" type="org.apache.pig.ExecType"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Use the Hadoop Map/Reduce framework]]>
      </doc>
    </field>
    <field name="PIG" type="org.apache.pig.ExecType"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Use the Experimental Hadoop framework; not available yet.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[The type of query execution]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.ExecType -->
  <!-- start class org.apache.pig.FilterFunc -->
  <class name="FilterFunc" extends="org.apache.pig.EvalFunc"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FilterFunc"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="finish"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Placeholder for cleanup to be performed at the end. User defined functions can override.]]>
      </doc>
    </method>
  </class>
  <!-- end class org.apache.pig.FilterFunc -->
  <!-- start class org.apache.pig.FuncSpec -->
  <class name="FuncSpec" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <implements name="java.lang.Cloneable"/>
    <constructor name="FuncSpec" type="java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param className the name of the class for the udf
 @param ctorArg the argument for the constructor for the above class]]>
      </doc>
    </constructor>
    <constructor name="FuncSpec" type="java.lang.String, java.lang.String[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param className the name of the class for the udf
 @param ctorArgs the arguments for the constructor for the above class]]>
      </doc>
    </constructor>
    <constructor name="FuncSpec" type="java.lang.String, java.lang.String[], org.apache.pig.impl.logicalLayer.schema.Schema"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param className the name of the class for the udf
 @param ctorArgs the arguments for the constructor for the above class
 @param inputArgsSchema schema for input args taken by this Function]]>
      </doc>
    </constructor>
    <constructor name="FuncSpec" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param funcSpec the name of the function and any arguments.
 It should have the form: classname('arg1', 'arg2', ...)]]>
      </doc>
    </constructor>
    <constructor name="FuncSpec" type="java.lang.String, org.apache.pig.impl.logicalLayer.schema.Schema"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param funcSpec funcSpec the name of the function and any arguments.
 It should have the form: classname('arg1', 'arg2', ...)
 @param inputArgsSchema schema for input args taken by this Function]]>
      </doc>
    </constructor>
    <method name="getClassNameFromSpec" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="funcSpec" type="java.lang.String"/>
    </method>
    <method name="getArgStringFromSpec" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="funcSpec" type="java.lang.String"/>
    </method>
    <method name="parseArguments" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="argString" type="java.lang.String"/>
      <doc>
      <![CDATA[Function to parse the arguments from a function specification argument list
 @param argString should be of the form "'arg1', 'arg2', ..."
 @return List of the different argument strings]]>
      </doc>
    </method>
    <method name="getClassName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the className]]>
      </doc>
    </method>
    <method name="setClassName"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="className" type="java.lang.String"/>
      <doc>
      <![CDATA[@param className the className to set]]>
      </doc>
    </method>
    <method name="getCtorArgs" return="java.lang.String[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the ctorArgs]]>
      </doc>
    </method>
    <method name="setCtorArgs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ctorArgs" type="java.lang.String[]"/>
      <doc>
      <![CDATA[@param ctorArgs the ctorArgs to set]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getInputArgsSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the inputArgsSchema]]>
      </doc>
    </method>
    <method name="setInputArgsSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="inputArgsSchema" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
      <doc>
      <![CDATA[@param inputArgsSchema the inputArgsSchema to set]]>
      </doc>
    </method>
    <method name="clone" return="org.apache.pig.FuncSpec"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
    </method>
    <doc>
    <![CDATA[Class to represent a UDF specification - essentially 
 encapsulates the class name and the arguments to the constructor]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.FuncSpec -->
  <!-- start interface org.apache.pig.LoadFunc -->
  <interface name="LoadFunc"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="bindTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <param name="is" type="org.apache.pig.impl.io.BufferedPositionedInputStream"/>
      <param name="offset" type="long"/>
      <param name="end" type="long"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Specifies a portion of an InputStream to read tuples. Because the
 starting and ending offsets may not be on record boundaries it is up to
 the implementor to deal with figuring out the actual starting and ending
 offsets in such a way that an arbitrarily sliced up file will be processed
 in its entirety.
 <p>
 A common way of handling slices in the middle of records is to start at
 the given offset and, if the offset is not zero, skip to the end of the
 first record (which may be a partial record) before reading tuples.
 Reading continues until a tuple has been read that ends at an offset past
 the ending offset.
 <p>
 <b>The load function should not do any buffering on the input stream</b>. Buffering will
 cause the offsets returned by is.getPos() to be unreliable.
  
 @param fileName the name of the file to be read
 @param is the stream representing the file to be processed, and which can also provide its position.
 @param offset the offset to start reading tuples.
 @param end the ending offset for reading.
 @throws IOException]]>
      </doc>
    </method>
    <method name="getNext" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Retrieves the next tuple to be processed.
 @return the next tuple to be processed or null if there are no more tuples
 to be processed.
 @throws IOException]]>
      </doc>
    </method>
    <method name="bytesToInteger" return="java.lang.Integer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Cast data from bytes to integer value.  
 @param b byte array to be cast.
 @return Integer value.
 @throws IOException if the value cannot be cast.]]>
      </doc>
    </method>
    <method name="bytesToLong" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Cast data from bytes to long value.  
 @param b byte array to be cast.
 @return Long value.
 @throws IOException if the value cannot be cast.]]>
      </doc>
    </method>
    <method name="bytesToFloat" return="java.lang.Float"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Cast data from bytes to float value.  
 @param b byte array to be cast.
 @return Float value.
 @throws IOException if the value cannot be cast.]]>
      </doc>
    </method>
    <method name="bytesToDouble" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Cast data from bytes to double value.  
 @param b byte array to be cast.
 @return Double value.
 @throws IOException if the value cannot be cast.]]>
      </doc>
    </method>
    <method name="bytesToCharArray" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Cast data from bytes to chararray value.  
 @param b byte array to be cast.
 @return String value.
 @throws IOException if the value cannot be cast.]]>
      </doc>
    </method>
    <method name="bytesToMap" return="java.util.Map"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Cast data from bytes to map value.  
 @param b byte array to be cast.
 @return Map value.
 @throws IOException if the value cannot be cast.]]>
      </doc>
    </method>
    <method name="bytesToTuple" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Cast data from bytes to tuple value.  
 @param b byte array to be cast.
 @return Tuple value.
 @throws IOException if the value cannot be cast.]]>
      </doc>
    </method>
    <method name="bytesToBag" return="org.apache.pig.data.DataBag"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Cast data from bytes to bag value.  
 @param b byte array to be cast.
 @return Bag value.
 @throws IOException if the value cannot be cast.]]>
      </doc>
    </method>
    <method name="fieldsToRead"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="schema" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
      <doc>
      <![CDATA[Indicate to the loader fields that will be needed.  This can be useful for
 loaders that access data that is stored in a columnar format where indicating
 columns to be accessed a head of time will save scans.  If the loader
 function cannot make use of this information, it is free to ignore it.
 @param schema Schema indicating which columns will be needed.]]>
      </doc>
    </method>
    <method name="determineSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <param name="execType" type="org.apache.pig.ExecType"/>
      <param name="storage" type="org.apache.pig.backend.datastorage.DataStorage"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Find the schema from the loader.  This function will be called at parse time
 (not run time) to see if the loader can provide a schema for the data.  The
 loader may be able to do this if the data is self describing (e.g. JSON).  If
 the loader cannot determine the schema, it can return a null.
 LoadFunc implementations which need to open the input "fileName", can use 
 FileLocalizer.open(String fileName, ExecType execType, DataStorage storage) to get
 an InputStream which they can use to initialize their loader implementation. They
 can then use this to read the input data to discover the schema. Note: this will
 work only when the fileName represents a file on Local File System or Hadoop file 
 system
 @param fileName Name of the file to be read.(this will be the same as the filename 
 in the "load statement of the script)
 @param execType - execution mode of the pig script - one of ExecType.LOCAL or ExecType.MAPREDUCE
 @param storage - the DataStorage object corresponding to the execType
 @return a Schema describing the data if possible, or null otherwise.
 @throws IOException.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This interface is used to implement functions to parse records
 from a dataset.  This also includes functions to cast raw byte data into various
 datatypes.  These are external functions because we want loaders, whenever
 possible, to delay casting of datatypes until the last possible moment (i.e.
 don't do it on load).  This means we need to expose the functionality so that
 other sections of the code can call back to the loader to do the cast.]]>
    </doc>
  </interface>
  <!-- end interface org.apache.pig.LoadFunc -->
  <!-- start class org.apache.pig.Main -->
  <class name="Main" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Main"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="main"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="args" type="java.lang.String[]"/>
      <doc>
      <![CDATA[The Main-Class for the Pig Jar that will provide a shell and setup a classpath appropriate
 for executing Jar files.
 
 @param args
            -jar can be used to add additional jar files (colon separated). - will start a
            shell. -e will execute the rest of the command line as if it was input to the
            shell.
 @throws IOException]]>
      </doc>
    </method>
    <method name="usage"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.Main -->
  <!-- start class org.apache.pig.PigException -->
  <class name="PigException" extends="java.io.IOException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PigException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new PigException with null as the error message.]]>
      </doc>
    </constructor>
    <constructor name="PigException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new PigException with the specified message.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user]]>
      </doc>
    </constructor>
    <constructor name="PigException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new PigException with the specified cause.

 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="PigException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new PigException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="PigException" type="java.lang.String, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new PigException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user]]>
      </doc>
    </constructor>
    <constructor name="PigException" type="java.lang.String, int, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new PigException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="PigException" type="java.lang.String, int, byte"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new PigException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source]]>
      </doc>
    </constructor>
    <constructor name="PigException" type="java.lang.String, int, byte, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new PigException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="PigException" type="java.lang.String, int, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new PigException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param retry - If the exception is retriable or not]]>
      </doc>
    </constructor>
    <constructor name="PigException" type="java.lang.String, int, byte, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new PigException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source 
 @param retry - If the exception is retriable or not]]>
      </doc>
    </constructor>
    <constructor name="PigException" type="java.lang.String, int, byte, boolean, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new PigException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source 
 @param retry - If the exception is retriable or not
 @param detailedMsg - The detailed message shown to the developer]]>
      </doc>
    </constructor>
    <constructor name="PigException" type="java.lang.String, int, byte, boolean, java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new PigException with the specified message, error code, error source, retriable or not, detalied message for the developer and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source 
 @param retry - If the exception is retriable or not
 @param detailedMsg - The detailed message shown to the developer 
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <method name="isInput" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="errSource" type="byte"/>
      <doc>
      <![CDATA[A static method to query if an error source is due to
 an input or not.

 @param errSource - byte that indicates the error source
 @return true if the error source is an input; false otherwise]]>
      </doc>
    </method>
    <method name="isBug" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="errSource" type="byte"/>
      <doc>
      <![CDATA[A static method to query if an error source is due to
 a bug or not.

 @param errSource - byte that indicates the error source
 @return true if the error source is a bug; false otherwise]]>
      </doc>
    </method>
    <method name="isUserEnvironment" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="errSource" type="byte"/>
      <doc>
      <![CDATA[A static method to query if an error source is due to
 the user environment or not.

 @param errSource - byte that indicates the error source
 @return true if the error source is due to the user environment; false otherwise]]>
      </doc>
    </method>
    <method name="isRemoteEnvironment" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="errSource" type="byte"/>
      <doc>
      <![CDATA[A static method to query if an error source is due to
 the remote environment or not.

 @param errSource - byte that indicates the error source
 @return true if the error source is due to the remote environment; false otherwise]]>
      </doc>
    </method>
    <method name="determineErrorSource" return="byte"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="errCode" type="int"/>
      <doc>
      <![CDATA[A static method to determine the error source given the error code
 
  @param errCode - integer error code
  @return byte that indicates the error source]]>
      </doc>
    </method>
    <method name="retriable" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Checks if the exception is retriable.
 @return if the exception is retriable or not]]>
      </doc>
    </method>
    <method name="setRetriable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="retry" type="boolean"/>
      <doc>
      <![CDATA[Set the retriable attribute of the exception
 @param retry - true if retriable; false otherwise]]>
      </doc>
    </method>
    <method name="getErrorSource" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the error source of the exception. Can be more than one source.
 @return error sources represented as a byte]]>
      </doc>
    </method>
    <method name="setErrorSource"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="src" type="byte"/>
      <doc>
      <![CDATA[Set the error source of the exception
 @param src - byte representing the error sources]]>
      </doc>
    </method>
    <method name="getErrorCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the error code of the exception
 @return error code of the exception]]>
      </doc>
    </method>
    <method name="setErrorCode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="code" type="int"/>
      <doc>
      <![CDATA[Set the error code of the exception
 @param code - error code]]>
      </doc>
    </method>
    <method name="getDetailedMessage" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the detailed message used by developers for debugging
 @return detailed message]]>
      </doc>
    </method>
    <method name="setDetailedMessage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="detailMsg" type="java.lang.String"/>
      <doc>
      <![CDATA[Set the detailed message of the exception
 @param detailMsg - detailed message to be used by developers]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a short description of this throwable.
 The result is the concatenation of:
 <ul>
 <li> the {@linkplain Class#getName() name} of the class of this object
 <li> ": " (a colon and a space)
 <li> "ERROR " (the string ERROR followed by a a space)
 <li> the result of invoking this object's {@link #getErrorCode} method
 <li> ": " (a colon and a space)
 <li> the result of invoking {@link Throwable#getLocalizedMessage() getLocalizedMessage}
      method
 </ul>
 If <tt>getLocalizedMessage</tt> returns <tt>null</tt>, then just
 the class name is returned.

 @return a string representation of this throwable.]]>
      </doc>
    </method>
    <field name="INPUT" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="BUG" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="USER_ENVIRONMENT" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="REMOTE_ENVIRONMENT" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ERROR" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="errorCode" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="errorSource" type="byte"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="retriable" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="detailedMessage" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[All exceptions in Pig are encapsulated in the <code>PigException</code>
 class. Details such as the source of the error, error message, error
 code, etc. are contained in this class. The default values for the
 attributes are:
 errorSource = BUG
 errorCode = 0
 retriable = false
 detailedMessage = null]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.PigException -->
  <!-- start class org.apache.pig.PigServer -->
  <class name="PigServer" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PigServer" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <exception name="IOException" type="java.io.IOException"/>
    </constructor>
    <constructor name="PigServer" type="org.apache.pig.ExecType"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </constructor>
    <constructor name="PigServer" type="org.apache.pig.ExecType, java.util.Properties"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </constructor>
    <constructor name="PigServer" type="org.apache.pig.impl.PigContext"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </constructor>
    <constructor name="PigServer" type="org.apache.pig.impl.PigContext, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </constructor>
    <method name="parseExecType" return="org.apache.pig.ExecType"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="str" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getPigContext" return="org.apache.pig.impl.PigContext"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="debugOn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="debugOff"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setBatchOn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Starts batch execution mode.]]>
      </doc>
    </method>
    <method name="isBatchOn" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Retrieve the current execution mode.
 
 @return true if the execution mode is batch; false otherwise.]]>
      </doc>
    </method>
    <method name="isBatchEmpty" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
      <doc>
      <![CDATA[Returns whether there is anything to process in the current batch.
 @throws FrontendException
 @return true if there are no stores to process in the current
 batch, false otherwise.]]>
      </doc>
    </method>
    <method name="executeBatch" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Submits a batch of Pig commands for execution. 
 
 @throws FrontendException
 @throws ExecException]]>
      </doc>
    </method>
    <method name="discardBatch"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
      <doc>
      <![CDATA[Discards a batch of Pig commands.
 
 @throws FrontendException
 @throws ExecException]]>
      </doc>
    </method>
    <method name="addPathToSkip"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="path" type="java.lang.String"/>
      <doc>
      <![CDATA[Add a path to be skipped while automatically shipping binaries for 
 streaming.
  
 @param path path to be skipped]]>
      </doc>
    </method>
    <method name="registerFunction"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="function" type="java.lang.String"/>
      <param name="functionSpec" type="java.lang.String"/>
      <doc>
      <![CDATA[Defines an alias for the given function spec. This
 is useful for functions that require arguments to the 
 constructor.
 
 @param function - the new function alias to define.
 @param functionSpec - the name of the function and any arguments.
 It should have the form: classname('arg1', 'arg2', ...)]]>
      </doc>
    </method>
    <method name="registerFunction"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="function" type="java.lang.String"/>
      <param name="funcSpec" type="org.apache.pig.FuncSpec"/>
      <doc>
      <![CDATA[Defines an alias for the given function spec. This
 is useful for functions that require arguments to the 
 constructor.
 
 @param function - the new function alias to define.
 @param funcSpec - the FuncSpec object representing the name of 
 the function class and any arguments to constructor.]]>
      </doc>
    </method>
    <method name="registerStreamingCommand"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="commandAlias" type="java.lang.String"/>
      <param name="command" type="org.apache.pig.impl.streaming.StreamingCommand"/>
      <doc>
      <![CDATA[Defines an alias for the given streaming command.
 
 @param commandAlias - the new command alias to define
 @param command - streaming command to be executed]]>
      </doc>
    </method>
    <method name="registerJar"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Registers a jar file. Name of the jar file can be an absolute or 
 relative path.
 
 If multiple resources are found with the specified name, the
 first one is registered as returned by getSystemResources.
 A warning is issued to inform the user.
 
 @param name of the jar file to register
 @throws IOException]]>
      </doc>
    </method>
    <method name="registerQuery"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="query" type="java.lang.String"/>
      <param name="startLine" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Register a query with the Pig runtime. The query is parsed and registered, but it is not
 executed until it is needed.
 
 @param query
            a Pig Latin expression to be evaluated.
 @param startLine
            line number of the query within the whold script
 @throws IOException]]>
      </doc>
    </method>
    <method name="clonePlan" return="org.apache.pig.impl.logicalLayer.LogicalPlan"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="alias" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="registerQuery"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="query" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="registerScript"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="printAliases"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="dumpSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="alias" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="setJobName"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="openIterator" return="java.util.Iterator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Forces execution of query (and all queries from which it reads), in order to materialize
 result]]>
      </doc>
    </method>
    <method name="store" return="org.apache.pig.backend.executionengine.ExecJob"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <param name="filename" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Store an alias into a file
 @param id The alias to store
 @param filename The file to which to store to
 @throws IOException]]>
      </doc>
    </method>
    <method name="store" return="org.apache.pig.backend.executionengine.ExecJob"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <param name="filename" type="java.lang.String"/>
      <param name="func" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[forces execution of query (and all queries from which it reads), in order to store result in file]]>
      </doc>
    </method>
    <method name="explain"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="alias" type="java.lang.String"/>
      <param name="stream" type="java.io.PrintStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Provide information on how a pig query will be executed.  For now
 this information is very developer focussed, and probably not very
 useful to the average user.
 @param alias Name of alias to explain.
 @param stream PrintStream to write explanation to.
 @throws IOException if the requested alias cannot be found.]]>
      </doc>
    </method>
    <method name="explain"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="alias" type="java.lang.String"/>
      <param name="format" type="java.lang.String"/>
      <param name="verbose" type="boolean"/>
      <param name="markAsExecute" type="boolean"/>
      <param name="lps" type="java.io.PrintStream"/>
      <param name="pps" type="java.io.PrintStream"/>
      <param name="eps" type="java.io.PrintStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Provide information on how a pig query will be executed.
 @param alias Name of alias to explain.
 @param format Format in which the explain should be printed
 @param verbose Controls the amount of information printed
 @param markAsExecute When set will treat the explain like a
 call to execute in the respoect that all the pending stores are
 marked as complete.
 @param lps Stream to print the logical tree
 @param pps Stream to print the physical tree
 @param eps Stream to print the execution tree
 @throws IOException if the requested alias cannot be found.]]>
      </doc>
    </method>
    <method name="capacity" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the unused byte capacity of an HDFS filesystem. This value does
 not take into account a replication factor, as that can vary from file
 to file. Thus if you are using this to determine if you data set will fit
 in the HDFS, you need to divide the result of this call by your specific replication
 setting. 
 @return unused byte capacity of the file system.
 @throws IOException]]>
      </doc>
    </method>
    <method name="fileSize" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="filename" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the length of a file in bytes which exists in the HDFS (accounts for replication).
 @param filename
 @return length of the file in bytes
 @throws IOException]]>
      </doc>
    </method>
    <method name="existsFile" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="filename" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="deleteFile" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="filename" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="renameFile" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="source" type="java.lang.String"/>
      <param name="target" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="mkdirs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dirs" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="listPaths" return="java.lang.String[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dir" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="totalHadoopTimeSpent" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAliases" return="java.util.Map"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="shutdown"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAliasKeySet" return="java.util.Set"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getExamples" return="java.util.Map"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="alias" type="java.lang.String"/>
    </method>
    <doc>
    <![CDATA[This class is the program's connection to Pig. Typically a program will create a PigServer
 instance. The programmer then registers queries using registerQuery() and
 retrieves results using openIterator() or store().]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.PigServer -->
  <!-- start class org.apache.pig.PigWarning -->
  <class name="PigWarning" extends="java.lang.Enum"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.apache.pig.PigWarning[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.apache.pig.PigWarning"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <field name="ACCESSING_NON_EXISTENT_FIELD" type="org.apache.pig.PigWarning"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="DID_NOT_FIND_LOAD_ONLY_MAP_PLAN" type="org.apache.pig.PigWarning"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="DIVIDE_BY_ZERO" type="org.apache.pig.PigWarning"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="FIELD_DISCARDED_TYPE_CONVERSION_FAILED" type="org.apache.pig.PigWarning"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="GROUP_BY_INCOMPATIBLE_TYPES" type="org.apache.pig.PigWarning"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="IMPLICIT_CAST_TO_BAG" type="org.apache.pig.PigWarning"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="IMPLICIT_CAST_TO_CHARARRAY" type="org.apache.pig.PigWarning"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="IMPLICIT_CAST_TO_DOUBLE" type="org.apache.pig.PigWarning"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="IMPLICIT_CAST_TO_FLOAT" type="org.apache.pig.PigWarning"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="IMPLICIT_CAST_TO_INT" type="org.apache.pig.PigWarning"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="IMPLICIT_CAST_TO_LONG" type="org.apache.pig.PigWarning"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="IMPLICIT_CAST_TO_MAP" type="org.apache.pig.PigWarning"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="IMPLICIT_CAST_TO_TUPLE" type="org.apache.pig.PigWarning"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="TOO_LARGE_FOR_INT" type="org.apache.pig.PigWarning"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="MULTI_LEAF_MAP" type="org.apache.pig.PigWarning"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="MULTI_LEAF_REDUCE" type="org.apache.pig.PigWarning"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="NON_PACKAGE_REDUCE_PLAN_ROOT" type="org.apache.pig.PigWarning"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="NON_EMPTY_COMBINE_PLAN" type="org.apache.pig.PigWarning"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="PROGRESS_REPORTER_NOT_PROVIDED" type="org.apache.pig.PigWarning"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="REDUCE_PLAN_NOT_EMPTY_WHILE_MAP_PLAN_UNDER_PROCESS" type="org.apache.pig.PigWarning"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="UDF_WARNING_1" type="org.apache.pig.PigWarning"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="UDF_WARNING_2" type="org.apache.pig.PigWarning"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="UDF_WARNING_3" type="org.apache.pig.PigWarning"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="UDF_WARNING_4" type="org.apache.pig.PigWarning"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="UDF_WARNING_5" type="org.apache.pig.PigWarning"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="UDF_WARNING_6" type="org.apache.pig.PigWarning"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="UDF_WARNING_7" type="org.apache.pig.PigWarning"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="UDF_WARNING_8" type="org.apache.pig.PigWarning"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="UDF_WARNING_9" type="org.apache.pig.PigWarning"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="UDF_WARNING_10" type="org.apache.pig.PigWarning"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="UDF_WARNING_11" type="org.apache.pig.PigWarning"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="UDF_WARNING_12" type="org.apache.pig.PigWarning"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="UNABLE_TO_CREATE_FILE_TO_SPILL" type="org.apache.pig.PigWarning"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="UNABLE_TO_SPILL" type="org.apache.pig.PigWarning"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="UNABLE_TO_CLOSE_SPILL_FILE" type="org.apache.pig.PigWarning"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="UNREACHABLE_CODE_BOTH_MAP_AND_REDUCE_PLANS_PROCESSED" type="org.apache.pig.PigWarning"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="USING_OVERLOADED_FUNCTION" type="org.apache.pig.PigWarning"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[An enum to enumerate the warning types in Pig]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.PigWarning -->
  <!-- start interface org.apache.pig.ReversibleLoadStoreFunc -->
  <interface name="ReversibleLoadStoreFunc"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.LoadFunc"/>
    <implements name="org.apache.pig.StoreFunc"/>
    <doc>
    <![CDATA[This interface is used to implement classes that can perform both
 Load and Store functionalities in a symmetric fashion (thus reversible). 
 
 The symmetry property of implementations is used in the optimization
 engine therefore violation of this property while implementing this 
 interface is likely to result in unexpected output from executions.]]>
    </doc>
  </interface>
  <!-- end interface org.apache.pig.ReversibleLoadStoreFunc -->
  <!-- start interface org.apache.pig.Slice -->
  <interface name="Slice"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <method name="getLocations" return="java.lang.String[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns string representations of all the files that will be used as part
 of processing this Slice.
 <p>
 
 This is the only method on Slice that is valid to call before
 {@link #init(DataStorage)} has been called.]]>
      </doc>
    </method>
    <method name="init"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="store" type="org.apache.pig.backend.datastorage.DataStorage"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Initializes this Slice with the DataStorage it's to use to do its work.
 <p>
 This will always be called before <code>getLength</code>,
 <code>close</code>, <code>getPos</code>, <code>getProgress</code>
 and <code>next</code>.]]>
      </doc>
    </method>
    <method name="getStart" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the offset from which data in this Slice will be processed.]]>
      </doc>
    </method>
    <method name="getLength" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the length in bytes of all of the data that will be processed by
 this Slice.
 <p>
 Only valid to call after {@link #init(DataStorage)} has been called.]]>
      </doc>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Closes any streams this Slice has opened as part of its work.
 <p>
 Only valid to call after {@link #init(DataStorage)} has been called.]]>
      </doc>
    </method>
    <method name="getPos" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the number of bytes read so far as part of processing this Slice.
 <p>
 Only valid to call after {@link #init(DataStorage)} has been called.]]>
      </doc>
    </method>
    <method name="getProgress" return="float"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the percentage of Slice that is complete from 0.0 to 1.0.
 <p>
 Only valid to call after {@link #init(DataStorage)} has been called.]]>
      </doc>
    </method>
    <method name="next" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Loads the next value from this Slice into <code>value</code>.
 <p>
 Only valid to call after {@link #init(DataStorage)} has been called.
 
 @param value -
                the Tuple to be filled with the next value.
 @return - true if there are more Tuples to be read.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A grouping of data on that can be processed individually by Pig. Instances of
 this interface are created by {@link Slicer}, serialized, and sent to nodes
 to be processed.
 <p>
 {@link #getLocations} is called as part of the configuration process to
 determine where this Slice should be run for maximal locality with the data
 to be read. Once the Slice arrives on the processing node,
 {@link #init(DataStorage)} is called to give it access to the
 <code>DataStorage</code> it should use to load Tuples. After
 <code>init</code> has been called, any of the other methods on this
 interface may be called as part of Pig's processing.]]>
    </doc>
  </interface>
  <!-- end interface org.apache.pig.Slice -->
  <!-- start interface org.apache.pig.Slicer -->
  <interface name="Slicer"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="validate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="store" type="org.apache.pig.backend.datastorage.DataStorage"/>
      <param name="location" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Checks that <code>location</code> is parsable by this Slicer, and that
 if the DataStorage is used by the Slicer, it's readable from there. If it
 isn't, an IOException with a message explaining why will be thrown.
 <p>
 This does not ensure that all the data in <code>location</code> is
 valid. It's a preflight check that there's some chance of the Slicer
 working before actual Slices are created and sent off for processing.]]>
      </doc>
    </method>
    <method name="slice" return="org.apache.pig.Slice[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="store" type="org.apache.pig.backend.datastorage.DataStorage"/>
      <param name="location" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Creates slices of data from <code>store</code> at <code>location</code>.
 
 @return the Slices to be serialized and sent out to nodes for processing.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Produces independent slices of data from a given location to be processed in
 parallel by Pig.
 <p>
 If a class implementing this interface is given as the LoadFunc in a Pig
 script, it will be used to make slices for that load statement.]]>
    </doc>
  </interface>
  <!-- end interface org.apache.pig.Slicer -->
  <!-- start class org.apache.pig.StandAloneParser -->
  <class name="StandAloneParser" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="StandAloneParser"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="main"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="args" type="java.lang.String[]"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.StandAloneParser -->
  <!-- start class org.apache.pig.StoreConfig -->
  <class name="StoreConfig" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <constructor name="StoreConfig" type="java.lang.String, org.apache.pig.impl.logicalLayer.schema.Schema"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param location
 @param schema]]>
      </doc>
    </constructor>
    <method name="getLocation" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the location]]>
      </doc>
    </method>
    <method name="setLocation"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="location" type="java.lang.String"/>
      <doc>
      <![CDATA[@param location the location to set]]>
      </doc>
    </method>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the schema]]>
      </doc>
    </method>
    <method name="setSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="schema" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
      <doc>
      <![CDATA[@param schema the schema to set]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A Class which will encapsulate metadata information that a
 OutputFormat (or possibly StoreFunc) may want to know
 about the data that needs to be stored.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.StoreConfig -->
  <!-- start interface org.apache.pig.StoreFunc -->
  <interface name="StoreFunc"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="bindTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="os" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Specifies the OutputStream to write to. This will be called before
 store(Tuple) is invoked.
 
 @param os The stream to write tuples to.
 @throws IOException]]>
      </doc>
    </method>
    <method name="putNext"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="f" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Write a tuple the output stream to which this instance was
 previously bound.
 
 @param f the tuple to store.
 @throws IOException]]>
      </doc>
    </method>
    <method name="finish"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Do any kind of post processing because the last tuple has been
 stored. DO NOT CLOSE THE STREAM in this method. The stream will be
 closed later outside of this function.
 
 @throws IOException]]>
      </doc>
    </method>
    <method name="getStorePreparationClass" return="java.lang.Class"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Specify a backend specific class to use to prepare for
 storing output.  In the Hadoop case, this can return an
 OutputFormat that will be used instead of PigOutputFormat.  The 
 framework will call this function and if a Class is returned
 that implements OutputFormat it will be used. For more details on how
 the OutputFormat should interact with Pig, see 
 {@link org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigOutputFormat#getRecordWriter(org.apache.hadoop.fs.FileSystem, org.apache.hadoop.mapred.JobConf, String, org.apache.hadoop.util.Progressable)}
 @return Backend specific class used to prepare for storing output.
 If the {@link StoreFunc} implementation does not have a class to prepare
 for storing output, it can return null and a default Pig implementation
 will be used to prepare for storing output.
 @throws IOException if the class does not implement the expected
 interface(s).]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This interface is used to implement functions to write records
 from a dataset.]]>
    </doc>
  </interface>
  <!-- end interface org.apache.pig.StoreFunc -->
  <doc>
  <![CDATA[<p>
Public interfaces and classes for Pig.
<p>
{@link org.apache.pig.PigServer} is the interface to Pig for use by other java
programs.  Other interfaces and classes in this package are for use by users
when implementing user defined functions.]]>
  </doc>
</package>
<package name="org.apache.pig.backend">
  <!-- start class org.apache.pig.backend.BackendException -->
  <class name="BackendException" extends="org.apache.pig.PigException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="BackendException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new BackendException with null as the error message.]]>
      </doc>
    </constructor>
    <constructor name="BackendException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new BackendException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user]]>
      </doc>
    </constructor>
    <constructor name="BackendException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new BackendException with the specified cause.

 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="BackendException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new BackendException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="BackendException" type="java.lang.String, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new BackendException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user]]>
      </doc>
    </constructor>
    <constructor name="BackendException" type="java.lang.String, int, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new BackendException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="BackendException" type="java.lang.String, int, byte"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new BackendException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source]]>
      </doc>
    </constructor>
    <constructor name="BackendException" type="java.lang.String, int, byte, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new BackendException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="BackendException" type="java.lang.String, int, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new BackendException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param retry - If the exception is retriable or not]]>
      </doc>
    </constructor>
    <constructor name="BackendException" type="java.lang.String, int, byte, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new BackendException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source 
 @param retry - If the exception is retriable or not]]>
      </doc>
    </constructor>
    <constructor name="BackendException" type="java.lang.String, int, byte, boolean, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new BackendException with the specified message, error code, error source, retriable or not, detalied message for the developer and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source 
 @param retry - If the exception is retriable or not
 @param detailedMsg - The detailed message shown to the developer]]>
      </doc>
    </constructor>
    <constructor name="BackendException" type="java.lang.String, int, byte, boolean, java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new BackendException with the specified message, error code, error source, retriable or not, detalied message for the developer and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source 
 @param retry - If the exception is retriable or not
 @param detailedMsg - The detailed message shown to the developer 
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
  </class>
  <!-- end class org.apache.pig.backend.BackendException -->
</package>
<package name="org.apache.pig.backend.datastorage">
  <!-- start interface org.apache.pig.backend.datastorage.ContainerDescriptor -->
  <interface name="ContainerDescriptor"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.backend.datastorage.ElementDescriptor"/>
    <implements name="java.lang.Iterable"/>
  </interface>
  <!-- end interface org.apache.pig.backend.datastorage.ContainerDescriptor -->
  <!-- start interface org.apache.pig.backend.datastorage.DataStorage -->
  <interface name="DataStorage"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="init"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Place holder for possible initialization activities.]]>
      </doc>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Clean-up and releasing of resources.]]>
      </doc>
    </method>
    <method name="getConfiguration" return="java.util.Properties"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Provides configuration information about the storage itself.
 For instance global data-replication policies if any, default
 values, ... Some of such values could be overridden at a finer 
 granularity (e.g. on a specific object in the Data Storage)
 
 @return - configuration information]]>
      </doc>
    </method>
    <method name="updateConfiguration"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="newConfiguration" type="java.util.Properties"/>
      <exception name="DataStorageException" type="org.apache.pig.backend.datastorage.DataStorageException"/>
      <doc>
      <![CDATA[Provides a way to change configuration parameters
 at the Data Storage level. For instance, change the 
 data replication policy.
 
 @param newConfiguration - the new configuration settings
 @throws when configuration conflicts are detected]]>
      </doc>
    </method>
    <method name="getStatistics" return="java.util.Map"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Provides statistics on the Storage: capacity values, how much 
 storage is in use...
 @return statistics on the Data Storage]]>
      </doc>
    </method>
    <method name="asElement" return="org.apache.pig.backend.datastorage.ElementDescriptor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <exception name="DataStorageException" type="org.apache.pig.backend.datastorage.DataStorageException"/>
      <doc>
      <![CDATA[Creates an entity handle for an object (no containment
 relation) from a String

 @param name of the object
 @return an object descriptor
 @throws DataStorageException if name does not conform to naming 
         convention enforced by the Data Storage.]]>
      </doc>
    </method>
    <method name="asElement" return="org.apache.pig.backend.datastorage.ElementDescriptor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="element" type="org.apache.pig.backend.datastorage.ElementDescriptor"/>
      <exception name="DataStorageException" type="org.apache.pig.backend.datastorage.DataStorageException"/>
    </method>
    <method name="asElement" return="org.apache.pig.backend.datastorage.ElementDescriptor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parent" type="java.lang.String"/>
      <param name="child" type="java.lang.String"/>
      <exception name="DataStorageException" type="org.apache.pig.backend.datastorage.DataStorageException"/>
    </method>
    <method name="asElement" return="org.apache.pig.backend.datastorage.ElementDescriptor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parent" type="org.apache.pig.backend.datastorage.ContainerDescriptor"/>
      <param name="child" type="java.lang.String"/>
      <exception name="DataStorageException" type="org.apache.pig.backend.datastorage.DataStorageException"/>
    </method>
    <method name="asElement" return="org.apache.pig.backend.datastorage.ElementDescriptor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parent" type="org.apache.pig.backend.datastorage.ContainerDescriptor"/>
      <param name="child" type="org.apache.pig.backend.datastorage.ElementDescriptor"/>
      <exception name="DataStorageException" type="org.apache.pig.backend.datastorage.DataStorageException"/>
    </method>
    <method name="isContainer" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <exception name="DataStorageException" type="org.apache.pig.backend.datastorage.DataStorageException"/>
    </method>
    <method name="asContainer" return="org.apache.pig.backend.datastorage.ContainerDescriptor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <exception name="DataStorageException" type="org.apache.pig.backend.datastorage.DataStorageException"/>
      <doc>
      <![CDATA[Created an entity handle for a container.
 
 @param name of the container
 @return a container descriptor
 @throws DataStorageException if name does not conform to naming 
         convention enforced by the Data Storage.]]>
      </doc>
    </method>
    <method name="asContainer" return="org.apache.pig.backend.datastorage.ContainerDescriptor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="container" type="org.apache.pig.backend.datastorage.ContainerDescriptor"/>
      <exception name="DataStorageException" type="org.apache.pig.backend.datastorage.DataStorageException"/>
    </method>
    <method name="asContainer" return="org.apache.pig.backend.datastorage.ContainerDescriptor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parent" type="java.lang.String"/>
      <param name="child" type="java.lang.String"/>
      <exception name="DataStorageException" type="org.apache.pig.backend.datastorage.DataStorageException"/>
    </method>
    <method name="asContainer" return="org.apache.pig.backend.datastorage.ContainerDescriptor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parent" type="org.apache.pig.backend.datastorage.ContainerDescriptor"/>
      <param name="child" type="java.lang.String"/>
      <exception name="DataStorageException" type="org.apache.pig.backend.datastorage.DataStorageException"/>
    </method>
    <method name="asContainer" return="org.apache.pig.backend.datastorage.ContainerDescriptor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parent" type="org.apache.pig.backend.datastorage.ContainerDescriptor"/>
      <param name="child" type="org.apache.pig.backend.datastorage.ContainerDescriptor"/>
      <exception name="DataStorageException" type="org.apache.pig.backend.datastorage.DataStorageException"/>
    </method>
    <method name="asCollection" return="org.apache.pig.backend.datastorage.ElementDescriptor[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pattern" type="java.lang.String"/>
      <exception name="DataStorageException" type="org.apache.pig.backend.datastorage.DataStorageException"/>
    </method>
    <method name="setActiveContainer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="container" type="org.apache.pig.backend.datastorage.ContainerDescriptor"/>
    </method>
    <method name="getActiveContainer" return="org.apache.pig.backend.datastorage.ContainerDescriptor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="DEFAULT_REPLICATION_FACTOR_KEY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="USED_BYTES_KEY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="RAW_CAPACITY_KEY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="RAW_USED_KEY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[DataStorage provides an abstraction of a generic container.
 Special instances of it can be a file system.]]>
    </doc>
  </interface>
  <!-- end interface org.apache.pig.backend.datastorage.DataStorage -->
  <!-- start class org.apache.pig.backend.datastorage.DataStorageException -->
  <class name="DataStorageException" extends="org.apache.pig.backend.BackendException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DataStorageException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new DataStorageException with null as the error message.]]>
      </doc>
    </constructor>
    <constructor name="DataStorageException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new DataStorageException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user]]>
      </doc>
    </constructor>
    <constructor name="DataStorageException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new DataStorageException with the specified cause.

 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="DataStorageException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new DataStorageException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="DataStorageException" type="java.lang.String, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new DataStorageException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user]]>
      </doc>
    </constructor>
    <constructor name="DataStorageException" type="java.lang.String, int, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new DataStorageException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="DataStorageException" type="java.lang.String, int, byte"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new DataStorageException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source]]>
      </doc>
    </constructor>
    <constructor name="DataStorageException" type="java.lang.String, int, byte, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new DataStorageException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="DataStorageException" type="java.lang.String, int, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new DataStorageException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param retry - If the exception is retriable or not]]>
      </doc>
    </constructor>
    <constructor name="DataStorageException" type="java.lang.String, int, byte, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new DataStorageException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source 
 @param retry - If the exception is retriable or not]]>
      </doc>
    </constructor>
    <constructor name="DataStorageException" type="java.lang.String, int, byte, boolean, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new DataStorageException with the specified message, error code, error source, retriable or not, detalied message for the developer and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source 
 @param retry - If the exception is retriable or not
 @param detailedMsg - The detailed message shown to the developer]]>
      </doc>
    </constructor>
    <constructor name="DataStorageException" type="java.lang.String, int, byte, boolean, java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new DataStorageException with the specified message, error code, error source, retriable or not, detalied message for the developer and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source 
 @param retry - If the exception is retriable or not
 @param detailedMsg - The detailed message shown to the developer 
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
  </class>
  <!-- end class org.apache.pig.backend.datastorage.DataStorageException -->
  <!-- start interface org.apache.pig.backend.datastorage.ElementDescriptor -->
  <interface name="ElementDescriptor"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.Comparable"/>
    <method name="getDataStorage" return="org.apache.pig.backend.datastorage.DataStorage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="create" return="java.io.OutputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="configuration" type="java.util.Properties"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Opens a stream onto which an entity can be written to.
 
 @param configuration information at the object level
 @return stream where to write
 @throws DataStorageException]]>
      </doc>
    </method>
    <method name="create" return="java.io.OutputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="copy"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dstName" type="org.apache.pig.backend.datastorage.ElementDescriptor"/>
      <param name="dstConfiguration" type="java.util.Properties"/>
      <param name="removeSrc" type="boolean"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Copy entity from an existing one, possibly residing in a 
 different Data Storage.
 
 @param dstName name of entity to create
 @param dstConfiguration configuration for the new entity
 @param removeSrc if src entity needs to be removed after copying it
 @throws DataStorageException for instance, configuration 
         information for new entity is not compatible with 
         configuration information at the Data
         Storage level, user does not have privileges to read from
         source entity or write to destination storage...]]>
      </doc>
    </method>
    <method name="copy"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dstName" type="org.apache.pig.backend.datastorage.ElementDescriptor"/>
      <param name="removeSrc" type="boolean"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="open" return="java.io.InputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="configuration" type="java.util.Properties"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Open for read a given entity
 
 @param configuration
 @return entity to read from
 @throws DataStorageExecption e.g. entity does not exist...]]>
      </doc>
    </method>
    <method name="open" return="java.io.InputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="sopen" return="org.apache.pig.backend.datastorage.SeekableInputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="configuration" type="java.util.Properties"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Open an element in the Data Storage with support for random access 
 (seek operations).
 
 @param configuration
 @return a seekable input stream
 @throws DataStorageException]]>
      </doc>
    </method>
    <method name="sopen" return="org.apache.pig.backend.datastorage.SeekableInputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="exists" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Checks whether the entity exists or not
 
 @return true if entity exists, false otherwise.]]>
      </doc>
    </method>
    <method name="rename"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="newName" type="org.apache.pig.backend.datastorage.ElementDescriptor"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Changes the name of an entity in the Data Storage
 
 @param newName new name of entity 
 @throws DataStorageException]]>
      </doc>
    </method>
    <method name="delete"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Remove entity from the Data Storage.
 
 @throws DataStorageException]]>
      </doc>
    </method>
    <method name="getConfiguration" return="java.util.Properties"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Retrieve configuration information for entity
 @return configuration]]>
      </doc>
    </method>
    <method name="updateConfiguration"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="newConfig" type="java.util.Properties"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Update configuration information for this entity

 @param newConfig configuration
 @throws DataStorageException]]>
      </doc>
    </method>
    <method name="systemElement" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Defines whether the element is visible to users or 
 contains system's metadata
 @return true if this is system file; false otherwise]]>
      </doc>
    </method>
    <method name="getStatistics" return="java.util.Map"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[List entity statistics
 @return DataStorageProperties]]>
      </doc>
    </method>
    <field name="BLOCK_SIZE_KEY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Available from getConfiguration as a String and getStatistics as a Long.]]>
      </doc>
    </field>
    <field name="BLOCK_REPLICATION_KEY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Available from getConfiguration as a String and getStatistics as a Short.]]>
      </doc>
    </field>
    <field name="LENGTH_KEY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Available from getStatistics as a Long.]]>
      </doc>
    </field>
    <field name="MODIFICATION_TIME_KEY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Available from getStatistics as a Long.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[DataStorageElementDescriptor provides methods necessary to manage an
 element in a DataStorage.]]>
    </doc>
  </interface>
  <!-- end interface org.apache.pig.backend.datastorage.ElementDescriptor -->
  <!-- start class org.apache.pig.backend.datastorage.ImmutableOutputStream -->
  <class name="ImmutableOutputStream" extends="java.io.OutputStream"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ImmutableOutputStream" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.datastorage.ImmutableOutputStream -->
  <!-- start class org.apache.pig.backend.datastorage.SeekableInputStream -->
  <class name="SeekableInputStream" extends="java.io.InputStream"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SeekableInputStream"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="seek"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="offset" type="long"/>
      <param name="whence" type="org.apache.pig.backend.datastorage.SeekableInputStream.FLAGS"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Seeks to a given offset as specified by whence flags.
 If whence is SEEK_SET, offset is added to beginning of stream
 If whence is SEEK_CUR, offset is added to current position inside stream
 If whence is SEEK_END, offset is added to end of file position
 
 @param offset
 @param whence
 @throws IOException]]>
      </doc>
    </method>
    <method name="tell" return="long"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns current offset
 
 @return offset
 @throws IOException]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Unix-like API for an input stream that supports random access.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.datastorage.SeekableInputStream -->
  <!-- start class org.apache.pig.backend.datastorage.SeekableInputStream.FLAGS -->
  <class name="SeekableInputStream.FLAGS" extends="java.lang.Enum"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.apache.pig.backend.datastorage.SeekableInputStream.FLAGS[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.apache.pig.backend.datastorage.SeekableInputStream.FLAGS"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <field name="SEEK_SET" type="org.apache.pig.backend.datastorage.SeekableInputStream.FLAGS"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="SEEK_CUR" type="org.apache.pig.backend.datastorage.SeekableInputStream.FLAGS"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="SEEK_END" type="org.apache.pig.backend.datastorage.SeekableInputStream.FLAGS"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.backend.datastorage.SeekableInputStream.FLAGS -->
</package>
<package name="org.apache.pig.backend.executionengine">
  <!-- start class org.apache.pig.backend.executionengine.ExecException -->
  <class name="ExecException" extends="org.apache.pig.backend.BackendException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ExecException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new ExecException with null as the error message.]]>
      </doc>
    </constructor>
    <constructor name="ExecException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new ExecException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user]]>
      </doc>
    </constructor>
    <constructor name="ExecException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new ExecException with the specified cause.

 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="ExecException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new ExecException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="ExecException" type="java.lang.String, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new ExecException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user]]>
      </doc>
    </constructor>
    <constructor name="ExecException" type="java.lang.String, int, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new ExecException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="ExecException" type="java.lang.String, int, byte"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new ExecException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source]]>
      </doc>
    </constructor>
    <constructor name="ExecException" type="java.lang.String, int, byte, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new ExecException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="ExecException" type="java.lang.String, int, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new ExecException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param retry - If the exception is retriable or not]]>
      </doc>
    </constructor>
    <constructor name="ExecException" type="java.lang.String, int, byte, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new ExecException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source 
 @param retry - If the exception is retriable or not]]>
      </doc>
    </constructor>
    <constructor name="ExecException" type="java.lang.String, int, byte, boolean, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new ExecException with the specified message, error code, error source, retriable or not, detalied message for the developer and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source 
 @param retry - If the exception is retriable or not
 @param detailedMsg - The detailed message shown to the developer]]>
      </doc>
    </constructor>
    <constructor name="ExecException" type="java.lang.String, int, byte, boolean, java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new ExecException with the specified message, error code, error source, retriable or not, detalied message for the developer and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source 
 @param retry - If the exception is retriable or not
 @param detailedMsg - The detailed message shown to the developer 
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
  </class>
  <!-- end class org.apache.pig.backend.executionengine.ExecException -->
  <!-- start interface org.apache.pig.backend.executionengine.ExecJob -->
  <interface name="ExecJob"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getStatus" return="org.apache.pig.backend.executionengine.ExecJob.JOB_STATUS"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hasCompleted" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[true is the physical plan has executed successfully and results are ready
 to be retrieved
 
 @return true if execution has completed, false otherwise.
 @throws ExecException]]>
      </doc>
    </method>
    <method name="getResults" return="java.util.Iterator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[if query has executed successfully we want to retrieve the results
 via iterating over them. 
 
 @return iterator for resulting tuples
 @throws ExecException]]>
      </doc>
    </method>
    <method name="getContiguration" return="java.util.Properties"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get configuration information
 
 @return configuration information for the execution engine]]>
      </doc>
    </method>
    <method name="getStatistics" return="org.apache.pig.tools.pigstats.PigStats"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Can be information about the state (not submitted, e.g. the execute method
 has not been called yet; not running, e.g. execute has been issued, 
 but job is waiting; running...; completed; aborted...; progress information
 
 @return statistics relevant to the execution engine]]>
      </doc>
    </method>
    <method name="completionNotification"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cookie" type="java.lang.Object"/>
      <doc>
      <![CDATA[hook for asynchronous notification of job completion pushed from the back-end]]>
      </doc>
    </method>
    <method name="kill"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Kills current job.
 
 @throws ExecException]]>
      </doc>
    </method>
    <method name="getLogs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="log" type="java.io.OutputStream"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Collecting various forms of outputs]]>
      </doc>
    </method>
    <method name="getSTDOut"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.OutputStream"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getSTDError"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="error" type="java.io.OutputStream"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getException" return="java.lang.Exception"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get exceptions that happened during execution]]>
      </doc>
    </method>
    <field name="PROGRESS_KEY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Abstraction on a job that the execution engine runs. It allows the front-end to
 retrieve information on job status and manage a running job.]]>
    </doc>
  </interface>
  <!-- end interface org.apache.pig.backend.executionengine.ExecJob -->
  <!-- start class org.apache.pig.backend.executionengine.ExecJob.JOB_STATUS -->
  <class name="ExecJob.JOB_STATUS" extends="java.lang.Enum"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.apache.pig.backend.executionengine.ExecJob.JOB_STATUS[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.apache.pig.backend.executionengine.ExecJob.JOB_STATUS"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <field name="QUEUED" type="org.apache.pig.backend.executionengine.ExecJob.JOB_STATUS"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="RUNNING" type="org.apache.pig.backend.executionengine.ExecJob.JOB_STATUS"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="SUSPENDED" type="org.apache.pig.backend.executionengine.ExecJob.JOB_STATUS"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="TERMINATED" type="org.apache.pig.backend.executionengine.ExecJob.JOB_STATUS"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="FAILED" type="org.apache.pig.backend.executionengine.ExecJob.JOB_STATUS"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="COMPLETED" type="org.apache.pig.backend.executionengine.ExecJob.JOB_STATUS"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.backend.executionengine.ExecJob.JOB_STATUS -->
  <!-- start interface org.apache.pig.backend.executionengine.ExecPhysicalOperator -->
  <interface name="ExecPhysicalOperator"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getScope" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getId" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </interface>
  <!-- end interface org.apache.pig.backend.executionengine.ExecPhysicalOperator -->
  <!-- start interface org.apache.pig.backend.executionengine.ExecPhysicalPlan -->
  <interface name="ExecPhysicalPlan"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <method name="getConfiguration" return="java.util.Properties"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A job may have properties, like a priority, degree of parallelism...
 Some of such properties may be inherited from the ExecutionEngine
 configuration, other may have been set specifically for this job.
 For instance, a job scheduler may attribute low priority to
 jobs automatically started for maintenance purpose.
 
 @return set of properties]]>
      </doc>
    </method>
    <method name="updateConfiguration"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="configuration" type="java.util.Properties"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Some properties of the job may be changed, say the priority...
 
 @param configuration
 @throws some changes may not be allowed, for instance the some
 job-level properties cannot override Execution-Engine-level properties
 or maybe some properties can only be changes only in certain states of the
 job, say, once the job is started, parallelism level may not be changed...]]>
      </doc>
    </method>
    <method name="explain"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.OutputStream"/>
      <doc>
      <![CDATA[To provide an "explanation" about how the physical plan has been constructed]]>
      </doc>
    </method>
    <method name="getOpTable" return="java.util.Map"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRoot" return="org.apache.pig.impl.plan.OperatorKey"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </interface>
  <!-- end interface org.apache.pig.backend.executionengine.ExecPhysicalPlan -->
  <!-- start interface org.apache.pig.backend.executionengine.ExecScopedLogicalOperator -->
  <interface name="ExecScopedLogicalOperator"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <method name="getScope" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getId" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOperatorKey" return="org.apache.pig.impl.plan.OperatorKey"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </interface>
  <!-- end interface org.apache.pig.backend.executionengine.ExecScopedLogicalOperator -->
  <!-- start interface org.apache.pig.backend.executionengine.ExecutionEngine -->
  <interface name="ExecutionEngine"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="init"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Place holder for possible initialization activities.]]>
      </doc>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Clean-up and releasing of resources.]]>
      </doc>
    </method>
    <method name="getDataStorage" return="org.apache.pig.backend.datastorage.DataStorage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getConfiguration" return="java.util.Properties"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Provides configuration information about the execution engine itself.
 
 @return - information about the configuration used to connect to execution engine]]>
      </doc>
    </method>
    <method name="updateConfiguration"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="newConfiguration" type="java.util.Properties"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Provides a way to dynamically change configuration parameters
 at the Execution Engine level.
 
 @param newConfiguration - the new configuration settings
 @throws when configuration conflicts are detected]]>
      </doc>
    </method>
    <method name="getStatistics" return="java.util.Map"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Provides statistics on the Execution Engine: number of nodes,
 node failure rates, average load, average job wait time...
 @return ExecutionEngineProperties]]>
      </doc>
    </method>
    <method name="compile" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="plan" type="org.apache.pig.impl.logicalLayer.LogicalPlan"/>
      <param name="properties" type="java.util.Properties"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Compiles a logical plan into a physical plan, given a set of configuration
 properties that apply at the plan-level. For instance desired degree of 
 parallelism for this plan, which could be different from the "default"
 one set at the execution engine level.
 
 @param plan logical plan to compile
 @param properties
 @return physical plan]]>
      </doc>
    </method>
    <method name="execute" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="plan" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"/>
      <param name="jobName" type="java.lang.String"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Execute the physical plan in blocking mode.

 @param plan PhysicalPlan to execute. 
 @param jobName Name of this plan, will be used to identify the plan
 @throws ExecException]]>
      </doc>
    </method>
    <method name="submit" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="plan" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"/>
      <param name="jobName" type="java.lang.String"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Execute the physical plan in non-blocking mode
 
 @param plan PhysicalPlan to submit. 
 @param jobName Name of this plan, will be used to identify the plan
 @throws ExecException]]>
      </doc>
    </method>
    <method name="explain"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="plan" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"/>
      <param name="stream" type="java.io.PrintStream"/>
      <param name="format" type="java.lang.String"/>
      <param name="verbose" type="boolean"/>
      <doc>
      <![CDATA[Explain executor specific information.

 @param plan PhysicalPlan to explain
 @param stream Stream to print output to
 @param format Format to print in
 @param verbose Amount of information to print]]>
      </doc>
    </method>
    <method name="runningJobs" return="java.util.Collection"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="properties" type="java.util.Properties"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Return currently running jobs (can be useful for admin purposes)
 
 @return All jobs that are currently active in hte execution engine.
 @throws ExecException]]>
      </doc>
    </method>
    <method name="activeScopes" return="java.util.Collection"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[List scopes that are active in the back-end
 
 @return All scopes that are currently active in the execution
 engine.
 @throws ExecException]]>
      </doc>
    </method>
    <method name="reclaimScope"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="scope" type="java.lang.String"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[A mechanism to communicate to the back-end that a set of logical plans go out of scope
 
 @param scope]]>
      </doc>
    </method>
    <doc>
    <![CDATA[TODO: provide a manner to generate/collect logging information for DBG purposes
 
 TODO: add keys for properties/statistics]]>
    </doc>
  </interface>
  <!-- end interface org.apache.pig.backend.executionengine.ExecutionEngine -->
  <!-- start class org.apache.pig.backend.executionengine.PigSlice -->
  <class name="PigSlice" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.Slice"/>
    <constructor name="PigSlice" type="java.lang.String, org.apache.pig.FuncSpec, long, long"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getParser" return="org.apache.pig.FuncSpec"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getStart" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLength" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLocations" return="java.lang.String[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="init"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="base" type="org.apache.pig.backend.datastorage.DataStorage"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="next" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getPos" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getProgress" return="float"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="readFields"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="is" type="java.io.DataInput"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="os" type="java.io.DataOutput"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[Slice that loads data using a LoadFunc.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.executionengine.PigSlice -->
  <!-- start class org.apache.pig.backend.executionengine.PigSlicer -->
  <class name="PigSlicer" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.Slicer"/>
    <constructor name="PigSlicer" type="org.apache.pig.FuncSpec"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param funcSpec -
                the funcSpec for a LoadFunc that can process the data at
                location.]]>
      </doc>
    </constructor>
    <method name="setSplittable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="splittable" type="boolean"/>
    </method>
    <method name="slice" return="org.apache.pig.Slice[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="store" type="org.apache.pig.backend.datastorage.DataStorage"/>
      <param name="location" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="validate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="store" type="org.apache.pig.backend.datastorage.DataStorage"/>
      <param name="location" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[Creates a slice per block size element in all files at location. If location
 is a glob or a directory, slices are created for every matched file.
 <p>
 
 If individual files at location end with <code>.gz</code> or
 <code>.bz2</code>, they will be decompressed before being passed on to the
 LoadFunc.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.executionengine.PigSlicer -->
</package>
<package name="org.apache.pig.backend.executionengine.util">
  <!-- start class org.apache.pig.backend.executionengine.util.ExecTools -->
  <class name="ExecTools" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ExecTools"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="checkLeafIsStore" return="org.apache.pig.impl.io.FileSpec"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="plan" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"/>
      <param name="pigContext" type="org.apache.pig.impl.PigContext"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <doc>
    <![CDATA[A collection of static methods for use by the executionengine
 implementations.  A way to share common code.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.executionengine.util.ExecTools -->
</package>
<package name="org.apache.pig.backend.hadoop">
  <!-- start class org.apache.pig.backend.hadoop.DoubleWritable -->
  <class name="DoubleWritable" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.hadoop.io.WritableComparable"/>
    <constructor name="DoubleWritable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="DoubleWritable" type="double"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="readFields"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.DataInput"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.DataOutput"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="set"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="double"/>
    </method>
    <method name="get" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
      <doc>
      <![CDATA[Returns true iff <code>o</code> is a DoubleWritable with the same value.]]>
      </doc>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="compareTo" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Writable for Double values.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.DoubleWritable -->
  <!-- start class org.apache.pig.backend.hadoop.DoubleWritable.Comparator -->
  <class name="DoubleWritable.Comparator" extends="org.apache.hadoop.io.WritableComparator"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DoubleWritable.Comparator"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="compare" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b1" type="byte[]"/>
      <param name="s1" type="int"/>
      <param name="l1" type="int"/>
      <param name="b2" type="byte[]"/>
      <param name="s2" type="int"/>
      <param name="l2" type="int"/>
    </method>
    <doc>
    <![CDATA[A Comparator optimized for DoubleWritable.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.DoubleWritable.Comparator -->
  <!-- start class org.apache.pig.backend.hadoop.HDataType -->
  <class name="HDataType" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="HDataType"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getWritableComparableTypes" return="org.apache.pig.impl.io.PigNullableWritable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
      <param name="keyType" type="byte"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getWritableComparableTypes" return="org.apache.pig.impl.io.PigNullableWritable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="byte"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <doc>
    <![CDATA[A class of helper methods for converting from pig data types to hadoop
 data types, and vice versa.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.HDataType -->
</package>
<package name="org.apache.pig.backend.hadoop.datastorage">
  <!-- start class org.apache.pig.backend.hadoop.datastorage.ConfigurationUtil -->
  <class name="ConfigurationUtil" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ConfigurationUtil"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="toConfiguration" return="org.apache.hadoop.conf.Configuration"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="properties" type="java.util.Properties"/>
    </method>
    <method name="toProperties" return="java.util.Properties"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="configuration" type="org.apache.hadoop.conf.Configuration"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.datastorage.ConfigurationUtil -->
  <!-- start class org.apache.pig.backend.hadoop.datastorage.HConfiguration -->
  <class name="HConfiguration" extends="java.util.Properties"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="HConfiguration"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="HConfiguration" type="org.apache.hadoop.conf.Configuration"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getConfiguration" return="org.apache.hadoop.conf.Configuration"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.datastorage.HConfiguration -->
  <!-- start class org.apache.pig.backend.hadoop.datastorage.HDataStorage -->
  <class name="HDataStorage" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.backend.datastorage.DataStorage"/>
    <constructor name="HDataStorage" type="java.net.URI, java.util.Properties"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="HDataStorage" type="java.util.Properties"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="init"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getConfiguration" return="java.util.Properties"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="updateConfiguration"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="newConfiguration" type="java.util.Properties"/>
      <exception name="DataStorageException" type="org.apache.pig.backend.datastorage.DataStorageException"/>
    </method>
    <method name="getStatistics" return="java.util.Map"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="asElement" return="org.apache.pig.backend.datastorage.ElementDescriptor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <exception name="DataStorageException" type="org.apache.pig.backend.datastorage.DataStorageException"/>
    </method>
    <method name="asElement" return="org.apache.pig.backend.datastorage.ElementDescriptor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="element" type="org.apache.pig.backend.datastorage.ElementDescriptor"/>
      <exception name="DataStorageException" type="org.apache.pig.backend.datastorage.DataStorageException"/>
    </method>
    <method name="asElement" return="org.apache.pig.backend.datastorage.ElementDescriptor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parent" type="java.lang.String"/>
      <param name="child" type="java.lang.String"/>
      <exception name="DataStorageException" type="org.apache.pig.backend.datastorage.DataStorageException"/>
    </method>
    <method name="asElement" return="org.apache.pig.backend.datastorage.ElementDescriptor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parent" type="org.apache.pig.backend.datastorage.ContainerDescriptor"/>
      <param name="child" type="java.lang.String"/>
      <exception name="DataStorageException" type="org.apache.pig.backend.datastorage.DataStorageException"/>
    </method>
    <method name="asElement" return="org.apache.pig.backend.datastorage.ElementDescriptor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parent" type="org.apache.pig.backend.datastorage.ContainerDescriptor"/>
      <param name="child" type="org.apache.pig.backend.datastorage.ElementDescriptor"/>
      <exception name="DataStorageException" type="org.apache.pig.backend.datastorage.DataStorageException"/>
    </method>
    <method name="asContainer" return="org.apache.pig.backend.datastorage.ContainerDescriptor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <exception name="DataStorageException" type="org.apache.pig.backend.datastorage.DataStorageException"/>
    </method>
    <method name="asContainer" return="org.apache.pig.backend.datastorage.ContainerDescriptor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="container" type="org.apache.pig.backend.datastorage.ContainerDescriptor"/>
      <exception name="DataStorageException" type="org.apache.pig.backend.datastorage.DataStorageException"/>
    </method>
    <method name="asContainer" return="org.apache.pig.backend.datastorage.ContainerDescriptor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parent" type="java.lang.String"/>
      <param name="child" type="java.lang.String"/>
      <exception name="DataStorageException" type="org.apache.pig.backend.datastorage.DataStorageException"/>
    </method>
    <method name="asContainer" return="org.apache.pig.backend.datastorage.ContainerDescriptor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parent" type="org.apache.pig.backend.datastorage.ContainerDescriptor"/>
      <param name="child" type="java.lang.String"/>
      <exception name="DataStorageException" type="org.apache.pig.backend.datastorage.DataStorageException"/>
    </method>
    <method name="asContainer" return="org.apache.pig.backend.datastorage.ContainerDescriptor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parent" type="org.apache.pig.backend.datastorage.ContainerDescriptor"/>
      <param name="child" type="org.apache.pig.backend.datastorage.ContainerDescriptor"/>
      <exception name="DataStorageException" type="org.apache.pig.backend.datastorage.DataStorageException"/>
    </method>
    <method name="setActiveContainer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="container" type="org.apache.pig.backend.datastorage.ContainerDescriptor"/>
    </method>
    <method name="getActiveContainer" return="org.apache.pig.backend.datastorage.ContainerDescriptor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isContainer" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <exception name="DataStorageException" type="org.apache.pig.backend.datastorage.DataStorageException"/>
    </method>
    <method name="asCollection" return="org.apache.pig.backend.hadoop.datastorage.HPath[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pattern" type="java.lang.String"/>
      <exception name="DataStorageException" type="org.apache.pig.backend.datastorage.DataStorageException"/>
    </method>
    <method name="getHFS" return="org.apache.hadoop.fs.FileSystem"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.datastorage.HDataStorage -->
  <!-- start class org.apache.pig.backend.hadoop.datastorage.HDirectory -->
  <class name="HDirectory" extends="org.apache.pig.backend.hadoop.datastorage.HPath"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.backend.datastorage.ContainerDescriptor"/>
    <constructor name="HDirectory" type="org.apache.pig.backend.hadoop.datastorage.HDataStorage, org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="HDirectory" type="org.apache.pig.backend.hadoop.datastorage.HDataStorage, java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="HDirectory" type="org.apache.pig.backend.hadoop.datastorage.HDataStorage, org.apache.hadoop.fs.Path, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="HDirectory" type="org.apache.pig.backend.hadoop.datastorage.HDataStorage, java.lang.String, org.apache.hadoop.fs.Path"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="HDirectory" type="org.apache.pig.backend.hadoop.datastorage.HDataStorage, org.apache.hadoop.fs.Path"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="HDirectory" type="org.apache.pig.backend.hadoop.datastorage.HDataStorage, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="create" return="java.io.OutputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="configuration" type="java.util.Properties"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="copy"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dstName" type="org.apache.pig.backend.datastorage.ContainerDescriptor"/>
      <param name="dstConfiguration" type="java.util.Properties"/>
      <param name="removeSrc" type="boolean"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="open" return="java.io.InputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="configuration" type="java.util.Properties"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="open" return="java.io.InputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="sopen" return="org.apache.pig.backend.datastorage.SeekableInputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="configuration" type="java.util.Properties"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="sopen" return="org.apache.pig.backend.datastorage.SeekableInputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="iterator" return="java.util.Iterator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.datastorage.HDirectory -->
  <!-- start class org.apache.pig.backend.hadoop.datastorage.HFile -->
  <class name="HFile" extends="org.apache.pig.backend.hadoop.datastorage.HPath"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="HFile" type="org.apache.pig.backend.hadoop.datastorage.HDataStorage, org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="HFile" type="org.apache.pig.backend.hadoop.datastorage.HDataStorage, java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="HFile" type="org.apache.pig.backend.hadoop.datastorage.HDataStorage, org.apache.hadoop.fs.Path, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="HFile" type="org.apache.pig.backend.hadoop.datastorage.HDataStorage, java.lang.String, org.apache.hadoop.fs.Path"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="HFile" type="org.apache.pig.backend.hadoop.datastorage.HDataStorage, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="HFile" type="org.apache.pig.backend.hadoop.datastorage.HDataStorage, org.apache.hadoop.fs.Path"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="create" return="java.io.OutputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="configuration" type="java.util.Properties"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="open" return="java.io.InputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="configuration" type="java.util.Properties"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="open" return="java.io.InputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="sopen" return="org.apache.pig.backend.datastorage.SeekableInputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="configuration" type="java.util.Properties"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="sopen" return="org.apache.pig.backend.datastorage.SeekableInputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.datastorage.HFile -->
  <!-- start class org.apache.pig.backend.hadoop.datastorage.HPath -->
  <class name="HPath" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.backend.datastorage.ElementDescriptor"/>
    <constructor name="HPath" type="org.apache.pig.backend.hadoop.datastorage.HDataStorage, org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="HPath" type="org.apache.pig.backend.hadoop.datastorage.HDataStorage, java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="HPath" type="org.apache.pig.backend.hadoop.datastorage.HDataStorage, org.apache.hadoop.fs.Path, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="HPath" type="org.apache.pig.backend.hadoop.datastorage.HDataStorage, java.lang.String, org.apache.hadoop.fs.Path"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="HPath" type="org.apache.pig.backend.hadoop.datastorage.HDataStorage, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="HPath" type="org.apache.pig.backend.hadoop.datastorage.HDataStorage, org.apache.hadoop.fs.Path"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getDataStorage" return="org.apache.pig.backend.datastorage.DataStorage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="create" return="java.io.OutputStream"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="configuration" type="java.util.Properties"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="copy"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dstName" type="org.apache.pig.backend.datastorage.ElementDescriptor"/>
      <param name="dstConfiguration" type="java.util.Properties"/>
      <param name="removeSrc" type="boolean"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="open" return="java.io.InputStream"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="sopen" return="org.apache.pig.backend.datastorage.SeekableInputStream"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="exists" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="rename"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="newName" type="org.apache.pig.backend.datastorage.ElementDescriptor"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="delete"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getConfiguration" return="java.util.Properties"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="updateConfiguration"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="newConfig" type="java.util.Properties"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getStatistics" return="java.util.Map"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="create" return="java.io.OutputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="copy"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dstName" type="org.apache.pig.backend.datastorage.ElementDescriptor"/>
      <param name="removeSrc" type="boolean"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getPath" return="org.apache.hadoop.fs.Path"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getHFS" return="org.apache.hadoop.fs.FileSystem"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="systemElement" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
    </method>
    <method name="compareTo" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="other" type="org.apache.pig.backend.datastorage.ElementDescriptor"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="path" type="org.apache.hadoop.fs.Path"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="fs" type="org.apache.pig.backend.hadoop.datastorage.HDataStorage"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.datastorage.HPath -->
  <!-- start class org.apache.pig.backend.hadoop.datastorage.HSeekableInputStream -->
  <class name="HSeekableInputStream" extends="org.apache.pig.backend.datastorage.SeekableInputStream"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="seek"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="offset" type="long"/>
      <param name="whence" type="org.apache.pig.backend.datastorage.SeekableInputStream.FLAGS"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="tell" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="read" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="read" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="read" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
      <param name="off" type="int"/>
      <param name="len" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="available" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="skip" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="long"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="mark"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="readlimit" type="int"/>
    </method>
    <method name="reset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="markSupported" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="input" type="org.apache.hadoop.fs.FSDataInputStream"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="contentLength" type="long"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.datastorage.HSeekableInputStream -->
</package>
<package name="org.apache.pig.backend.hadoop.executionengine">
  <!-- start class org.apache.pig.backend.hadoop.executionengine.HExecutionEngine -->
  <class name="HExecutionEngine" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.backend.executionengine.ExecutionEngine"/>
    <constructor name="HExecutionEngine" type="org.apache.pig.impl.PigContext"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getJobClient" return="org.apache.hadoop.mapred.JobClient"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getMaterializedResults" return="java.util.Map"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getPhysicalOpTable" return="java.util.Map"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDataStorage" return="org.apache.pig.backend.datastorage.DataStorage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="init"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="init"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="properties" type="java.util.Properties"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getConfiguration" return="java.util.Properties"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="updateConfiguration"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="newConfiguration" type="java.util.Properties"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getStatistics" return="java.util.Map"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="compile" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="plan" type="org.apache.pig.impl.logicalLayer.LogicalPlan"/>
      <param name="properties" type="java.util.Properties"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="execute" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="plan" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"/>
      <param name="jobName" type="java.lang.String"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="submit" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="plan" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"/>
      <param name="jobName" type="java.lang.String"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="explain"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="plan" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"/>
      <param name="stream" type="java.io.PrintStream"/>
      <param name="format" type="java.lang.String"/>
      <param name="verbose" type="boolean"/>
    </method>
    <method name="runningJobs" return="java.util.Collection"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="properties" type="java.util.Properties"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="activeScopes" return="java.util.Collection"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="reclaimScope"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="scope" type="java.lang.String"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <field name="JOB_TRACKER_LOCATION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="pigContext" type="org.apache.pig.impl.PigContext"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="ds" type="org.apache.pig.backend.datastorage.DataStorage"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="jobClient" type="org.apache.hadoop.mapred.JobClient"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="logicalToPhysicalKeys" type="java.util.Map"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="physicalOpTable" type="java.util.Map"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="materializedResults" type="java.util.Map"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.HExecutionEngine -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.HJob -->
  <class name="HJob" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.backend.executionengine.ExecJob"/>
    <constructor name="HJob" type="org.apache.pig.backend.executionengine.ExecJob.JOB_STATUS, org.apache.pig.impl.PigContext, org.apache.pig.impl.io.FileSpec"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="HJob" type="org.apache.pig.backend.executionengine.ExecJob.JOB_STATUS, org.apache.pig.impl.PigContext, org.apache.pig.impl.io.FileSpec, org.apache.pig.tools.pigstats.PigStats"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getStatus" return="org.apache.pig.backend.executionengine.ExecJob.JOB_STATUS"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hasCompleted" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getResults" return="java.util.Iterator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getContiguration" return="java.util.Properties"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getStatistics" return="org.apache.pig.tools.pigstats.PigStats"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="completionNotification"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cookie" type="java.lang.Object"/>
    </method>
    <method name="kill"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getLogs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="log" type="java.io.OutputStream"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getSTDOut"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.OutputStream"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getSTDError"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="error" type="java.io.OutputStream"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="setException"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="java.lang.Exception"/>
    </method>
    <method name="getException" return="java.lang.Exception"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="status" type="org.apache.pig.backend.executionengine.ExecJob.JOB_STATUS"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="pigContext" type="org.apache.pig.impl.PigContext"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="outFileSpec" type="org.apache.pig.impl.io.FileSpec"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="backendException" type="java.lang.Exception"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.HJob -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.MapRedResult -->
  <class name="MapRedResult" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MapRedResult" type="org.apache.pig.impl.io.FileSpec, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="outFileSpec" type="org.apache.pig.impl.io.FileSpec"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="parallelismRequest" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.MapRedResult -->
</package>
<package name="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer">
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.CombinerOptimizer -->
  <class name="CombinerOptimizer" extends="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.MROpPlanVisitor"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="CombinerOptimizer" type="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.MROperPlan, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="CombinerOptimizer" type="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.MROperPlan, java.lang.String, org.apache.pig.impl.plan.CompilationMessageCollector"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getMessageCollector" return="org.apache.pig.impl.plan.CompilationMessageCollector"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visitMROp"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mr" type="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <doc>
    <![CDATA[Optimize map reduce plans to use the combiner where possible.
 Currently Foreach is copied to the combiner phase if it does not contain a
 nested plan and all UDFs in the generate statement are algebraic.
 The version of the foreach in the combiner
 stage will use the initial function, and the version in the reduce stage
 will be changed to use the final function.

 Major areas for enhancement:
 1) Currently, scripts such as:
     B = group A by $0;
     C = foreach B {
         C1 = distinct A;
         generate group, COUNT(C1);
     }
 do not use the combiner.  The issue is being able to properly decompose
 the expression in the UDF's plan.  The current code just takes whatever is
 the argument to the algebraic UDF and replaces it with a project.  This
 works for things like generate group, SUM(A.$1 + 1).  But it fails for
 things like the above.  Certain types of inner plans will never be
 movable (like filters).  But distinct or order by in the inner plan
 should be moble.  And, things like:
      C = cogroup A by $0, B by $0;
      D = foreach C {
          D1 = distinct A;
          D2 = distinct B;
          generate UDF(D1 + D2);
      }
 make it even harder.  The first step is probably just to handle queries
 like the first above, as they will probably be the most common.

 2) Scripts such as:
     B = group A by $0;
     C = foreach B generate algebraic(A), nonalgebraic(A);
 currently aren't moved into the combiner, even though they could be.
 Again, the trick here is properly decomposing the plan since A may be more
 than a simply projection.

 #2 should probably be the next area of focus.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.CombinerOptimizer -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.DistinctCombiner -->
  <class name="DistinctCombiner" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DistinctCombiner"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[A special implementation of combiner used only for distinct.  This combiner
 does not even parse out the records.  It just throws away duplicate values
 in the key in order ot minimize the data being sent to the reduce.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.DistinctCombiner -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.DistinctCombiner.Combine -->
  <class name="DistinctCombiner.Combine" extends="org.apache.hadoop.mapred.MapReduceBase"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.hadoop.mapred.Reducer"/>
    <constructor name="DistinctCombiner.Combine"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="configure"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jConf" type="org.apache.hadoop.mapred.JobConf"/>
      <doc>
      <![CDATA[Configures the reporter]]>
      </doc>
    </method>
    <method name="reduce"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="org.apache.pig.impl.io.PigNullableWritable"/>
      <param name="tupIter" type="java.util.Iterator"/>
      <param name="oc" type="org.apache.hadoop.mapred.OutputCollector"/>
      <param name="reporter" type="org.apache.hadoop.mapred.Reporter"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[The reduce function which removes values.]]>
      </doc>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.DistinctCombiner.Combine -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler -->
  <class name="JobControlCompiler" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="JobControlCompiler" type="org.apache.pig.impl.PigContext, org.apache.hadoop.conf.Configuration"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </constructor>
    <method name="getStores" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="job" type="org.apache.hadoop.mapred.jobcontrol.Job"/>
      <doc>
      <![CDATA[Returns all store locations of a previously compiled job]]>
      </doc>
    </method>
    <method name="reset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Resets the state]]>
      </doc>
    </method>
    <method name="moveResults"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="completedJobs" type="java.util.List"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Moves all the results of a collection of MR jobs to the final
 output directory. Some of the results may have been put into a
 temp location to work around restrictions with multiple output
 from a single map reduce job.

 This method should always be called after the job execution
 completes.]]>
      </doc>
    </method>
    <method name="compile" return="org.apache.hadoop.mapred.jobcontrol.JobControl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="plan" type="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.MROperPlan"/>
      <param name="grpName" type="java.lang.String"/>
      <exception name="JobCreationException" type="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobCreationException"/>
      <doc>
      <![CDATA[Compiles all jobs that have no dependencies removes them from
 the plan and returns. Should be called with the same plan until
 exhausted. 
 @param plan - The MROperPlan to be compiled
 @param grpName - The name given to the JobControl
 @return JobControl object - null if no more jobs in plan
 @throws JobCreationException]]>
      </doc>
    </method>
    <field name="PIG_STORE_CONFIG" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="LOG_DIR" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[This is compiler class that takes an MROperPlan and converts
 it into a JobControl object with the relevant dependency info
 maintained. The JobControl Object is made up of Jobs each of
 which has a JobConf. The MapReduceOper corresponds to a Job
 and the getJobCong method returns the JobConf that is configured
 as per the MapReduceOper

 <h2>Comparator Design</h2>
 <p>
 A few words on how comparators are chosen.  In almost all cases we use raw
 comparators (the one exception being when the user provides a comparison
 function for order by).  For order by queries the PigTYPERawComparator
 functions are used, where TYPE is Int, Long, etc.  These comparators are
 null aware and asc/desc aware.  The first byte of each of the
 NullableTYPEWritable classes contains info on whether the value is null.
 Asc/desc is written as an array into the JobConf with the key pig.sortOrder
 so that it can be read by each of the comparators as part of their 
 setConf call.
 <p>
 For non-order by queries, PigTYPEWritableComparator classes are used.
 These are all just type specific instances of WritableComparator.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigBagWritableComparator -->
  <class name="JobControlCompiler.PigBagWritableComparator" extends="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigWritableComparator"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="JobControlCompiler.PigBagWritableComparator"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigBagWritableComparator -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigCharArrayWritableComparator -->
  <class name="JobControlCompiler.PigCharArrayWritableComparator" extends="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigWritableComparator"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="JobControlCompiler.PigCharArrayWritableComparator"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigCharArrayWritableComparator -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigDBAWritableComparator -->
  <class name="JobControlCompiler.PigDBAWritableComparator" extends="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigWritableComparator"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="JobControlCompiler.PigDBAWritableComparator"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigDBAWritableComparator -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigDoubleWritableComparator -->
  <class name="JobControlCompiler.PigDoubleWritableComparator" extends="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigWritableComparator"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="JobControlCompiler.PigDoubleWritableComparator"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigDoubleWritableComparator -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigFloatWritableComparator -->
  <class name="JobControlCompiler.PigFloatWritableComparator" extends="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigWritableComparator"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="JobControlCompiler.PigFloatWritableComparator"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigFloatWritableComparator -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigIntWritableComparator -->
  <class name="JobControlCompiler.PigIntWritableComparator" extends="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigWritableComparator"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="JobControlCompiler.PigIntWritableComparator"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigIntWritableComparator -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigLongWritableComparator -->
  <class name="JobControlCompiler.PigLongWritableComparator" extends="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigWritableComparator"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="JobControlCompiler.PigLongWritableComparator"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigLongWritableComparator -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigTupleWritableComparator -->
  <class name="JobControlCompiler.PigTupleWritableComparator" extends="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigWritableComparator"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="JobControlCompiler.PigTupleWritableComparator"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigTupleWritableComparator -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigWritableComparator -->
  <class name="JobControlCompiler.PigWritableComparator" extends="org.apache.hadoop.io.WritableComparator"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="JobControlCompiler.PigWritableComparator" type="java.lang.Class"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <method name="compare" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b1" type="byte[]"/>
      <param name="s1" type="int"/>
      <param name="l1" type="int"/>
      <param name="b2" type="byte[]"/>
      <param name="s2" type="int"/>
      <param name="l2" type="int"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigWritableComparator -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobCreationException -->
  <class name="JobCreationException" extends="org.apache.pig.impl.logicalLayer.FrontendException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="JobCreationException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new JobCreationException with null as the error message.]]>
      </doc>
    </constructor>
    <constructor name="JobCreationException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new JobCreationException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user]]>
      </doc>
    </constructor>
    <constructor name="JobCreationException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new JobCreationException with the specified cause.

 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="JobCreationException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new JobCreationException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="JobCreationException" type="java.lang.String, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new JobCreationException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user]]>
      </doc>
    </constructor>
    <constructor name="JobCreationException" type="java.lang.String, int, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new JobCreationException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="JobCreationException" type="java.lang.String, int, byte"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new JobCreationException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source]]>
      </doc>
    </constructor>
    <constructor name="JobCreationException" type="java.lang.String, int, byte, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new JobCreationException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="JobCreationException" type="java.lang.String, int, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new JobCreationException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param retry - If the exception is retriable or not]]>
      </doc>
    </constructor>
    <constructor name="JobCreationException" type="java.lang.String, int, byte, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new JobCreationException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source 
 @param retry - If the exception is retriable or not]]>
      </doc>
    </constructor>
    <constructor name="JobCreationException" type="java.lang.String, int, byte, boolean, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new JobCreationException with the specified message, error code, error source, retriable or not, detalied message for the developer and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source 
 @param retry - If the exception is retriable or not
 @param detailedMsg - The detailed message shown to the developer]]>
      </doc>
    </constructor>
    <constructor name="JobCreationException" type="java.lang.String, int, byte, boolean, java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new JobCreationException with the specified message, error code, error source, retriable or not, detalied message for the developer and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source 
 @param retry - If the exception is retriable or not
 @param detailedMsg - The detailed message shown to the developer 
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobCreationException -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.KeyTypeDiscoveryVisitor -->
  <class name="KeyTypeDiscoveryVisitor" extends="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.MROpPlanVisitor"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="KeyTypeDiscoveryVisitor" type="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.MROperPlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan The MROperPlan to visit to discover keyType]]>
      </doc>
    </constructor>
    <method name="visitMROp"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mr" type="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <doc>
    <![CDATA[A visitor to figure out the type of the key for the map plan
 this is needed when the key is null to create
 an appropriate NullableXXXWritable object]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.KeyTypeDiscoveryVisitor -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.Launcher -->
  <class name="Launcher" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Launcher"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <method name="getSucceededFiles" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a list of locations of results that have been
 successfully completed.
 @return A list of filspecs that corresponds to the locations of
 the successful stores.]]>
      </doc>
    </method>
    <method name="getFailedFiles" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a list of locations of results that have failed.
 @return A list of filspecs that corresponds to the locations of
 the failed stores.]]>
      </doc>
    </method>
    <method name="reset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Resets the state after a launch]]>
      </doc>
    </method>
    <method name="launchPig" return="org.apache.pig.tools.pigstats.PigStats"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="php" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"/>
      <param name="grpName" type="java.lang.String"/>
      <param name="pc" type="org.apache.pig.impl.PigContext"/>
      <exception name="PlanException" type="org.apache.pig.impl.plan.PlanException"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <exception name="JobCreationException" type="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobCreationException"/>
      <exception name="Exception" type="java.lang.Exception"/>
      <doc>
      <![CDATA[Method to launch pig for hadoop either for a cluster's
 job tracker or for a local job runner. THe only difference
 between the two is the job client. Depending on the pig context
 the job client will be initialize to one of the two.
 Launchers for other frameworks can overide these methods.
 Given an input PhysicalPlan, it compiles it
 to get a MapReduce Plan. The MapReduce plan which
 has multiple MapReduce operators each one of which
 has to be run as a map reduce job with dependency
 information stored in the plan. It compiles the
 MROperPlan into a JobControl object. Each Map Reduce
 operator is converted into a Job and added to the JobControl
 object. Each Job also has a set of dependent Jobs that
 are created using the MROperPlan.
 The JobControl object is obtained from the JobControlCompiler
 Then a new thread is spawned that submits these jobs
 while respecting the dependency information.
 The parent thread monitors the submitted jobs' progress and
 after it is complete, stops the JobControl thread.
 @param php
 @param grpName
 @param pc
 @throws PlanException
 @throws VisitorException
 @throws IOException
 @throws ExecException
 @throws JobCreationException]]>
      </doc>
    </method>
    <method name="explain"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pp" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"/>
      <param name="pc" type="org.apache.pig.impl.PigContext"/>
      <param name="ps" type="java.io.PrintStream"/>
      <param name="format" type="java.lang.String"/>
      <param name="verbose" type="boolean"/>
      <exception name="PlanException" type="org.apache.pig.impl.plan.PlanException"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Explain how a pig job will be executed on the underlying
 infrastructure.
 @param pp PhysicalPlan to explain
 @param pc PigContext to use for configuration
 @param ps PrintStream to write output on.
 @param format Format to write in
 @param verbose Amount of information to print
 @throws VisitorException
 @throws IOException]]>
      </doc>
    </method>
    <method name="isComplete" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="prog" type="double"/>
    </method>
    <method name="getStats"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="job" type="org.apache.hadoop.mapred.jobcontrol.Job"/>
      <param name="jobClient" type="org.apache.hadoop.mapred.JobClient"/>
      <param name="errNotDbg" type="boolean"/>
      <param name="pigContext" type="org.apache.pig.impl.PigContext"/>
      <exception name="Exception" type="java.lang.Exception"/>
    </method>
    <method name="computeTimeSpent" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="mapReports" type="org.apache.hadoop.mapred.TaskReport[]"/>
    </method>
    <method name="getErrorMessages"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="reports" type="org.apache.hadoop.mapred.TaskReport[]"/>
      <param name="type" type="java.lang.String"/>
      <param name="errNotDbg" type="boolean"/>
      <param name="pigContext" type="org.apache.pig.impl.PigContext"/>
      <exception name="Exception" type="java.lang.Exception"/>
    </method>
    <method name="calculateProgress" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="jc" type="org.apache.hadoop.mapred.jobcontrol.JobControl"/>
      <param name="jobClient" type="org.apache.hadoop.mapred.JobClient"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Compute the progress of the current job submitted 
 through the JobControl object jc to the JobClient jobClient
 @param jc - The JobControl object that has been submitted
 @param jobClient - The JobClient to which it has been submitted
 @return The progress as a precentage in double format
 @throws IOException]]>
      </doc>
    </method>
    <method name="progressOfRunningJob" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="j" type="org.apache.hadoop.mapred.jobcontrol.Job"/>
      <param name="jobClient" type="org.apache.hadoop.mapred.JobClient"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the progress of a Job j which is part of a submitted
 JobControl object. The progress is for this Job. So it has to
 be scaled down by the num of jobs that are present in the 
 JobControl.
 @param j - The Job for which progress is required
 @param jobClient - the JobClient to which it has been submitted
 @return Returns the percentage progress of this Job
 @throws IOException]]>
      </doc>
    </method>
    <method name="getTotalHadoopTimeSpent" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getStackTraceElement" return="java.lang.StackTraceElement"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="line" type="java.lang.String"/>
      <exception name="Exception" type="java.lang.Exception"/>
      <doc>
      <![CDATA[@param line the string representation of a stack trace returned by {@link Throwable#printStackTrace() printStackTrace}
 @return the StackTraceElement object representing the stack trace
 @throws Exception]]>
      </doc>
    </method>
    <field name="succeededStores" type="java.util.List"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="failedStores" type="java.util.List"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.Launcher -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceLauncher -->
  <class name="MapReduceLauncher" extends="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.Launcher"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MapReduceLauncher"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getError" return="java.lang.Exception"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="spec" type="org.apache.pig.impl.io.FileSpec"/>
      <doc>
      <![CDATA[Get the exception that caused a failure on the backend for a
 store location (if any).]]>
      </doc>
    </method>
    <method name="reset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="launchPig" return="org.apache.pig.tools.pigstats.PigStats"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="php" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"/>
      <param name="grpName" type="java.lang.String"/>
      <param name="pc" type="org.apache.pig.impl.PigContext"/>
      <exception name="PlanException" type="org.apache.pig.impl.plan.PlanException"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <exception name="JobCreationException" type="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobCreationException"/>
      <exception name="Exception" type="java.lang.Exception"/>
    </method>
    <method name="explain"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="php" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"/>
      <param name="pc" type="org.apache.pig.impl.PigContext"/>
      <param name="ps" type="java.io.PrintStream"/>
      <param name="format" type="java.lang.String"/>
      <param name="verbose" type="boolean"/>
      <exception name="PlanException" type="org.apache.pig.impl.plan.PlanException"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[Main class that launches pig for Map Reduce]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceLauncher -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper -->
  <class name="MapReduceOper" extends="org.apache.pig.impl.plan.Operator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MapReduceOper" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Uses the string representation of the 
 component plans to identify itself.]]>
      </doc>
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleOutputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.MROpPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="isMapDone" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setMapDone"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mapDone" type="boolean"/>
    </method>
    <method name="setMapDoneSingle"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mapDone" type="boolean"/>
      <exception name="PlanException" type="org.apache.pig.impl.plan.PlanException"/>
    </method>
    <method name="setMapDoneMultiple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mapDone" type="boolean"/>
      <exception name="PlanException" type="org.apache.pig.impl.plan.PlanException"/>
    </method>
    <method name="isReduceDone" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setReduceDone"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reduceDone" type="boolean"/>
    </method>
    <method name="isGlobalSort" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setGlobalSort"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="globalSort" type="boolean"/>
    </method>
    <method name="isLimitAfterSort" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setLimitAfterSort"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="las" type="boolean"/>
    </method>
    <method name="needsDistinctCombiner" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setNeedsDistinctCombiner"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nic" type="boolean"/>
    </method>
    <method name="getQuantFile" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setQuantFile"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="quantFile" type="java.lang.String"/>
    </method>
    <method name="setSortOrder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sortOrder" type="boolean[]"/>
    </method>
    <method name="getSortOrder" return="boolean[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isStreamInMap" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return whether there is a POStream in the map plan]]>
      </doc>
    </method>
    <method name="setStreamInMap"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="streamInMap" type="boolean"/>
      <doc>
      <![CDATA[@param streamInMap the streamInMap to set]]>
      </doc>
    </method>
    <method name="isStreamInReduce" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return whether there is a POStream in the reduce plan]]>
      </doc>
    </method>
    <method name="setStreamInReduce"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="streamInReduce" type="boolean"/>
      <doc>
      <![CDATA[@param streamInReduce the streamInReduce to set]]>
      </doc>
    </method>
    <method name="getFragment" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setFragment"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fragment" type="int"/>
    </method>
    <method name="isFrjoin" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setFrjoin"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="frjoin" type="boolean"/>
    </method>
    <method name="getReplFiles" return="org.apache.pig.impl.io.FileSpec[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setReplFiles"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="replFiles" type="org.apache.pig.impl.io.FileSpec[]"/>
    </method>
    <method name="getRequestedParallelism" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setSplitter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="spl" type="boolean"/>
    </method>
    <method name="isSplitter" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="mapPlan" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="reducePlan" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="combinePlan" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="mapKeyType" type="byte"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="UDFs" type="java.util.List"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[An operator model for a Map Reduce job. 
 Acts as a host to the plans that will
 execute in map, reduce and optionally combine
 phases. These will be embedded in the MROperPlan
 in order to capture the dependecies amongst jobs.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReducePOStoreImpl -->
  <class name="MapReducePOStoreImpl" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStoreImpl"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MapReducePOStoreImpl" type="org.apache.hadoop.mapred.JobConf"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setReporter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reporter" type="org.apache.hadoop.mapred.Reporter"/>
    </method>
    <method name="createStoreFunc" return="org.apache.pig.StoreFunc"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sFile" type="org.apache.pig.impl.io.FileSpec"/>
      <param name="schema" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="tearDown"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="cleanUp"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <field name="PIG_STORE_CONFIG" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[This class is used to have a POStore write to DFS via a output
 collector/record writer. It sets up a modified job configuration to
 force a write to a specific subdirectory of the main output
 directory. This is done so that multiple output directories can be
 used in the same job. Since the hadoop framework requires a
 reporter to be available to create the record writer the main
 function (createStoreFunc) has to be called from within a map or
 reduce function.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReducePOStoreImpl -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler -->
  <class name="MRCompiler" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MRCompiler" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="MRCompilerException" type="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompilerException"/>
    </constructor>
    <constructor name="MRCompiler" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan, org.apache.pig.impl.PigContext"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="MRCompilerException" type="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompilerException"/>
    </constructor>
    <method name="randomizeFileLocalizer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getMRPlan" return="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.MROperPlan"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Used to get the compiled plan
 @return map reduce plan built by the compiler]]>
      </doc>
    </method>
    <method name="getPlan" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Used to get the plan that was compiled
 @return physical plan]]>
      </doc>
    </method>
    <method name="getMessageCollector" return="org.apache.pig.impl.plan.CompilationMessageCollector"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="compile" return="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.MROperPlan"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PlanException" type="org.apache.pig.impl.plan.PlanException"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[The front-end method that the user calls to compile
 the plan. Assumes that all submitted plans have a Store
 operators as the leaf.
 @return A map reduce plan
 @throws IOException
 @throws PlanException
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visitSplit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSplit"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[Compiles a split operator. The logic is to
 close the split job by replacing the split oper by
 a store and creating a new Map MRoper and return
 that as the current MROper to which other operators
 would be compiled into. The new MROper would be connected
 to the split job by load-store. Also add the split oper 
 to the splitsSeen map.
 @param op - The split operator
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visitLoad"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLoad"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitStore"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitFilter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFilter"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStream"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="simpleConnectMapToReduce"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mro" type="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper"/>
      <exception name="PlanException" type="org.apache.pig.impl.plan.PlanException"/>
    </method>
    <method name="visitLimit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLimit"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitLocalRearrange"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitPOForEach"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitGlobalRearrange"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POGlobalRearrange"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitPackage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitUnion"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POUnion"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitFRJoin"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFRJoin"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[This is an operator which will have multiple inputs(= to number of join inputs)
 But it prunes off all inputs but the fragment input and creates separate MR jobs
 for each of the replicated inputs and uses these as the replicated files that
 are configured in the POFRJoin operator. It also sets that this is FRJoin job
 and some parametes associated with it.]]>
      </doc>
    </method>
    <method name="visitDistinct"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PODistinct"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitSort"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="getSortJob" return="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sort" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort"/>
      <param name="quantJob" type="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper"/>
      <param name="lFile" type="org.apache.pig.impl.io.FileSpec"/>
      <param name="quantFile" type="org.apache.pig.impl.io.FileSpec"/>
      <param name="rp" type="int"/>
      <param name="fields" type="org.apache.pig.impl.util.Pair[]"/>
      <exception name="PlanException" type="org.apache.pig.impl.plan.PlanException"/>
    </method>
    <method name="getQuantileJob" return="org.apache.pig.impl.util.Pair"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="inpSort" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort"/>
      <param name="prevJob" type="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper"/>
      <param name="lFile" type="org.apache.pig.impl.io.FileSpec"/>
      <param name="quantFile" type="org.apache.pig.impl.io.FileSpec"/>
      <param name="rp" type="int"/>
      <param name="fields" type="org.apache.pig.impl.util.Pair[]"/>
      <exception name="PlanException" type="org.apache.pig.impl.plan.PlanException"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <field name="USER_COMPARATOR_MARKER" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[The compiler that compiles a given physical plan
 into a DAG of MapReduce operators which can then 
 be converted into the JobControl structure.
 
 Is implemented as a visitor of the PhysicalPlan it
 is compiling.
 
 Currently supports all operators except the MR Sort
 operator 
 
 Uses a predecessor based depth first traversal. 
 To compile an operator, first compiles
 the predecessors into MapReduce Operators and tries to
 merge the current operator into one of them. The goal
 being to keep the number of MROpers to a minimum.
 
 It also merges multiple Map jobs, created by compiling
 the inputs individually, into a single job. Here a new
 map job is created and then the contents of the previous
 map plans are added. However, any other state that was in
 the previous map plans, should be manually moved over. So,
 if you are adding something new take care about this.
 Ex of this is in requestedParallelism
 
 Only in case of blocking operators and splits, a new 
 MapReduce operator is started using a store-load combination
 to connect the two operators. Whenever this happens
 care is taken to add the MROper into the MRPlan and connect it
 appropriately.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompilerException -->
  <class name="MRCompilerException" extends="org.apache.pig.impl.plan.VisitorException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MRCompilerException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new MRCompilerException with null as the error message.]]>
      </doc>
    </constructor>
    <constructor name="MRCompilerException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new MRCompilerException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user]]>
      </doc>
    </constructor>
    <constructor name="MRCompilerException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new MRCompilerException with the specified cause.

 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="MRCompilerException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new MRCompilerException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="MRCompilerException" type="java.lang.String, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new MRCompilerException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user]]>
      </doc>
    </constructor>
    <constructor name="MRCompilerException" type="java.lang.String, int, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new MRCompilerException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="MRCompilerException" type="java.lang.String, int, byte"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new MRCompilerException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source]]>
      </doc>
    </constructor>
    <constructor name="MRCompilerException" type="java.lang.String, int, byte, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new MRCompilerException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="MRCompilerException" type="java.lang.String, int, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new MRCompilerException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param retry - If the exception is retriable or not]]>
      </doc>
    </constructor>
    <constructor name="MRCompilerException" type="java.lang.String, int, byte, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new MRCompilerException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source 
 @param retry - If the exception is retriable or not]]>
      </doc>
    </constructor>
    <constructor name="MRCompilerException" type="java.lang.String, int, byte, boolean, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new MRCompilerException with the specified message, error code, error source, retriable or not, detalied message for the developer and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source 
 @param retry - If the exception is retriable or not
 @param detailedMsg - The detailed message shown to the developer]]>
      </doc>
    </constructor>
    <constructor name="MRCompilerException" type="java.lang.String, int, byte, boolean, java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new MRCompilerException with the specified message, error code, error source, retriable or not, detalied message for the developer and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source 
 @param retry - If the exception is retriable or not
 @param detailedMsg - The detailed message shown to the developer 
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompilerException -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter -->
  <class name="PhyPlanSetter" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PhyPlanSetter" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="visitLoad"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ld" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLoad"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitStore"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="st" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitFilter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fl" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFilter"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitLocalRearrange"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="lr" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitGlobalRearrange"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="gr" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POGlobalRearrange"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitPackage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pkg" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitCombinerPackage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pkg" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCombinerPackage"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitPOForEach"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nfe" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitUnion"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="un" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POUnion"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitSplit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="spl" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSplit"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitDemux"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="demux" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PODemux"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitDistinct"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="distinct" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PODistinct"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitRead"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="read" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PORead"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitSort"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sort" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitConstant"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cnst" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ConstantExpression"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitProject"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="proj" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitGreaterThan"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="grt" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.GreaterThanExpr"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitLessThan"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="lt" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.LessThanExpr"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitGTOrEqual"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="gte" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.GTOrEqualToExpr"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitLTOrEqual"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="lte" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.LTOrEqualToExpr"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitEqualTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="eq" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.EqualToExpr"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitNotEqualTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="eq" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.NotEqualToExpr"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitRegexp"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="re" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PORegexp"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitIsNull"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="isNull" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POIsNull"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitAdd"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="add" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Add"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitSubtract"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sub" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Subtract"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitMultiply"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mul" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Multiply"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitDivide"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dv" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Divide"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitMod"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mod" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Mod"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitAnd"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="and" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POAnd"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitOr"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="or" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POOr"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitNot"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="not" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PONot"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitBinCond"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="binCond" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POBinCond"/>
    </method>
    <method name="visitNegative"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="negative" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PONegative"/>
    </method>
    <method name="visitUserFunc"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userFunc" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitComparisonFunc"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="compFunc" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserComparisonFunc"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitMapLookUp"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mapLookUp" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POMapLookUp"/>
    </method>
    <method name="visitJoinPackage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="joinPackage" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POJoinPackage"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitCast"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cast" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POCast"/>
    </method>
    <method name="visitLimit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="lim" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLimit"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitFRJoin"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="join" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFRJoin"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stream" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStream"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitCogroup"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cogroup" type="org.apache.pig.backend.local.executionengine.physicalLayer.relationalOperators.POCogroup"/>
    </method>
    <method name="visitSplit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="split" type="org.apache.pig.backend.local.executionengine.physicalLayer.relationalOperators.POSplit"/>
    </method>
    <method name="visitLocalRearrangeForIllustrate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="lrfi" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrangeForIllustrate"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitPOOptimizedForEach"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="optimizedForEach" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POOptimizedForEach"/>
    </method>
    <method name="visitPreCombinerLocalRearrange"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="preCombinerLocalRearrange" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPreCombinerLocalRearrange"/>
    </method>
    <method name="visitCross"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cross" type="org.apache.pig.backend.local.executionengine.physicalLayer.relationalOperators.POCross"/>
    </method>
    <doc>
    <![CDATA[Sets the parent plan for all Physical Operators. Note: parentPlan
 is a bit of a misnomer. We actually want all the operators to point
 to the same plan - not necessarily the one they're a member of.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigBytesRawComparator -->
  <class name="PigBytesRawComparator" extends="org.apache.hadoop.io.WritableComparator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.hadoop.conf.Configurable"/>
    <constructor name="PigBytesRawComparator"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setConf"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="conf" type="org.apache.hadoop.conf.Configuration"/>
    </method>
    <method name="getConf" return="org.apache.hadoop.conf.Configuration"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="compare" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b1" type="byte[]"/>
      <param name="s1" type="int"/>
      <param name="l1" type="int"/>
      <param name="b2" type="byte[]"/>
      <param name="s2" type="int"/>
      <param name="l2" type="int"/>
      <doc>
      <![CDATA[Compare two NullableBytesWritables as raw bytes.  If neither are null,
 then IntWritable.compare() is used.  If both are null then the indices
 are compared.  Otherwise the null one is defined to be less.]]>
      </doc>
    </method>
    <method name="compare" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o1" type="java.lang.Object"/>
      <param name="o2" type="java.lang.Object"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigBytesRawComparator -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigCombiner -->
  <class name="PigCombiner" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PigCombiner"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="sJobConf" type="org.apache.hadoop.mapred.JobConf"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigCombiner -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigCombiner.Combine -->
  <class name="PigCombiner.Combine" extends="org.apache.hadoop.mapred.MapReduceBase"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.hadoop.mapred.Reducer"/>
    <constructor name="PigCombiner.Combine"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="configure"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jConf" type="org.apache.hadoop.mapred.JobConf"/>
      <doc>
      <![CDATA[Configures the Reduce plan, the POPackage operator
 and the reporter thread]]>
      </doc>
    </method>
    <method name="reduce"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="org.apache.pig.impl.io.PigNullableWritable"/>
      <param name="tupIter" type="java.util.Iterator"/>
      <param name="oc" type="org.apache.hadoop.mapred.OutputCollector"/>
      <param name="reporter" type="org.apache.hadoop.mapred.Reporter"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[The reduce function which packages the key and List &lt;Tuple&gt;
 into key, Bag&lt;Tuple&gt; after converting Hadoop type key into Pig type.
 The package result is either collected as is, if the reduce plan is
 empty or after passing through the reduce plan.]]>
      </doc>
    </method>
    <method name="processOnePackageOutput" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="oc" type="org.apache.hadoop.mapred.OutputCollector"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Will be called once all the intermediate keys and values are
 processed. So right place to stop the reporter thread.]]>
      </doc>
    </method>
    <method name="getKeyType" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the keyType]]>
      </doc>
    </method>
    <method name="setKeyType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="keyType" type="byte"/>
      <doc>
      <![CDATA[@param keyType the keyType to set]]>
      </doc>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigCombiner.Combine -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigDoubleRawComparator -->
  <class name="PigDoubleRawComparator" extends="org.apache.hadoop.io.WritableComparator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.hadoop.conf.Configurable"/>
    <constructor name="PigDoubleRawComparator"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setConf"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="conf" type="org.apache.hadoop.conf.Configuration"/>
    </method>
    <method name="getConf" return="org.apache.hadoop.conf.Configuration"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="compare" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b1" type="byte[]"/>
      <param name="s1" type="int"/>
      <param name="l1" type="int"/>
      <param name="b2" type="byte[]"/>
      <param name="s2" type="int"/>
      <param name="l2" type="int"/>
      <doc>
      <![CDATA[Compare two NullableIntWritables as raw bytes.  If neither are null,
 then IntWritable.compare() is used.  If both are null then the indices
 are compared.  Otherwise the null one is defined to be less.]]>
      </doc>
    </method>
    <method name="compare" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o1" type="java.lang.Object"/>
      <param name="o2" type="java.lang.Object"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigDoubleRawComparator -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigFloatRawComparator -->
  <class name="PigFloatRawComparator" extends="org.apache.hadoop.io.WritableComparator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.hadoop.conf.Configurable"/>
    <constructor name="PigFloatRawComparator"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setConf"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="conf" type="org.apache.hadoop.conf.Configuration"/>
    </method>
    <method name="getConf" return="org.apache.hadoop.conf.Configuration"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="compare" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b1" type="byte[]"/>
      <param name="s1" type="int"/>
      <param name="l1" type="int"/>
      <param name="b2" type="byte[]"/>
      <param name="s2" type="int"/>
      <param name="l2" type="int"/>
      <doc>
      <![CDATA[Compare two NullableIntWritables as raw bytes.  If neither are null,
 then IntWritable.compare() is used.  If both are null then the indices
 are compared.  Otherwise the null one is defined to be less.]]>
      </doc>
    </method>
    <method name="compare" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o1" type="java.lang.Object"/>
      <param name="o2" type="java.lang.Object"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigFloatRawComparator -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigHadoopLogger -->
  <class name="PigHadoopLogger" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PigLogger"/>
    <method name="getInstance" return="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigHadoopLogger"
      abstract="false" native="false" synchronized="true"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="warn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
      <param name="msg" type="java.lang.String"/>
      <param name="warningEnum" type="java.lang.Enum"/>
    </method>
    <method name="getReporter" return="org.apache.hadoop.mapred.Reporter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setReporter"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rep" type="org.apache.hadoop.mapred.Reporter"/>
    </method>
    <method name="getAggregate" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setAggregate"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="aggregate" type="boolean"/>
    </method>
    <doc>
    <![CDATA[A singleton class that implements the PigLogger interface
 for use in map reduce context. Provides ability to aggregate
 warning messages]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigHadoopLogger -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigInputFormat -->
  <class name="PigInputFormat" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.hadoop.mapred.InputFormat"/>
    <implements name="org.apache.hadoop.mapred.JobConfigurable"/>
    <constructor name="PigInputFormat"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="isSplitable" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="fs" type="org.apache.hadoop.fs.FileSystem"/>
      <param name="filename" type="org.apache.hadoop.fs.Path"/>
      <doc>
      <![CDATA[Is the given filename splitable? Usually, true, but if the file is stream
 compressed, it will not be.
 
 <code>FileInputFormat</code> implementations can override this and
 return <code>false</code> to ensure that individual input files are
 never split-up so that {@link Mapper}s process entire files.
 
 @param fs
            the file system that the file is on
 @param filename
            the file name to check
 @return is this file splitable?]]>
      </doc>
    </method>
    <method name="listPaths" return="org.apache.hadoop.fs.Path[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="job" type="org.apache.hadoop.mapred.JobConf"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[List input directories. Subclasses may override to, e.g., select only
 files matching a regular expression.
 
 @param job
            the job to list input paths for
 @return array of Path objects
 @throws IOException
             if zero items.]]>
      </doc>
    </method>
    <method name="validateInput"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="job" type="org.apache.hadoop.mapred.JobConf"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getSplits" return="org.apache.hadoop.mapred.InputSplit[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="job" type="org.apache.hadoop.mapred.JobConf"/>
      <param name="numSplits" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Creates input splits one per input and slices of it
 per DFS block of the input file. Configures the PigSlice
 and returns the list of PigSlices as an array]]>
      </doc>
    </method>
    <method name="getRecordReader" return="org.apache.hadoop.mapred.RecordReader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="split" type="org.apache.hadoop.mapred.InputSplit"/>
      <param name="job" type="org.apache.hadoop.mapred.JobConf"/>
      <param name="reporter" type="org.apache.hadoop.mapred.Reporter"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="configure"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="conf" type="org.apache.hadoop.mapred.JobConf"/>
    </method>
    <method name="getActiveSplit" return="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.SliceWrapper"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="LOG" type="org.apache.commons.logging.Log"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="sJob" type="org.apache.hadoop.mapred.JobConf"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigInputFormat -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigIntRawComparator -->
  <class name="PigIntRawComparator" extends="org.apache.hadoop.io.WritableComparator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.hadoop.conf.Configurable"/>
    <constructor name="PigIntRawComparator"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setConf"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="conf" type="org.apache.hadoop.conf.Configuration"/>
    </method>
    <method name="getConf" return="org.apache.hadoop.conf.Configuration"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="compare" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b1" type="byte[]"/>
      <param name="s1" type="int"/>
      <param name="l1" type="int"/>
      <param name="b2" type="byte[]"/>
      <param name="s2" type="int"/>
      <param name="l2" type="int"/>
      <doc>
      <![CDATA[Compare two NullableIntWritables as raw bytes.  If neither are null,
 then IntWritable.compare() is used.  If both are null then the indices
 are compared.  Otherwise the null one is defined to be less.]]>
      </doc>
    </method>
    <method name="compare" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o1" type="java.lang.Object"/>
      <param name="o2" type="java.lang.Object"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigIntRawComparator -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigLongRawComparator -->
  <class name="PigLongRawComparator" extends="org.apache.hadoop.io.WritableComparator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.hadoop.conf.Configurable"/>
    <constructor name="PigLongRawComparator"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setConf"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="conf" type="org.apache.hadoop.conf.Configuration"/>
    </method>
    <method name="getConf" return="org.apache.hadoop.conf.Configuration"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="compare" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b1" type="byte[]"/>
      <param name="s1" type="int"/>
      <param name="l1" type="int"/>
      <param name="b2" type="byte[]"/>
      <param name="s2" type="int"/>
      <param name="l2" type="int"/>
      <doc>
      <![CDATA[Compare two NullableIntWritables as raw bytes.  If neither are null,
 then IntWritable.compare() is used.  If both are null then the indices
 are compared.  Otherwise the null one is defined to be less.]]>
      </doc>
    </method>
    <method name="compare" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o1" type="java.lang.Object"/>
      <param name="o2" type="java.lang.Object"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigLongRawComparator -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigMapBase -->
  <class name="PigMapBase" extends="org.apache.hadoop.mapred.MapReduceBase"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PigMapBase"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Will be called when all the tuples in the input
 are done. So reporter thread should be closed.]]>
      </doc>
    </method>
    <method name="configure"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="job" type="org.apache.hadoop.mapred.JobConf"/>
      <doc>
      <![CDATA[Configures the mapper with the map plan and the
 reproter thread]]>
      </doc>
    </method>
    <method name="map"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="org.apache.hadoop.io.Text"/>
      <param name="inpTuple" type="org.apache.pig.data.Tuple"/>
      <param name="oc" type="org.apache.hadoop.mapred.OutputCollector"/>
      <param name="reporter" type="org.apache.hadoop.mapred.Reporter"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[The map function that attaches the inpTuple appropriately
 and executes the map plan if its not empty. Collects the
 result of execution into oc or the input directly to oc
 if map plan empty. The collection is left abstract for the
 map-only or map-reduce job to implement. Map-only collects
 the tuple as-is whereas map-reduce collects it after extracting
 the key and indexed tuple.]]>
      </doc>
    </method>
    <method name="collect"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="oc" type="org.apache.hadoop.mapred.OutputCollector"/>
      <param name="tuple" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getKeyType" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the keyType]]>
      </doc>
    </method>
    <method name="setKeyType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="keyType" type="byte"/>
      <doc>
      <![CDATA[@param keyType the keyType to set]]>
      </doc>
    </method>
    <field name="keyType" type="byte"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="mp" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="stores" type="java.util.List"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="tf" type="org.apache.pig.data.TupleFactory"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="errorInMap" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigMapBase -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigMapOnly -->
  <class name="PigMapOnly" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PigMapOnly"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[This class is the static Mapper class used by Pig
 to execute Pig map only jobs. It gets a TargetedTuple
 as input to the map function. Using the targets in it,
 attaches the tuple as input to the target operators.
 
 The map plan is then executed. The result is then collected
 into the output collector provide by Hadoop which is configured
 to write to the store file.
 
 There is a reporter running in a separate thread that keeps
 reporting progress to let the job tracker know that we are 
 alive. The sleep time for the reporter thread can be configured
 per job via the "pig.reporter.sleep.time". By default it uses
 a 10 sec sleep time]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigMapOnly -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigMapOnly.Map -->
  <class name="PigMapOnly.Map" extends="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigMapBase"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.hadoop.mapred.Mapper"/>
    <constructor name="PigMapOnly.Map"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="collect"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="oc" type="org.apache.hadoop.mapred.OutputCollector"/>
      <param name="tuple" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigMapOnly.Map -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigMapReduce -->
  <class name="PigMapReduce" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PigMapReduce"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="sJobConf" type="org.apache.hadoop.mapred.JobConf"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[This class is the static Mapper &amp; Reducer classes that
 are used by Pig to execute Pig Map Reduce jobs. Since
 there is a reduce phase, the leaf is bound to be a 
 POLocalRearrange. So the map phase has to separate the
 key and tuple and collect it into the output
 collector.
 
 The shuffle and sort phase sorts these keys &amp; tuples
 and creates key, List&lt;Tuple&gt; and passes the key and
 iterator to the list. The deserialized POPackage operator
 is used to package the key, List&lt;Tuple&gt; into pigKey, 
 Bag&lt;Tuple&gt; where pigKey is of the appropriate pig type and
 then the result of the package is attached to the reduce
 plan which is executed if its not empty. Either the result 
 of the reduce plan or the package res is collected into
 the output collector. 

 The index of the tuple (that is, which bag it should be placed in by the
 package) is packed into the key.  This is done so that hadoop sorts the
 keys in order of index for join.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigMapReduce -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigMapReduce.Map -->
  <class name="PigMapReduce.Map" extends="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigMapBase"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.hadoop.mapred.Mapper"/>
    <constructor name="PigMapReduce.Map"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="collect"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="oc" type="org.apache.hadoop.mapred.OutputCollector"/>
      <param name="tuple" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigMapReduce.Map -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigMapReduce.MapWithComparator -->
  <class name="PigMapReduce.MapWithComparator" extends="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigMapBase"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.hadoop.mapred.Mapper"/>
    <constructor name="PigMapReduce.MapWithComparator"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="collect"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="oc" type="org.apache.hadoop.mapred.OutputCollector"/>
      <param name="tuple" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[This "specialized" map class is ONLY to be used in pig queries with
 order by a udf. A UDF used for comparison in the order by expects
 to be handed tuples. Hence this map class ensures that the "key" used
 in the order by is wrapped into a tuple (if it isn't already a tuple)]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigMapReduce.MapWithComparator -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigMapReduce.Reduce -->
  <class name="PigMapReduce.Reduce" extends="org.apache.hadoop.mapred.MapReduceBase"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.hadoop.mapred.Reducer"/>
    <constructor name="PigMapReduce.Reduce"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="configure"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jConf" type="org.apache.hadoop.mapred.JobConf"/>
      <doc>
      <![CDATA[Configures the Reduce plan, the POPackage operator
 and the reporter thread]]>
      </doc>
    </method>
    <method name="reduce"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="org.apache.pig.impl.io.PigNullableWritable"/>
      <param name="tupIter" type="java.util.Iterator"/>
      <param name="oc" type="org.apache.hadoop.mapred.OutputCollector"/>
      <param name="reporter" type="org.apache.hadoop.mapred.Reporter"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[The reduce function which packages the key and List&lt;Tuple&gt;
 into key, Bag&lt;Tuple&gt; after converting Hadoop type key into Pig type.
 The package result is either collected as is, if the reduce plan is
 empty or after passing through the reduce plan.]]>
      </doc>
    </method>
    <method name="processOnePackageOutput" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="oc" type="org.apache.hadoop.mapred.OutputCollector"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="runPipeline"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="leaf" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[@param leaf
 @throws ExecException 
 @throws IOException]]>
      </doc>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Will be called once all the intermediate keys and values are
 processed. So right place to stop the reporter thread.]]>
      </doc>
    </method>
    <field name="log" type="org.apache.commons.logging.Log"
      transient="false" volatile="false"
      static="false" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="rp" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="stores" type="java.util.List"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="pack" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="outputCollector" type="org.apache.hadoop.mapred.OutputCollector"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="errorInReduce" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="initialized" type="boolean"
      transient="false" volatile="true"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigMapReduce.Reduce -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigMapReduce.ReduceWithComparator -->
  <class name="PigMapReduce.ReduceWithComparator" extends="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigMapReduce.Reduce"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PigMapReduce.ReduceWithComparator"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="configure"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jConf" type="org.apache.hadoop.mapred.JobConf"/>
      <doc>
      <![CDATA[Configures the Reduce plan, the POPackage operator
 and the reporter thread]]>
      </doc>
    </method>
    <method name="reduce"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="org.apache.pig.impl.io.PigNullableWritable"/>
      <param name="tupIter" type="java.util.Iterator"/>
      <param name="oc" type="org.apache.hadoop.mapred.OutputCollector"/>
      <param name="reporter" type="org.apache.hadoop.mapred.Reporter"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[The reduce function which packages the key and List&lt;Tuple&gt;
 into key, Bag&lt;Tuple&gt; after converting Hadoop type key into Pig type.
 The package result is either collected as is, if the reduce plan is
 empty or after passing through the reduce plan.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This "specialized" reduce class is ONLY to be used in pig queries with
 order by a udf. A UDF used for comparison in the order by expects
 to be handed tuples. Hence a specialized map class (PigMapReduce.MapWithComparator)
 ensures that the "key" used in the order by is wrapped into a tuple (if it 
 isn't already a tuple). This reduce class unwraps this tuple in the case where
 the map had wrapped into a tuple and handes the "unwrapped" key to the POPackage
 for processing]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigMapReduce.ReduceWithComparator -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigOutputFormat -->
  <class name="PigOutputFormat" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.hadoop.mapred.OutputFormat"/>
    <constructor name="PigOutputFormat"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getRecordWriter" return="org.apache.hadoop.mapred.RecordWriter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fs" type="org.apache.hadoop.fs.FileSystem"/>
      <param name="job" type="org.apache.hadoop.mapred.JobConf"/>
      <param name="name" type="java.lang.String"/>
      <param name="progress" type="org.apache.hadoop.util.Progressable"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[In general, the mechanism for an OutputFormat in Pig to get hold of the storeFunc
 and the metadata information (for now schema and location provided for the store in
 the pig script) is through the following Utility static methods:
 {@link org.apache.pig.backend.hadoop.executionengine.util.MapRedUtil#getStoreFunc(JobConf)} 
 - this will get the {@link org.apache.pig.StoreFunc} reference to use in the RecordWriter.write()
 {@link MapRedUtil#getStoreConfig(JobConf)} - this will get the {@link org.apache.pig.StoreConfig}
 reference which has metadata like the location (the string supplied with store statement in the script)
 and the {@link org.apache.pig.impl.logicalLayer.schema.Schema} of the data. The OutputFormat
 should NOT use the location in the StoreConfig to write the output if the location represents a 
 Hadoop dfs path. This is because when "speculative execution" is turned on in Hadoop, multiple
 attempts for the same task (for a given partition) may be running at the same time. So using the
 location will mean that these different attempts will over-write each other's output.
 The OutputFormat should use 
 {@link org.apache.hadoop.mapred.FileOutputFormat#getWorkOutputPath(JobConf)}
 which will provide a safe output directory into which the OutputFormat should write
 the part file (given by the name argument in the getRecordWriter() call).]]>
      </doc>
    </method>
    <method name="getRecordWriter" return="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigOutputFormat.PigRecordWriter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fs" type="org.apache.hadoop.fs.FileSystem"/>
      <param name="job" type="org.apache.hadoop.mapred.JobConf"/>
      <param name="outputDir" type="org.apache.hadoop.fs.Path"/>
      <param name="name" type="java.lang.String"/>
      <param name="progress" type="org.apache.hadoop.util.Progressable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="checkOutputSpecs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fs" type="org.apache.hadoop.fs.FileSystem"/>
      <param name="job" type="org.apache.hadoop.mapred.JobConf"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <field name="PIG_OUTPUT_FUNC" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[The better half of PigInputFormat which is responsible
 for the Store functionality. It is the exact mirror
 image of PigInputFormat having RecordWriter instead
 of a RecordReader.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigOutputFormat -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigOutputFormat.PigRecordWriter -->
  <class name="PigOutputFormat.PigRecordWriter" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.hadoop.mapred.RecordWriter"/>
    <constructor name="PigOutputFormat.PigRecordWriter" type="org.apache.hadoop.fs.FileSystem, org.apache.hadoop.fs.Path, org.apache.pig.StoreFunc"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </constructor>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="org.apache.hadoop.io.WritableComparable"/>
      <param name="value" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[We only care about the values, so we are going to skip the keys when
 we write.
 
 @see org.apache.hadoop.mapred.RecordWriter#write(Object, Object)]]>
      </doc>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reporter" type="org.apache.hadoop.mapred.Reporter"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigOutputFormat.PigRecordWriter -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigSplit -->
  <class name="PigSplit" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.hadoop.mapred.InputSplit"/>
    <constructor name="PigSplit"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="PigSplit" type="org.apache.pig.impl.PigContext, org.apache.hadoop.fs.FileSystem, org.apache.hadoop.fs.Path, java.lang.String, java.util.List, long, long"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getParser" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getStart" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLength" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getPath" return="org.apache.hadoop.fs.Path"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTargetOps" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLoadFunction" return="org.apache.pig.LoadFunc"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLocations" return="java.lang.String[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="readFields"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="is" type="java.io.DataInput"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="os" type="java.io.DataOutput"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[The main split class that maintains important
 information about the input split.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigSplit -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigTextRawComparator -->
  <class name="PigTextRawComparator" extends="org.apache.hadoop.io.WritableComparator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.hadoop.conf.Configurable"/>
    <constructor name="PigTextRawComparator"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setConf"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="conf" type="org.apache.hadoop.conf.Configuration"/>
    </method>
    <method name="getConf" return="org.apache.hadoop.conf.Configuration"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="compare" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b1" type="byte[]"/>
      <param name="s1" type="int"/>
      <param name="l1" type="int"/>
      <param name="b2" type="byte[]"/>
      <param name="s2" type="int"/>
      <param name="l2" type="int"/>
      <doc>
      <![CDATA[Compare two NullableTextWritables as raw bytes.  If neither are null,
 then IntWritable.compare() is used.  If both are null then the indices
 are compared.  Otherwise the null one is defined to be less.]]>
      </doc>
    </method>
    <method name="compare" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o1" type="java.lang.Object"/>
      <param name="o2" type="java.lang.Object"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigTextRawComparator -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigTupleRawComparator -->
  <class name="PigTupleRawComparator" extends="org.apache.hadoop.io.WritableComparator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.hadoop.conf.Configurable"/>
    <constructor name="PigTupleRawComparator"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setConf"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="conf" type="org.apache.hadoop.conf.Configuration"/>
    </method>
    <method name="getConf" return="org.apache.hadoop.conf.Configuration"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="compare" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b1" type="byte[]"/>
      <param name="s1" type="int"/>
      <param name="l1" type="int"/>
      <param name="b2" type="byte[]"/>
      <param name="s2" type="int"/>
      <param name="l2" type="int"/>
      <doc>
      <![CDATA[Compare two NullableTuples as raw bytes.  If neither are null,
 then IntWritable.compare() is used.  If both are null then the indices
 are compared.  Otherwise the null one is defined to be less.]]>
      </doc>
    </method>
    <method name="compare" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o1" type="java.lang.Object"/>
      <param name="o2" type="java.lang.Object"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigTupleRawComparator -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ProgressableReporter -->
  <class name="ProgressableReporter" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PigProgressable"/>
    <constructor name="ProgressableReporter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="ProgressableReporter" type="org.apache.hadoop.mapred.Reporter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="progress"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="progress"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="msg" type="java.lang.String"/>
    </method>
    <method name="setRep"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rep" type="org.apache.hadoop.mapred.Reporter"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ProgressableReporter -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.SliceWrapper -->
  <class name="SliceWrapper" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.hadoop.mapred.InputSplit"/>
    <constructor name="SliceWrapper"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="SliceWrapper" type="org.apache.pig.Slice, org.apache.pig.ExecType, int, org.apache.hadoop.fs.FileSystem, java.util.ArrayList"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getIndex" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLength" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getLocations" return="java.lang.String[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getJobConf" return="org.apache.hadoop.mapred.JobConf"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="makeReader" return="org.apache.hadoop.mapred.RecordReader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="job" type="org.apache.hadoop.mapred.JobConf"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="readFields"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="is" type="java.io.DataInput"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="os" type="java.io.DataOutput"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getWrapped" return="org.apache.pig.Slice"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the wrapped Slice]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Wraps a {@link Slice} in an {@link InputSplit} so it's usable by hadoop.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.SliceWrapper -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.UDFFinishVisitor -->
  <class name="UDFFinishVisitor" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="UDFFinishVisitor" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan, org.apache.pig.impl.plan.PlanWalker"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="visitUserFunc"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userFunc" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.UDFFinishVisitor -->
</package>
<package name="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.partitioners">
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.partitioners.CountingMap -->
  <class name="CountingMap" extends="java.util.HashMap"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="CountingMap"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="put" return="java.lang.Integer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="arg0" type="java.lang.Object"/>
      <param name="arg1" type="java.lang.Integer"/>
    </method>
    <method name="display"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTotalCount" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.partitioners.CountingMap -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.partitioners.DiscreteProbabilitySampleGenerator -->
  <class name="DiscreteProbabilitySampleGenerator" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DiscreteProbabilitySampleGenerator" type="long, float[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="MalFormedProbVecException" type="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.partitioners.MalFormedProbVecException"/>
    </constructor>
    <constructor name="DiscreteProbabilitySampleGenerator" type="float[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="MalFormedProbVecException" type="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.partitioners.MalFormedProbVecException"/>
    </constructor>
    <method name="getNext" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="main"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="args" type="java.lang.String[]"/>
      <exception name="MalFormedProbVecException" type="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.partitioners.MalFormedProbVecException"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.partitioners.DiscreteProbabilitySampleGenerator -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.partitioners.MalFormedProbVecException -->
  <class name="MalFormedProbVecException" extends="org.apache.pig.backend.BackendException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MalFormedProbVecException" type="java.lang.String, int, byte"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="MalFormedProbVecException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="MalFormedProbVecException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="MalFormedProbVecException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="MalFormedProbVecException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.partitioners.MalFormedProbVecException -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.partitioners.WeightedRangePartitioner -->
  <class name="WeightedRangePartitioner" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.hadoop.mapred.Partitioner"/>
    <constructor name="WeightedRangePartitioner"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getPartition" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="org.apache.pig.impl.io.PigNullableWritable"/>
      <param name="value" type="org.apache.hadoop.io.Writable"/>
      <param name="numPartitions" type="int"/>
    </method>
    <method name="configure"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="job" type="org.apache.hadoop.mapred.JobConf"/>
    </method>
    <field name="weightedParts" type="java.util.Map"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.partitioners.WeightedRangePartitioner -->
</package>
<package name="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans">
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.DotMRPrinter -->
  <class name="DotMRPrinter" extends="org.apache.pig.impl.plan.DotPlanDumper"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DotMRPrinter" type="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.MROperPlan, java.io.PrintStream"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setVerbose"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="verbose" type="boolean"/>
    </method>
    <method name="makeDumper" return="org.apache.pig.impl.plan.DotPlanDumper"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="plan" type="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.DotMRPrinter.InnerPlan"/>
      <param name="ps" type="java.io.PrintStream"/>
    </method>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper"/>
    </method>
    <method name="getNestedPlans" return="java.util.Collection"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper"/>
    </method>
    <method name="getAttributes" return="java.lang.String[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper"/>
    </method>
    <doc>
    <![CDATA[This class can print an MR plan in the DOT format. It uses
 clusters to illustrate nesting. If "verbose" is off, it will skip
 any nesting in the associated physical plans.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.DotMRPrinter -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.DotMRPrinter.InnerOperator -->
  <class name="DotMRPrinter.InnerOperator" extends="org.apache.pig.impl.plan.Operator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DotMRPrinter.InnerOperator" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.plan.PlanVisitor"/>
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleOutputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getPlan" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Helper class to represent the relationship of map, reduce and
 combine phases in an MR operator.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.DotMRPrinter.InnerOperator -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.DotMRPrinter.InnerPlan -->
  <class name="DotMRPrinter.InnerPlan" extends="org.apache.pig.impl.plan.OperatorPlan"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DotMRPrinter.InnerPlan" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan, org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan, org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[Helper class to represent the relationship of map, reduce and
 combine phases in an MR operator. Each MR operator will have
 an inner plan of map -> (combine)? -> (reduce)? inner
 operators. The inner operators contain the physical plan of the
 execution phase.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.DotMRPrinter.InnerPlan -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.MROperPlan -->
  <class name="MROperPlan" extends="org.apache.pig.impl.plan.OperatorPlan"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MROperPlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A Plan used to create the plan of 
 Map Reduce Operators which can be 
 converted into the Job Control
 object. This is necessary to capture
 the dependencies among jobs]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.MROperPlan -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.MROpPlanVisitor -->
  <class name="MROpPlanVisitor" extends="org.apache.pig.impl.plan.PlanVisitor"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MROpPlanVisitor" type="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.MROperPlan, org.apache.pig.impl.plan.PlanWalker"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="visitMROp"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mr" type="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <doc>
    <![CDATA[A visitor for the MROperPlan class]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.MROpPlanVisitor -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.MRPrinter -->
  <class name="MRPrinter" extends="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.MROpPlanVisitor"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MRPrinter" type="java.io.PrintStream, org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.MROperPlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param ps PrintStream to output plan information to
 @param plan MR plan to print]]>
      </doc>
    </constructor>
    <method name="setVerbose"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="verbose" type="boolean"/>
    </method>
    <method name="visitMROp"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mr" type="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <doc>
    <![CDATA[A visitor mechanism printing out the logical plan.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.MRPrinter -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.MRStreamHandler -->
  <class name="MRStreamHandler" extends="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.MROpPlanVisitor"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MRStreamHandler" type="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.MROperPlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan MR plan to visit]]>
      </doc>
    </constructor>
    <method name="visitMROp"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mr" type="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <doc>
    <![CDATA[This visitor visits the MRPlan and does the following
 for each MROper
  - If the map plan or the reduce plan of the MROper has
  a POStream in it, this marks in the MROper whether the map 
 has a POStream or if the reduce has a POStream.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.MRStreamHandler -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.POPackageAnnotator -->
  <class name="POPackageAnnotator" extends="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.MROpPlanVisitor"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="POPackageAnnotator" type="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.MROperPlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan MR plan to visit]]>
      </doc>
    </constructor>
    <method name="visitMROp"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mr" type="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <doc>
    <![CDATA[This visitor visits the MRPlan and does the following
 for each MROper
  - visits the POPackage in the reduce plan and finds the corresponding
  POLocalRearrange(s) (either in the map plan of the same oper OR
  reduce plan of predecessor MROper). It then annotates the POPackage
  with information about which columns in the "value" are present in the
  "key" and will need to stitched in to the "value"]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.POPackageAnnotator -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.UDFFinder -->
  <class name="UDFFinder" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="UDFFinder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="UDFFinder" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan, org.apache.pig.impl.plan.PlanWalker"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getUDFs" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setPlan"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="plan" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"/>
    </method>
    <method name="visitSort"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitUserFunc"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userFunc" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitComparisonFunc"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="compFunc" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserComparisonFunc"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.UDFFinder -->
</package>
<package name="org.apache.pig.backend.hadoop.executionengine.physicalLayer">
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.LogicalToPhysicalTranslatorException -->
  <class name="LogicalToPhysicalTranslatorException" extends="org.apache.pig.impl.plan.VisitorException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LogicalToPhysicalTranslatorException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new LogicalToPhysicalTranslatorException with null as the error message.]]>
      </doc>
    </constructor>
    <constructor name="LogicalToPhysicalTranslatorException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new LogicalToPhysicalTranslatorException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user]]>
      </doc>
    </constructor>
    <constructor name="LogicalToPhysicalTranslatorException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new LogicalToPhysicalTranslatorException with the specified cause.

 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="LogicalToPhysicalTranslatorException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new LogicalToPhysicalTranslatorException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="LogicalToPhysicalTranslatorException" type="java.lang.String, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new LogicalToPhysicalTranslatorException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user]]>
      </doc>
    </constructor>
    <constructor name="LogicalToPhysicalTranslatorException" type="java.lang.String, int, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new LogicalToPhysicalTranslatorException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="LogicalToPhysicalTranslatorException" type="java.lang.String, int, byte"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new LogicalToPhysicalTranslatorException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source]]>
      </doc>
    </constructor>
    <constructor name="LogicalToPhysicalTranslatorException" type="java.lang.String, int, byte, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new LogicalToPhysicalTranslatorException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="LogicalToPhysicalTranslatorException" type="java.lang.String, int, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new LogicalToPhysicalTranslatorException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param retry - If the exception is retriable or not]]>
      </doc>
    </constructor>
    <constructor name="LogicalToPhysicalTranslatorException" type="java.lang.String, int, byte, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new LogicalToPhysicalTranslatorException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source 
 @param retry - If the exception is retriable or not]]>
      </doc>
    </constructor>
    <constructor name="LogicalToPhysicalTranslatorException" type="java.lang.String, int, byte, boolean, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new LogicalToPhysicalTranslatorException with the specified message, error code, error source, retriable or not, detalied message for the developer and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source 
 @param retry - If the exception is retriable or not
 @param detailedMsg - The detailed message shown to the developer]]>
      </doc>
    </constructor>
    <constructor name="LogicalToPhysicalTranslatorException" type="java.lang.String, int, byte, boolean, java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new LogicalToPhysicalTranslatorException with the specified message, error code, error source, retriable or not, detalied message for the developer and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source 
 @param retry - If the exception is retriable or not
 @param detailedMsg - The detailed message shown to the developer 
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.LogicalToPhysicalTranslatorException -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.LogToPhyTranslationVisitor -->
  <class name="LogToPhyTranslationVisitor" extends="org.apache.pig.impl.logicalLayer.LOVisitor"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LogToPhyTranslationVisitor" type="org.apache.pig.impl.logicalLayer.LogicalPlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setPigContext"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pc" type="org.apache.pig.impl.PigContext"/>
    </method>
    <method name="getPhysicalPlan" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOGreaterThan"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOLesserThan"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOGreaterThanEqual"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOLesserThanEqual"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOEqual"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LONotEqual"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LORegexp"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOAdd"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOSubtract"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOMultiply"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LODivide"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOMod"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOAnd"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOOr"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LONot"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="cs" type="org.apache.pig.impl.logicalLayer.LOCross"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cg" type="org.apache.pig.impl.logicalLayer.LOCogroup"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="frj" type="org.apache.pig.impl.logicalLayer.LOFRJoin"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[Create the inner plans used to configure the Local Rearrange operators(ppLists)
 Extract the keytypes and create the POFRJoin operator.]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="filter" type="org.apache.pig.impl.logicalLayer.LOFilter"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stream" type="org.apache.pig.impl.logicalLayer.LOStream"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOProject"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="g" type="org.apache.pig.impl.logicalLayer.LOForEach"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="s" type="org.apache.pig.impl.logicalLayer.LOSort"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LODistinct"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="split" type="org.apache.pig.impl.logicalLayer.LOSplit"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="split" type="org.apache.pig.impl.logicalLayer.LOSplitOutput"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="func" type="org.apache.pig.impl.logicalLayer.LOUserFunc"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="loLoad" type="org.apache.pig.impl.logicalLayer.LOLoad"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="loStore" type="org.apache.pig.impl.logicalLayer.LOStore"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOConst"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOBinCond"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LONegative"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOIsNull"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOMapLookup"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOCast"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="limit" type="org.apache.pig.impl.logicalLayer.LOLimit"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOUnion"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <field name="LogToPhyMap" type="java.util.Map"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="currentPlans" type="java.util.Stack"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="currentPlan" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="nodeGen" type="org.apache.pig.impl.plan.NodeIdGenerator"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="pc" type="org.apache.pig.impl.PigContext"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.LogToPhyTranslationVisitor -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator -->
  <class name="PhysicalOperator" extends="org.apache.pig.impl.plan.Operator"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.Cloneable"/>
    <constructor name="PhysicalOperator" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="PhysicalOperator" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="PhysicalOperator" type="org.apache.pig.impl.plan.OperatorKey, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="PhysicalOperator" type="org.apache.pig.impl.plan.OperatorKey, int, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setLineageTracer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="lineage" type="org.apache.pig.pen.util.LineageTracer"/>
    </method>
    <method name="getRequestedParallelism" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setRequestedParallelism"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="requestedParallelism" type="int"/>
    </method>
    <method name="getResultType" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setResultType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="resultType" type="byte"/>
    </method>
    <method name="getInputs" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setInputs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="inputs" type="java.util.List"/>
    </method>
    <method name="isInputAttached" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="attachInput"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <doc>
      <![CDATA[Shorts the input path of this operator by providing the input tuple
 directly
 
 @param t -
            The tuple that should be used as input]]>
      </doc>
    </method>
    <method name="detachInput"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Detaches any tuples that are attached]]>
      </doc>
    </method>
    <method name="isBlocking" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A blocking operator should override this to return true. Blocking
 operators are those that need the full bag before operate on the tuples
 inside the bag. Example is the Global Rearrange. Non-blocking or pipeline
 operators are those that work on a tuple by tuple basis.
 
 @return true if blocking and false otherwise]]>
      </doc>
    </method>
    <method name="processInput" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[A generic method for parsing input that either returns the attached input
 if it exists or fetches it from its predecessor. If special processing is
 required, this method should be overridden.
 
 @return The Result object that results from processing the input
 @throws ExecException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="java.lang.Integer"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="l" type="java.lang.Long"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="d" type="java.lang.Double"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="f" type="java.lang.Float"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="s" type="java.lang.String"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ba" type="org.apache.pig.data.DataByteArray"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="m" type="java.util.Map"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="java.lang.Boolean"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="db" type="org.apache.pig.data.DataBag"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="reset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Reset internal state in an operator.  For use in nested pipelines
 where operators like limit and sort may need to reset their state.
 Limit needs it because it needs to know it's seeing a fresh set of
 input.  Blocking operators like sort and distinct need it because they
 may not have drained their previous input due to a limit and thus need
 to be told to drop their old input and start over.]]>
      </doc>
    </method>
    <method name="setReporter"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reporter" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PigProgressable"/>
    </method>
    <method name="clone" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
      <doc>
      <![CDATA[Make a deep copy of this operator.  This is declared here to make it
 public for all physical operators.  However, the default
 implementation is to throw an exception.  Operators we expect to clone
 need to implement this method.
 @throws CloneNotSupportedException]]>
      </doc>
    </method>
    <method name="cloneHelper"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator"/>
    </method>
    <method name="setParentPlan"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="physicalPlan" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"/>
      <doc>
      <![CDATA[@param physicalPlan]]>
      </doc>
    </method>
    <method name="getLogger" return="org.apache.commons.logging.Log"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setPigLogger"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="logger" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PigLogger"/>
    </method>
    <method name="getPigLogger" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PigLogger"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="serialVersionUID" type="long"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="requestedParallelism" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="inputs" type="java.util.List"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="outputs" type="java.util.List"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="resultType" type="byte"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="parentPlan" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="inputAttached" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="input" type="org.apache.pig.data.Tuple"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="res" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="reporter" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PigProgressable"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="pigLogger" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PigLogger"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="dummyDBA" type="org.apache.pig.data.DataByteArray"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="dummyString" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="dummyDouble" type="java.lang.Double"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="dummyFloat" type="java.lang.Float"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="dummyInt" type="java.lang.Integer"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="dummyLong" type="java.lang.Long"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="dummyBool" type="java.lang.Boolean"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="dummyTuple" type="org.apache.pig.data.Tuple"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="dummyBag" type="org.apache.pig.data.DataBag"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="dummyMap" type="java.util.Map"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="lineageTracer" type="org.apache.pig.pen.util.LineageTracer"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[This is the base class for all operators. This supports a generic way of
 processing inputs which can be overridden by operators extending this class.
 The input model assumes that it can either be taken from an operator or can
 be attached directly to this operator. Also it is assumed that inputs to an
 operator are always in the form of a tuple.
 
 For this pipeline rework, we assume a pull based model, i.e, the root
 operator is going to call getNext with the appropriate type which initiates a
 cascade of getNext calls that unroll to create input for the root operator to
 work on.
 
 Any operator that extends the PhysicalOperator, supports a getNext with all
 the different types of parameter types. The concrete implementation should
 use the result type of its input operator to decide the type of getNext's
 parameter. This is done to avoid switch/case based on the type as much as
 possible. The default is assumed to return an erroneus Result corresponding
 to an unsupported operation on that type. So the operators need to implement
 only those types that are supported.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator -->
  <!-- start interface org.apache.pig.backend.hadoop.executionengine.physicalLayer.PigLogger -->
  <interface name="PigLogger"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="warn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
      <param name="msg" type="java.lang.String"/>
      <param name="warningEnum" type="java.lang.Enum"/>
      <doc>
      <![CDATA[If you have warning messages that need aggregation]]>
      </doc>
    </method>
    <doc>
    <![CDATA[An interface to allow aggregation of messages]]>
    </doc>
  </interface>
  <!-- end interface org.apache.pig.backend.hadoop.executionengine.physicalLayer.PigLogger -->
  <!-- start interface org.apache.pig.backend.hadoop.executionengine.physicalLayer.PigProgressable -->
  <interface name="PigProgressable"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="progress"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="progress"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="msg" type="java.lang.String"/>
    </method>
  </interface>
  <!-- end interface org.apache.pig.backend.hadoop.executionengine.physicalLayer.PigProgressable -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.POPrinter -->
  <class name="POPrinter" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="POPrinter" type="java.io.PrintStream, org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.POPrinter -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.POStatus -->
  <class name="POStatus" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="POStatus"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="STATUS_OK" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="STATUS_NULL" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="STATUS_ERR" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="STATUS_EOP" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="STATUS_EOS" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="result" type="java.lang.Object"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.POStatus -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result -->
  <class name="Result" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <constructor name="Result"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="Result" type="byte, java.lang.Object"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="returnStatus" type="byte"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="result" type="java.lang.Object"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result -->
  <doc>
  <![CDATA[<p>
Implementation of physical operators that use hadoop as the execution engine
and data storage.

<h2> Design </h2>
<p>
Physical operators use the operator, plan, visitor, and optimizer framework
provided by the {@link org.apache.pig.impl.plan} package.
<p>
As with {@link org.apache.pig.impl.logicalLayer}, physical operators consist
of {@link org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators} and
{@link org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators}.  In many data
processing systems relational operators and expression operators are modeled
as different entities because they behave differently.  Pig blurs, though does
not entirely remove, this distinction because of its support for nested
operations.
<p>
Conceptually, relational operators work on an entire relation (in Pig's case,
a bag).  In terms of implementation, they operate on one record (tuple) at a
time.  This avoids needing to load the entire relation into memory before
operating on it.
<p>
Expression operators, on the other hand, operate on the assumption that they
are provided their entire input at invocation time and provide their entire
output when they are finished.
<p>
Pig's hadoop implementation implements a pull based model, where each operator
calls getNext() on the operator before it in the plan.  getNext() is
implemented for each of the different data types, so that operators can
request the data type they expect.  Relational operators will always expect a
tuple.  Expression operators can request any data type.
<p>
As with the logical plan, physical relational operators often have embedded
physical plans.  When a relational operator calls getNext() on its predecessor
and receives a tuple, it will attach that tuple to its embedded physical plan(s)
and then call getNext() on the root node(s) of those plan(s) in order to get the
output.  For example, the Pig Latin <code>filter A by $0 != 5</code> will
produce a POFilter object, with an embedded physical plan that consists of
POProject(0), POConst(5), both attached to PONotEqual.  Each time
POFilter.getNext() is called, it will call its predecessors getNext() method,
and then attach the input to POProject and POConst.  It will then call
PONotEqual.getNext().  PONotEqual will in turn call POProject.getNext() and
POConst.getNext(), and then evaluate and return the results.  If the result is
true, POFilter will return its input tuple.
If the answer is false, it will call it's predecessor's getNext() method and
try again.
<p>
Given Pig's nested data and execution models, there are places it is necessary
to move between relational and expression operators.  Consider the following
Pig Latin script:
<code>
A = load 'myfile';
B = group A by $0;
C = foreach B {
    C1 = filter $1 by $0 &gt; 0; 
    C2 = distinct C1;
    generate group, COUNT(C2), SUM(C1.$0);
}
</code>
In particular, the foreach section presents some interesting challenges.
<p>
First, foreach has three separate outputs, all of which require separate but
parallel executions.  To address this, each element of the foreach is described by a
separate embedded plan.  This can cause duplication of
operations, as in this plan.
In this case splitting the plans for COUNT and SUM cause a double execution of
the <code>C1 = filter</code> section of the script.  But it avoids needing to
place a split operator between filter -&gt; distinct and filter -&gt; SUM.
<p>
The second issue presented by the nested logic is that the
foreach operator is going to receive a tuple with the format ($0, bag), where
bag is a collection of all the tuples with a given value for $0.  It will then
attach that to the filter.  But filter does not expect a bag.  It expects
to get tuples.  On the other end, distinct will be outputing tuples.  But
COUNT() expects C2 to be a bag that can be processed by COUNT as a whole.
<p>
To address this issue, some operators have been modified to provide
"bookend" functionality.  That is, the ability to translate between relational
and expression operators.
The embedded plan for calculating the COUNT in the foreach will
look like:  POProject(1) -&gt; PODistinct -&gt; POProject(*) -&gt; COUNT().
The first POProject(1) will have a bag attached as its input by POForeach.
But POFilter will call getNext(Tuple).  In this case, POProject will know to
open the bag and provide the tuples one at a time, until the bag is empty, at
which point it will return STATUS_EOP.  The PODistinct will be expecting to
return tuples, but POProject(*) will call getNext(bag).  In this case all
relational operators will be able to accumulate all of the tuples by calling
getNext(tuple) on themselves until they see STATUS_EOP, packaging those tuples
into a bag, and then returning that bag.
<p>
And third, project is being subtly overloaded here.  In cases where the script
says <code>C = foreach B generate $1</code>, this type of projection means take the second
element from the tuple and project it.  But in cases like <code>C = foreach B
generate SUM($1.$0)</code> and $1 is a bag, this type of projection expects to
receive a bag ($1) and output a modified bag ($1 with only the first field,
$0, remaining in all the tuples in the bag).  To handle this issue, POProject
will, when it sees that its predecessor is a POProject and its successors is
an expression operator it will perform a projection on the bag (that is,
perform the specified project on each tuple in the bag) rather than on a
tuple.]]>
  </doc>
</package>
<package name="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators">
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Add -->
  <class name="Add" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.BinaryExpressionOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Add" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="Add" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="d" type="java.lang.Double"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="f" type="java.lang.Float"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="java.lang.Integer"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="l" type="java.lang.Long"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="clone" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Add"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Add -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.BinaryComparisonOperator -->
  <class name="BinaryComparisonOperator" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.BinaryExpressionOperator"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ComparisonOperator"/>
    <constructor name="BinaryComparisonOperator" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="BinaryComparisonOperator" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getOperandType" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setOperandType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="operandType" type="byte"/>
    </method>
    <method name="initializeRefs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
    <method name="cloneHelper"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.BinaryComparisonOperator"/>
    </method>
    <field name="operandType" type="byte"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="trueRef" type="java.lang.Boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="falseRef" type="java.lang.Boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[This is a base class for all binary comparison operators. Supports the
 use of operand type instead of result type as the result type is
 always boolean.
 
 All comparison operators fetch the lhs and rhs operands and compare
 them for each type using different comparison methods based on what
 comparison is being implemented.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.BinaryComparisonOperator -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.BinaryExpressionOperator -->
  <class name="BinaryExpressionOperator" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ExpressionOperator"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="BinaryExpressionOperator" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="BinaryExpressionOperator" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getLhs" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ExpressionOperator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setLhs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="lhs" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ExpressionOperator"/>
    </method>
    <method name="getRhs" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ExpressionOperator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setRhs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rhs" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ExpressionOperator"/>
    </method>
    <method name="cloneHelper"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.BinaryExpressionOperator"/>
    </method>
    <field name="lhs" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ExpressionOperator"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="rhs" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ExpressionOperator"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[A base class for all Binary expression operators.
 Supports the lhs and rhs operators which are used
 to fetch the inputs and apply the appropriate operation
 with the appropriate type.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.BinaryExpressionOperator -->
  <!-- start interface org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ComparisonOperator -->
  <interface name="ComparisonOperator"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getOperandType" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Determine the type of the operand(s) of this comparator.
 @return type, as a byte (using DataType types).]]>
      </doc>
    </method>
    <method name="setOperandType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="operandType" type="byte"/>
      <doc>
      <![CDATA[Set the type of the operand(s) of this comparator.
 @param operandType Type of the operand(s), as a byte (using DataType
 types).]]>
      </doc>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="java.lang.Integer"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="l" type="java.lang.Long"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="d" type="java.lang.Double"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="f" type="java.lang.Float"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="s" type="java.lang.String"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ba" type="org.apache.pig.data.DataByteArray"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="m" type="java.util.Map"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="java.lang.Boolean"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="db" type="org.apache.pig.data.DataBag"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <doc>
    <![CDATA[This is an interface for all comparison operators. Supports the
 use of operand type instead of result type as the result type is
 always boolean.]]>
    </doc>
  </interface>
  <!-- end interface org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ComparisonOperator -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ConstantExpression -->
  <class name="ConstantExpression" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ExpressionOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ConstantExpression" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="ConstantExpression" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleOutputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="getValue" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="db" type="org.apache.pig.data.DataBag"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ba" type="org.apache.pig.data.DataByteArray"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="d" type="java.lang.Double"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="f" type="java.lang.Float"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="java.lang.Integer"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="l" type="java.lang.Long"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="s" type="java.lang.String"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="java.lang.Boolean"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="m" type="java.util.Map"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="clone" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ConstantExpression"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
    </method>
    <doc>
    <![CDATA[This class implements a Constant of any type.
 Its value can be set using the setValue method.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ConstantExpression -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Divide -->
  <class name="Divide" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.BinaryExpressionOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Divide" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="Divide" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="d" type="java.lang.Double"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="f" type="java.lang.Float"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="java.lang.Integer"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="l" type="java.lang.Long"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="clone" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Divide"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Divide -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.EqualToExpr -->
  <class name="EqualToExpr" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.BinaryComparisonOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="EqualToExpr" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="EqualToExpr" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="bool" type="java.lang.Boolean"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="clone" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.EqualToExpr"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.EqualToExpr -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ExpressionOperator -->
  <class name="ExpressionOperator" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ExpressionOperator" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="ExpressionOperator" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="supportsMultipleOutputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="db" type="org.apache.pig.data.DataBag"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="visit"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="clone" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ExpressionOperator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
      <doc>
      <![CDATA[Make a deep copy of this operator.  This is declared here to make it
 possible to call clone on ExpressionOperators.
 @throws CloneNotSupportedException]]>
      </doc>
    </method>
    <field name="log" type="org.apache.commons.logging.Log"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[A base class for all types of expressions. All expression
 operators must extend this class.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ExpressionOperator -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.GreaterThanExpr -->
  <class name="GreaterThanExpr" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.BinaryComparisonOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GreaterThanExpr" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="GreaterThanExpr" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="bool" type="java.lang.Boolean"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="clone" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.GreaterThanExpr"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.GreaterThanExpr -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.GTOrEqualToExpr -->
  <class name="GTOrEqualToExpr" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.BinaryComparisonOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GTOrEqualToExpr" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="GTOrEqualToExpr" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="bool" type="java.lang.Boolean"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="clone" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.GTOrEqualToExpr"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.GTOrEqualToExpr -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.LessThanExpr -->
  <class name="LessThanExpr" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.BinaryComparisonOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LessThanExpr" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="LessThanExpr" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="bool" type="java.lang.Boolean"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="clone" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.LessThanExpr"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.LessThanExpr -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.LTOrEqualToExpr -->
  <class name="LTOrEqualToExpr" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.BinaryComparisonOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LTOrEqualToExpr" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="LTOrEqualToExpr" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="bool" type="java.lang.Boolean"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="clone" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.LTOrEqualToExpr"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.LTOrEqualToExpr -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Mod -->
  <class name="Mod" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.BinaryExpressionOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Mod" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="Mod" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="java.lang.Integer"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="java.lang.Long"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="clone" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Mod"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Mod -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Multiply -->
  <class name="Multiply" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.BinaryExpressionOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Multiply" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="Multiply" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="d" type="java.lang.Double"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="f" type="java.lang.Float"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="java.lang.Integer"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="l" type="java.lang.Long"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="clone" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Multiply"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Multiply -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.NotEqualToExpr -->
  <class name="NotEqualToExpr" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.BinaryComparisonOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="NotEqualToExpr" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="NotEqualToExpr" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="bool" type="java.lang.Boolean"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="clone" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.NotEqualToExpr"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.NotEqualToExpr -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POAnd -->
  <class name="POAnd" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.BinaryComparisonOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="POAnd" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POAnd" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="java.lang.Boolean"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="clone" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POAnd"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
    </method>
    <doc>
    <![CDATA[Boolean and operator.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POAnd -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POBinCond -->
  <class name="POBinCond" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ExpressionOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="POBinCond" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POBinCond" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POBinCond" type="org.apache.pig.impl.plan.OperatorKey, int, org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ExpressionOperator, org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ExpressionOperator, org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ExpressionOperator"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="java.lang.Boolean"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="db" type="org.apache.pig.data.DataBag"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ba" type="org.apache.pig.data.DataByteArray"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="d" type="java.lang.Double"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="f" type="java.lang.Float"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="java.lang.Integer"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="l" type="java.lang.Long"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="m" type="java.util.Map"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="s" type="java.lang.String"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="attachInput"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
    </method>
    <method name="setCond"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="condOp" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ExpressionOperator"/>
    </method>
    <method name="setRhs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rhs" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ExpressionOperator"/>
    </method>
    <method name="setLhs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="lhs" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ExpressionOperator"/>
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="clone" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POBinCond"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POBinCond -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POCast -->
  <class name="POCast" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ExpressionOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="POCast" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POCast" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setLoadFSpec"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="lf" type="org.apache.pig.FuncSpec"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="java.lang.Integer"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="l" type="java.lang.Long"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="d" type="java.lang.Double"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="f" type="java.lang.Float"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="str" type="java.lang.String"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="bag" type="org.apache.pig.data.DataBag"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="m" type="java.util.Map"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="clone" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POCast"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
    </method>
    <doc>
    <![CDATA[This is just a cast that converts DataByteArray into either String or
 Integer. Just added it for testing the POUnion. Need the full operator
 implementation.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POCast -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POIsNull -->
  <class name="POIsNull" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.UnaryComparisonOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="POIsNull" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POIsNull" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POIsNull" type="org.apache.pig.impl.plan.OperatorKey, int, org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ExpressionOperator"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="java.lang.Boolean"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="clone" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POIsNull"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POIsNull -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POMapLookUp -->
  <class name="POMapLookUp" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ExpressionOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="POMapLookUp" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POMapLookUp" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POMapLookUp" type="org.apache.pig.impl.plan.OperatorKey, int, java.lang.Object"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setLookUpKey"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.Object"/>
    </method>
    <method name="getLookUpKey" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="processInput" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="java.lang.Boolean"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="db" type="org.apache.pig.data.DataBag"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ba" type="org.apache.pig.data.DataByteArray"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="d" type="java.lang.Double"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="f" type="java.lang.Float"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="java.lang.Integer"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="l" type="java.lang.Long"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="m" type="java.util.Map"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="s" type="java.lang.String"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="clone" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POMapLookUp"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POMapLookUp -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PONegative -->
  <class name="PONegative" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.UnaryExpressionOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PONegative" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="PONegative" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="PONegative" type="org.apache.pig.impl.plan.OperatorKey, int, org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ExpressionOperator"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="d" type="java.lang.Double"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="f" type="java.lang.Float"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="java.lang.Integer"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="l" type="java.lang.Long"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="clone" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PONegative"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PONegative -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PONot -->
  <class name="PONot" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.UnaryComparisonOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PONot" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="PONot" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="java.lang.Boolean"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="clone" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PONot"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
    </method>
    <doc>
    <![CDATA[Boolean not operator.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PONot -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POOr -->
  <class name="POOr" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.BinaryComparisonOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="POOr" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POOr" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="java.lang.Boolean"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="clone" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POOr"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
    </method>
    <doc>
    <![CDATA[Boolean or operator.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POOr -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject -->
  <class name="POProject" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ExpressionOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="POProject" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POProject" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POProject" type="org.apache.pig.impl.plan.OperatorKey, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POProject" type="org.apache.pig.impl.plan.OperatorKey, int, java.util.ArrayList"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleOutputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="attachInput"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <doc>
      <![CDATA[Overridden since the attachment of the new input
 should cause the old processing to end.]]>
      </doc>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Fetches the input tuple and returns the requested
 column
 @return next value.
 @throws ExecException]]>
      </doc>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="db" type="org.apache.pig.data.DataBag"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="consumeInputBag" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[@param input
 @throws ExecException]]>
      </doc>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ba" type="org.apache.pig.data.DataByteArray"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="d" type="java.lang.Double"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="f" type="java.lang.Float"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="java.lang.Integer"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="l" type="java.lang.Long"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="java.lang.Boolean"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="m" type="java.util.Map"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="s" type="java.lang.String"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Asked for Tuples. Check if the input is a bag.
 If so, stream the tuples in the bag instead of
 the entire bag.]]>
      </doc>
    </method>
    <method name="getColumns" return="java.util.ArrayList"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getColumn" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="setColumns"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cols" type="java.util.ArrayList"/>
    </method>
    <method name="setColumn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="col" type="int"/>
    </method>
    <method name="isOverloaded" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setOverloaded"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="overloaded" type="boolean"/>
    </method>
    <method name="isStar" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setStar"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="star" type="boolean"/>
    </method>
    <method name="clone" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
    </method>
    <method name="processInputBag" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="setResultSingleTupleBag"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="resultSingleTupleBag" type="boolean"/>
    </method>
    <field name="bagFactory" type="org.apache.pig.data.BagFactory"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="columns" type="java.util.ArrayList"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Implements the overloaded form of the project operator.
 Projects the specified column from the input tuple.
 However, if asked for tuples when the input is a bag,
 the overloaded form is invoked and the project streams
 the tuples through instead of the bag.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PORegexp -->
  <class name="PORegexp" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.BinaryComparisonOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PORegexp" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="PORegexp" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="bool" type="java.lang.Boolean"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="clone" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PORegexp"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PORegexp -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PORelationToExprProject -->
  <class name="PORelationToExprProject" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PORelationToExprProject" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="PORelationToExprProject" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="PORelationToExprProject" type="org.apache.pig.impl.plan.OperatorKey, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="PORelationToExprProject" type="org.apache.pig.impl.plan.OperatorKey, int, java.util.ArrayList"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="reset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="db" type="org.apache.pig.data.DataBag"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="clone" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PORelationToExprProject"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
    </method>
    <doc>
    <![CDATA[Implements a specialized form of POProject which is
 used *ONLY* in the following case:
 This project is Project(*) introduced after a relational operator
 to supply a bag as output (as an expression). This project is either
 providing the bag as input to a successor expression operator or is 
 itself the leaf in a inner plan
 If the predecessor relational operator sends an EOP
 then send an empty bag first to signal "empty" output
 and then send an EOP

 NOTE: A Project(*) of return type BAG whose predecessor is
 from an outside plan (i.e. not in the same inner plan as the project)
 will NOT lead us here. So a query like:
 a = load 'baginp.txt' as (b:bag{t:tuple()}); b = foreach a generate $0; dump b;
 will go through a regular project (without the following flag)]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PORelationToExprProject -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserComparisonFunc -->
  <class name="POUserComparisonFunc" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ExpressionOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="POUserComparisonFunc" type="org.apache.pig.impl.plan.OperatorKey, int, java.util.List, org.apache.pig.FuncSpec, org.apache.pig.ComparisonFunc"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POUserComparisonFunc" type="org.apache.pig.impl.plan.OperatorKey, int, java.util.List, org.apache.pig.FuncSpec"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getComparator" return="org.apache.pig.ComparisonFunc"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="java.lang.Integer"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="java.lang.Boolean"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="db" type="org.apache.pig.data.DataBag"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ba" type="org.apache.pig.data.DataByteArray"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="d" type="java.lang.Double"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="f" type="java.lang.Float"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="l" type="java.lang.Long"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="m" type="java.util.Map"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="s" type="java.lang.String"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="attachInput"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t1" type="org.apache.pig.data.Tuple"/>
      <param name="t2" type="org.apache.pig.data.Tuple"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFuncSpec" return="org.apache.pig.FuncSpec"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="clone" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserComparisonFunc"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserComparisonFunc -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc -->
  <class name="POUserFunc" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ExpressionOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="POUserFunc" type="org.apache.pig.impl.plan.OperatorKey, int, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POUserFunc" type="org.apache.pig.impl.plan.OperatorKey, int, java.util.List, org.apache.pig.FuncSpec"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POUserFunc" type="org.apache.pig.impl.plan.OperatorKey, int, java.util.List, org.apache.pig.FuncSpec, org.apache.pig.EvalFunc"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="processInput" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tIn" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="db" type="org.apache.pig.data.DataBag"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="java.lang.Integer"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="java.lang.Boolean"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ba" type="org.apache.pig.data.DataByteArray"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="d" type="java.lang.Double"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="f" type="java.lang.Float"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="l" type="java.lang.Long"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="m" type="java.util.Map"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="s" type="java.lang.String"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="setAlgebraicFunction"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="Function" type="byte"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getInitial" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getIntermed" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getFinal" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getReturnType" return="java.lang.reflect.Type"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="finish"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="outputSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
    </method>
    <method name="isAsynchronous" return="java.lang.Boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleOutputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="getFuncSpec" return="org.apache.pig.FuncSpec"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="combinable" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="clone" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
    </method>
    <field name="INITIAL" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="INTERMEDIATE" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="FINAL" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Subtract -->
  <class name="Subtract" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.BinaryExpressionOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Subtract" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="Subtract" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="d" type="java.lang.Double"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="f" type="java.lang.Float"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="java.lang.Integer"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="l" type="java.lang.Long"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="clone" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Subtract"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Subtract -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.UnaryComparisonOperator -->
  <class name="UnaryComparisonOperator" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.UnaryExpressionOperator"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ComparisonOperator"/>
    <constructor name="UnaryComparisonOperator" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="UnaryComparisonOperator" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getOperandType" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setOperandType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="operandType" type="byte"/>
    </method>
    <field name="operandType" type="byte"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[This is a base class for all unary comparison operators. Supports the
 use of operand type instead of result type as the result type is
 always boolean.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.UnaryComparisonOperator -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.UnaryExpressionOperator -->
  <class name="UnaryExpressionOperator" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ExpressionOperator"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="UnaryExpressionOperator" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="UnaryExpressionOperator" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setInputAsExpr"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="plan" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"/>
      <doc>
      <![CDATA[Set the contained expression to the be the input value.]]>
      </doc>
    </method>
    <method name="setExpr"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ExpressionOperator"/>
      <doc>
      <![CDATA[Set the contained expression explicitly.  This is mostly for testing.
 @param e Expression to contain.]]>
      </doc>
    </method>
    <method name="getExpr" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ExpressionOperator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the contained expression.
 @return contained expression.]]>
      </doc>
    </method>
    <method name="cloneHelper"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.UnaryExpressionOperator"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.UnaryExpressionOperator -->
</package>
<package name="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans">
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.DotPOPrinter -->
  <class name="DotPOPrinter" extends="org.apache.pig.impl.plan.DotPlanDumper"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DotPOPrinter" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan, java.io.PrintStream"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="DotPOPrinter" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan, java.io.PrintStream, boolean, java.util.Set, java.util.Set, java.util.Set"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="makeDumper" return="org.apache.pig.impl.plan.DotPlanDumper"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="plan" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"/>
      <param name="ps" type="java.io.PrintStream"/>
    </method>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator"/>
    </method>
    <method name="getAttributes" return="java.lang.String[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator"/>
    </method>
    <method name="getMultiOutputNestedPlans" return="java.util.Collection"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator"/>
    </method>
    <method name="getNestedPlans" return="java.util.Collection"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator"/>
    </method>
    <doc>
    <![CDATA[This class can print a physical plan in the DOT format. It uses
 clusters to illustrate nesting. If "verbose" is off, it will skip
 any nesting.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.DotPOPrinter -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor -->
  <class name="PhyPlanVisitor" extends="org.apache.pig.impl.plan.PlanVisitor"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PhyPlanVisitor" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan, org.apache.pig.impl.plan.PlanWalker"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="visitLoad"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ld" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLoad"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitStore"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="st" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitFilter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fl" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFilter"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitLocalRearrange"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="lr" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitGlobalRearrange"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="gr" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POGlobalRearrange"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitPackage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pkg" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitCombinerPackage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pkg" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCombinerPackage"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitMultiQueryPackage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pkg" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMultiQueryPackage"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitPOForEach"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nfe" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitUnion"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="un" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POUnion"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitSplit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="spl" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSplit"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitDemux"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="demux" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PODemux"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitDistinct"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="distinct" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PODistinct"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitRead"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="read" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PORead"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitSort"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sort" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitConstant"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cnst" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ConstantExpression"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitProject"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="proj" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitGreaterThan"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="grt" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.GreaterThanExpr"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitLessThan"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="lt" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.LessThanExpr"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitGTOrEqual"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="gte" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.GTOrEqualToExpr"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitLTOrEqual"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="lte" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.LTOrEqualToExpr"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitEqualTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="eq" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.EqualToExpr"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitNotEqualTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="eq" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.NotEqualToExpr"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitRegexp"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="re" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PORegexp"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitIsNull"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="isNull" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POIsNull"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitAdd"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="add" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Add"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitSubtract"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sub" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Subtract"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitMultiply"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mul" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Multiply"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitDivide"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dv" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Divide"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitMod"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mod" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Mod"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitAnd"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="and" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POAnd"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitOr"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="or" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POOr"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitNot"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="not" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PONot"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitBinCond"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="binCond" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POBinCond"/>
    </method>
    <method name="visitNegative"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="negative" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PONegative"/>
    </method>
    <method name="visitUserFunc"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userFunc" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitComparisonFunc"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="compFunc" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserComparisonFunc"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitMapLookUp"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mapLookUp" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POMapLookUp"/>
    </method>
    <method name="visitJoinPackage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="joinPackage" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POJoinPackage"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitCast"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cast" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POCast"/>
    </method>
    <method name="visitLimit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="lim" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLimit"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitFRJoin"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="join" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFRJoin"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stream" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStream"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param stream
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visitCogroup"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cogroup" type="org.apache.pig.backend.local.executionengine.physicalLayer.relationalOperators.POCogroup"/>
    </method>
    <method name="visitSplit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="split" type="org.apache.pig.backend.local.executionengine.physicalLayer.relationalOperators.POSplit"/>
    </method>
    <method name="visitLocalRearrangeForIllustrate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="lrfi" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrangeForIllustrate"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param lrfi
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visitPOOptimizedForEach"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="optimizedForEach" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POOptimizedForEach"/>
      <doc>
      <![CDATA[@param optimizedForEach]]>
      </doc>
    </method>
    <method name="visitPreCombinerLocalRearrange"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="preCombinerLocalRearrange" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPreCombinerLocalRearrange"/>
      <doc>
      <![CDATA[@param preCombinerLocalRearrange]]>
      </doc>
    </method>
    <method name="visitCross"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cross" type="org.apache.pig.backend.local.executionengine.physicalLayer.relationalOperators.POCross"/>
    </method>
    <doc>
    <![CDATA[The visitor class for the Physical Plan. To use this,
 create the visitor with the plan to be visited. Call 
 the visit() method to traverse the plan in a depth first
 fashion.
 
 This class also visits the nested plans inside the operators.
 One has to extend this class to modify the nature of each visit
 and to maintain any relevant state information between the visits
 to two different operators.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan -->
  <class name="PhysicalPlan" extends="org.apache.pig.impl.plan.OperatorPlan"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.Cloneable"/>
    <constructor name="PhysicalPlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attachInput"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
    </method>
    <method name="explain"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.OutputStream"/>
      <doc>
      <![CDATA[Write a visual representation of the Physical Plan
 into the given output stream
 @param out : OutputStream to which the visual representation is written]]>
      </doc>
    </method>
    <method name="explain"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.OutputStream"/>
      <param name="verbose" type="boolean"/>
      <doc>
      <![CDATA[Write a visual representation of the Physical Plan
 into the given output stream
 @param out : OutputStream to which the visual representation is written
 @param verbose : Amount of information to print]]>
      </doc>
    </method>
    <method name="explain"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ps" type="java.io.PrintStream"/>
      <param name="format" type="java.lang.String"/>
      <param name="verbose" type="boolean"/>
      <doc>
      <![CDATA[Write a visual representation of the Physical Plan
 into the given printstream
 @param ps : PrintStream to which the visual representation is written
 @param format : Format to print in
 @param verbose : Amount of information to print]]>
      </doc>
    </method>
    <method name="connect"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="from" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator"/>
      <param name="to" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator"/>
      <exception name="PlanException" type="org.apache.pig.impl.plan.PlanException"/>
    </method>
    <method name="remove"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator"/>
    </method>
    <method name="replace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="oldNode" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator"/>
      <param name="newNode" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator"/>
      <exception name="PlanException" type="org.apache.pig.impl.plan.PlanException"/>
    </method>
    <method name="isEmpty" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
    </method>
    <method name="clone" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
    </method>
    <field name="endOfAllInput" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[The base class for all types of physical plans. 
 This extends the Operator Plan.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PlanPrinter -->
  <class name="PlanPrinter" extends="org.apache.pig.impl.plan.PlanVisitor"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PlanPrinter" type="org.apache.pig.impl.plan.OperatorPlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="PlanPrinter" type="org.apache.pig.impl.plan.OperatorPlan, java.io.PrintStream"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setVerbose"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="verbose" type="boolean"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="print"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="printer" type="java.io.OutputStream"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="breadthFirst"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="depthFirstPP" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visitLoad"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLoad"/>
    </method>
    <method name="visitStore"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore"/>
    </method>
    <method name="visitFilter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFilter"/>
    </method>
    <method name="visitLocalRearrange"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange"/>
    </method>
    <method name="visitGlobalRearrange"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POGlobalRearrange"/>
    </method>
    <method name="visitPackage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage"/>
    </method>
    <method name="visitStartMap"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POUnion"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PlanPrinter -->
</package>
<package name="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators">
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCombinerPackage -->
  <class name="POCombinerPackage" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="POCombinerPackage" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage, boolean[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A new POPostCombinePackage will be constructed as a near clone of the
 provided POPackage.
 @param pkg POPackage to clone.
 @param bags for each field, indicates whether it should be a bag (true)
 or a simple field (false).]]>
      </doc>
    </constructor>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="setKeyInfo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="keyInfo" type="java.util.Map"/>
      <doc>
      <![CDATA[@param keyInfo the keyInfo to set]]>
      </doc>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <doc>
    <![CDATA[The package operator that packages the globally rearranged tuples into
 output format after the combiner stage.  It differs from POPackage in that
 it does not use the index in the NullableTuple to find the bag to put a
 tuple in.  Instead, the inputs are put in a bag corresponding to their 
 offset in the tuple.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCombinerPackage -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PODemux -->
  <class name="PODemux" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PODemux" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs an operator with the specified key.
 
 @param k the operator key]]>
      </doc>
    </constructor>
    <constructor name="PODemux" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs an operator with the specified key
 and degree of parallelism.
  
 @param k the operator key
 @param rp the degree of parallelism requested]]>
      </doc>
    </constructor>
    <constructor name="PODemux" type="org.apache.pig.impl.plan.OperatorKey, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs an operator with the specified key and inputs.
  
 @param k the operator key
 @param inp the inputs that this operator will read data from]]>
      </doc>
    </constructor>
    <constructor name="PODemux" type="org.apache.pig.impl.plan.OperatorKey, int, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs an operator with the specified key,
 degree of parallelism and inputs.
 
 @param k the operator key
 @param rp the degree of parallelism requested 
 @param inp the inputs that this operator will read data from]]>
      </doc>
    </constructor>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleOutputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setBaseIndex"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="idx" type="int"/>
      <doc>
      <![CDATA[Sets the base index of this demux. 
 
 @param idx the base index]]>
      </doc>
    </method>
    <method name="getBaseIndex" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the base index of this demux
 
 @return the base index]]>
      </doc>
    </method>
    <method name="getPlans" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the list of inner plans.
  
 @return the list of the nested plans]]>
      </doc>
    </method>
    <method name="addPlan"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="inPlan" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"/>
      <param name="mapKeyType" type="byte"/>
      <doc>
      <![CDATA[Appends the specified plan at the end of the list.
 
 @param inPlan plan to be appended to the inner plan list]]>
      </doc>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="setSameMapKeyType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sameMapKeyType" type="boolean"/>
      <doc>
      <![CDATA[Sets a flag indicating if all inner plans have 
 the same map key type. 
 
 @param sameMapKeyType true if all inner plans have 
 the same map key type; otherwise false]]>
      </doc>
    </method>
    <method name="isSameMapKeyType" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a flag indicating if all inner plans 
 have the same map key type 
 
 @return true if all inner plans have 
 the same map key type; otherwise false]]>
      </doc>
    </method>
    <method name="setInCombiner"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="inCombiner" type="boolean"/>
      <doc>
      <![CDATA[Sets a flag indicating if this operator is 
 in a combiner. 
 
 @param inCombiner true if this operator is in
 a combiner; false if this operator is in a reducer]]>
      </doc>
    </method>
    <method name="isInCombiner" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a flag indicating if this operator is 
 in a combiner.
 
 @return true if this operator is in a combiner;
 otherwise this operator is in a reducer]]>
      </doc>
    </method>
    <doc>
    <![CDATA[The MapReduce Demultiplexer operator.
 <p>
 This operator is used when merging multiple Map-Reduce splittees
 into a Map-only splitter during multi-query optimization. 
 The reduce physical plans of the splittees become the inner plans 
 of this operator.
 <p>
 Due to the recursive nature of multi-query optimization, this operator
 may be contained in another demux operator.
 <p>
 The predecessor of this operator must be a POMultiQueryPackage
 operator which passes the index (indicating which inner reduce plan to run)
 along with other data to this operator.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PODemux -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PODistinct -->
  <class name="PODistinct" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.Cloneable"/>
    <constructor name="PODistinct" type="org.apache.pig.impl.plan.OperatorKey, int, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="PODistinct" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="PODistinct" type="org.apache.pig.impl.plan.OperatorKey, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="PODistinct" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="isBlocking" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleOutputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="reset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="clone" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PODistinct"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
    </method>
    <doc>
    <![CDATA[Find the distinct set of tuples in a bag.
 This is a blocking operator. All the input is put in the hashset implemented
 in DistinctDataBag which also provides the other DataBag interfaces.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PODistinct -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFilter -->
  <class name="POFilter" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="POFilter" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POFilter" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POFilter" type="org.apache.pig.impl.plan.OperatorKey, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POFilter" type="org.apache.pig.impl.plan.OperatorKey, int, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Attaches the proccesed input tuple to the expression plan and checks if
 comparison operator returns a true. If so the tuple is not filtered and
 let to pass through. Else, further input is processed till a tuple that
 can be passed through is found or EOP is reached.]]>
      </doc>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleOutputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="setPlan"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="plan" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"/>
    </method>
    <method name="getPlan" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[This is an implementation of the Filter operator. It has an Expression Plan
 that decides whether the input tuple should be filtered or passed through. To
 avoid many function calls, the filter operator, stores the Comparison
 Operator that is the root of the Expression Plan and uses its getNext
 directly.
 
 Since the filter is supposed to return tuples only, getNext is not supported
 on any other data type.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFilter -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach -->
  <class name="POForEach" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="POForEach" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POForEach" type="org.apache.pig.impl.plan.OperatorKey, int, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POForEach" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POForEach" type="org.apache.pig.impl.plan.OperatorKey, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POForEach" type="org.apache.pig.impl.plan.OperatorKey, int, java.util.List, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleOutputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Calls getNext on the generate operator inside the nested
 physical plan and returns it maintaining an additional state
 to denote the begin and end of the nested plan processing.]]>
      </doc>
    </method>
    <method name="processPlan" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="CreateTuple" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="data" type="java.lang.Object[]"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[@param data array that is the template for the final flattened tuple
 @return the final flattened tuple]]>
      </doc>
    </method>
    <method name="attachInputToPlans"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
    </method>
    <method name="getLeaves"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
    <method name="getInputPlans" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setInputPlans"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="plans" type="java.util.List"/>
    </method>
    <method name="addInputPlan"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="plan" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"/>
      <param name="flatten" type="boolean"/>
    </method>
    <method name="setToBeFlattened"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="flattens" type="java.util.List"/>
    </method>
    <method name="getToBeFlattened" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="clone" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
      <doc>
      <![CDATA[Make a deep copy of this operator.  
 @throws CloneNotSupportedException]]>
      </doc>
    </method>
    <method name="inProcessing" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setUpFlattens"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="isToBeFlattened" type="java.util.List"/>
    </method>
    <method name="getOpsToBeReset" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the opsToBeReset]]>
      </doc>
    </method>
    <method name="setOpsToBeReset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="opsToBeReset" type="java.util.List"/>
      <doc>
      <![CDATA[@param opsToBeReset the opsToBeReset to set]]>
      </doc>
    </method>
    <field name="inputPlans" type="java.util.List"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="opsToBeReset" type="java.util.List"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="log" type="org.apache.commons.logging.Log"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="mTupleFactory" type="org.apache.pig.data.TupleFactory"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="processingPlan" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="its" type="java.util.Iterator[]"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="bags" type="java.lang.Object[]"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="data" type="java.lang.Object[]"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="resultTypes" type="byte[]"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="isToBeFlattenedArray" type="boolean[]"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="noItems" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="planLeafOps" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator[]"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFRJoin -->
  <class name="POFRJoin" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="POFRJoin" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PlanException" type="org.apache.pig.impl.plan.PlanException"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </constructor>
    <constructor name="POFRJoin" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PlanException" type="org.apache.pig.impl.plan.PlanException"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </constructor>
    <constructor name="POFRJoin" type="org.apache.pig.impl.plan.OperatorKey, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PlanException" type="org.apache.pig.impl.plan.PlanException"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </constructor>
    <constructor name="POFRJoin" type="org.apache.pig.impl.plan.OperatorKey, int, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PlanException" type="org.apache.pig.impl.plan.PlanException"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </constructor>
    <constructor name="POFRJoin" type="org.apache.pig.impl.plan.OperatorKey, int, java.util.List, java.util.List, java.util.List, org.apache.pig.impl.io.FileSpec[], int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </constructor>
    <method name="getJoinPlans" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleOutputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getFragment" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setFragment"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fragment" type="int"/>
    </method>
    <method name="getReplFiles" return="org.apache.pig.impl.io.FileSpec[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setReplFiles"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="replFiles" type="org.apache.pig.impl.io.FileSpec[]"/>
    </method>
    <doc>
    <![CDATA[The operator models the join keys using the Local Rearrange operators which 
 are configured with the plan specified by the user. It also sets up
 one Hashtable per replicated input which maps the Key(k) stored as a Tuple
 to a DataBag which holds all the values in the input having the same key(k)
 The getNext() reads an input from its predecessor and separates them into
 key & value. It configures a foreach operator with the databags obtained from
 each Hashtable for the key and also with the value for the fragment input.
 It then returns tuples returned by this foreach operator.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFRJoin -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POGlobalRearrange -->
  <class name="POGlobalRearrange" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="POGlobalRearrange" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POGlobalRearrange" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POGlobalRearrange" type="org.apache.pig.impl.plan.OperatorKey, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POGlobalRearrange" type="org.apache.pig.impl.plan.OperatorKey, int, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleOutputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isBlocking" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <doc>
    <![CDATA[Dummy operator to test MRCompiler.
 This will be a local operator and its
 getNext methods have to be implemented]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POGlobalRearrange -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POJoinPackage -->
  <class name="POJoinPackage" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="POJoinPackage" type="org.apache.pig.impl.plan.OperatorKey, int, org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage, org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Calls getNext to get next ForEach result. The input for POJoinPackage is 
 a (key, NullableTuple) pair. We will materialize n-1 inputs into bags, feed input#n 
 one tuple a time to the delegated ForEach operator, the input for ForEach is
 
     (input#1, input#2, input#3....input#n[i]), i=(1..k), suppose input#n consists
     
 of k tuples.
 For every ForEach input, pull all the results from ForEach.
 getNext will be called multiple times for a particular input, 
 it returns one output tuple from ForEach every time we call getNext, 
 so we need to maintain internal status to keep tracking of where we are.]]>
      </doc>
    </method>
    <method name="getInputPlans" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setInputPlans"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="plans" type="java.util.List"/>
    </method>
    <method name="setToBeFlattened"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="flattens" type="java.util.List"/>
    </method>
    <method name="getForEach" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POOptimizedForEach"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the forEach]]>
      </doc>
    </method>
    <method name="setChunkSize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="chunkSize" type="long"/>
      <doc>
      <![CDATA[@param chunkSize - the chunk size for the biggest input]]>
      </doc>
    </method>
    <field name="DEFAULT_CHUNK_SIZE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POJoinPackage -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLimit -->
  <class name="POLimit" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="POLimit" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POLimit" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POLimit" type="org.apache.pig.impl.plan.OperatorKey, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POLimit" type="org.apache.pig.impl.plan.OperatorKey, int, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setLimit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="limit" type="long"/>
    </method>
    <method name="getLimit" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Counts the number of tuples processed into static variable soFar, if the number of tuples processed reach the 
 limit, return EOP; Otherwise, return the tuple]]>
      </doc>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleOutputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="reset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="clone" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLimit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLimit -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLoad -->
  <class name="POLoad" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="POLoad" type="org.apache.pig.impl.plan.OperatorKey, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POLoad" type="org.apache.pig.impl.plan.OperatorKey, org.apache.pig.impl.io.FileSpec, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POLoad" type="org.apache.pig.impl.plan.OperatorKey, int, org.apache.pig.impl.io.FileSpec, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setUp"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Set up the loader by 
 1) Instantiating the load func
 2) Opening an input stream to the specified file and
 3) Binding to the input stream
 @throws IOException]]>
      </doc>
    </method>
    <method name="tearDown"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[At the end of processing, the inputstream is closed
 using this method
 @throws IOException]]>
      </doc>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[The main method used by this operator's successor
 to read tuples from the specified file using the
 specified load function.
 
 @return Whatever the loader returns
          A null from the loader is indicative
          of EOP and hence the tearDown of connection]]>
      </doc>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleOutputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="getLFile" return="org.apache.pig.impl.io.FileSpec"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setLFile"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="file" type="org.apache.pig.impl.io.FileSpec"/>
    </method>
    <method name="getPc" return="org.apache.pig.impl.PigContext"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setPc"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pc" type="org.apache.pig.impl.PigContext"/>
    </method>
    <method name="isSplittable" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the splittable]]>
      </doc>
    </method>
    <doc>
    <![CDATA[The load operator which is used in two ways:
 1) As a local operator it can be used to load files
 2) In the Map Reduce setting, it is used to create jobs
    from MapReduce operators which keep the loads and
    stores in the Map and Reduce Plans till the job is created]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLoad -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange -->
  <class name="POLocalRearrange" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="POLocalRearrange" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POLocalRearrange" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POLocalRearrange" type="org.apache.pig.impl.plan.OperatorKey, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POLocalRearrange" type="org.apache.pig.impl.plan.OperatorKey, int, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleOutputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getIndex" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setIndex"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Sets the co-group index of this operator
 
 @param index the position of this operator in 
 a co-group operation 
 @throws ExecException if the index value is bigger then 0x7F]]>
      </doc>
    </method>
    <method name="setMultiQueryIndex"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Sets the multi-query index of this operator
 
 @param index the position of the parent plan of this operator
 in the enclosed split operator
 @throws ExecException if the index value is bigger then 0x7F]]>
      </doc>
    </method>
    <method name="isDistinct" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setDistinct"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="isDistinct" type="boolean"/>
    </method>
    <method name="attachInput"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <doc>
      <![CDATA[Overridden since the attachment of the new input should cause the old
 processing to end.]]>
      </doc>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Calls getNext on the generate operator inside the nested
 physical plan. Converts the generated tuple into the proper
 format, i.e, (key,indexedTuple(value))]]>
      </doc>
    </method>
    <method name="constructLROutput" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="resLst" type="java.util.List"/>
      <param name="value" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getKeyType" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setKeyType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="keyType" type="byte"/>
    </method>
    <method name="getPlans" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setPlans"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="plans" type="java.util.List"/>
      <exception name="PlanException" type="org.apache.pig.impl.plan.PlanException"/>
    </method>
    <method name="clone" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
      <doc>
      <![CDATA[Make a deep copy of this operator.  
 @throws CloneNotSupportedException]]>
      </doc>
    </method>
    <method name="isCross" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setCross"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="isCross" type="boolean"/>
    </method>
    <method name="getProjectedColsMap" return="java.util.Map"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the mProjectedColsMap]]>
      </doc>
    </method>
    <method name="isProjectStar" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the mProjectStar]]>
      </doc>
    </method>
    <method name="isKeyTuple" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the keyTuple]]>
      </doc>
    </method>
    <method name="setPlansFromCombiner"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="plans" type="java.util.List"/>
      <exception name="PlanException" type="org.apache.pig.impl.plan.PlanException"/>
      <doc>
      <![CDATA[@param plans
 @throws ExecException]]>
      </doc>
    </method>
    <field name="serialVersionUID" type="long"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="mTupleFactory" type="org.apache.pig.data.TupleFactory"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="plans" type="java.util.List"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="leafOps" type="java.util.List"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="index" type="byte"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="keyType" type="byte"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="mIsDistinct" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="isCross" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="mFakeTuple" type="org.apache.pig.data.Tuple"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[The local rearrange operator is a part of the co-group
 implementation. It has an embedded physical plan that
 generates tuples of the form (grpKey,(indxed inp Tuple)).]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrangeForIllustrate -->
  <class name="POLocalRearrangeForIllustrate" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="POLocalRearrangeForIllustrate" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POLocalRearrangeForIllustrate" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POLocalRearrangeForIllustrate" type="org.apache.pig.impl.plan.OperatorKey, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POLocalRearrangeForIllustrate" type="org.apache.pig.impl.plan.OperatorKey, int, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="constructLROutput" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="resLst" type="java.util.List"/>
      <param name="value" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="clone" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrangeForIllustrate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
      <doc>
      <![CDATA[Make a deep copy of this operator.  
 @throws CloneNotSupportedException]]>
      </doc>
    </method>
    <doc>
    <![CDATA[The local rearrange operator is a part of the co-group
 implementation. It has an embedded physical plan that
 generates tuples of the form (grpKey,(indxed inp Tuple)).]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrangeForIllustrate -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMultiQueryPackage -->
  <class name="POMultiQueryPackage" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="POMultiQueryPackage" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs an operator with the specified key.
 
 @param k the operator key]]>
      </doc>
    </constructor>
    <constructor name="POMultiQueryPackage" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs an operator with the specified key
 and degree of parallelism.
  
 @param k the operator key
 @param rp the degree of parallelism requested]]>
      </doc>
    </constructor>
    <constructor name="POMultiQueryPackage" type="org.apache.pig.impl.plan.OperatorKey, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs an operator with the specified key and inputs.
  
 @param k the operator key
 @param inp the inputs that this operator will read data from]]>
      </doc>
    </constructor>
    <constructor name="POMultiQueryPackage" type="org.apache.pig.impl.plan.OperatorKey, int, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs an operator with the specified key,
 degree of parallelism and inputs.
 
 @param k the operator key
 @param rp the degree of parallelism requested 
 @param inp the inputs that this operator will read data from]]>
      </doc>
    </constructor>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="supportsMultipleOutputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="attachInput"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="k" type="org.apache.pig.impl.io.PigNullableWritable"/>
      <param name="inp" type="java.util.Iterator"/>
    </method>
    <method name="detachInput"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="addPackage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pack" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage"/>
      <doc>
      <![CDATA[Appends the specified package object to the end of 
 the package list.
 
 @param pack package to be appended to the list]]>
      </doc>
    </method>
    <method name="getPackages" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the list of packages.
  
 @return the list of the packages]]>
      </doc>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Constructs the output tuple from the inputs.
 <p> 
 The output is consumed by for the demultiplexer operator 
 (PODemux) in the format (key, {bag of tuples}) where key 
 is an indexed WritableComparable, not the wrapped value as a pig type.]]>
      </doc>
    </method>
    <method name="setBaseIndex"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="baseIndex" type="int"/>
      <doc>
      <![CDATA[Sets the base index of this operator
 
 @param baseIndex the base index of this operator]]>
      </doc>
    </method>
    <method name="getBaseIndex" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the base index of this operator
 
 @return the base index of this operator]]>
      </doc>
    </method>
    <doc>
    <![CDATA[The package operator that packages the globally rearranged tuples 
 into output format as required by multi-query de-multiplexer.
 <p>
 This operator is used when merging multiple Map-Reduce splittees
 into a Map-only splitter during multi-query optimization. 
 The package operators of the reduce plans of the splittees form an
 indexed package list inside this operator. When this operator 
 receives an input, it extracts the index from the key and calls the 
 corresponding package to get the output data.
 <p>
 Due to the recursive nature of multi-query optimization, this operator
 may be contained in another multi-query packager.
 <p>
 The successor of this operator must be a PODemux operator which 
 knows how to consume the output of this operator.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMultiQueryPackage -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POOptimizedForEach -->
  <class name="POOptimizedForEach" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="POOptimizedForEach" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POOptimizedForEach" type="org.apache.pig.impl.plan.OperatorKey, int, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POOptimizedForEach" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POOptimizedForEach" type="org.apache.pig.impl.plan.OperatorKey, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POOptimizedForEach" type="org.apache.pig.impl.plan.OperatorKey, int, java.util.List, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Calls getNext on the generate operator inside the nested
 physical plan and returns it maintaining an additional state
 to denote the begin and end of the nested plan processing.]]>
      </doc>
    </method>
    <method name="clone" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POOptimizedForEach"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
      <doc>
      <![CDATA[Make a deep copy of this operator.  
 @throws CloneNotSupportedException]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A specialized version of POForeach with the difference
 that in getNext(), it knows that "input" has already been
 attached by its input operator which SHOULD be POJoinPackage]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POOptimizedForEach -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage -->
  <class name="POPackage" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="POPackage" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POPackage" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POPackage" type="org.apache.pig.impl.plan.OperatorKey, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POPackage" type="org.apache.pig.impl.plan.OperatorKey, int, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="supportsMultipleOutputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="attachInput"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="k" type="org.apache.pig.impl.io.PigNullableWritable"/>
      <param name="inp" type="java.util.Iterator"/>
      <doc>
      <![CDATA[Attaches the required inputs
 @param k - the key being worked on
 @param inp - iterator of indexed tuples typically
              obtained from Hadoop]]>
      </doc>
    </method>
    <method name="detachInput"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[attachInput's better half!]]>
      </doc>
    </method>
    <method name="getNumInps" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setNumInps"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="numInps" type="int"/>
    </method>
    <method name="getInner" return="boolean[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setInner"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="inner" type="boolean[]"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[From the inputs, constructs the output tuple
 for this co-group in the required format which
 is (key, {bag of tuples from input 1}, {bag of tuples from input 2}, ...)]]>
      </doc>
    </method>
    <method name="getValueTuple" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="ntup" type="org.apache.pig.impl.io.NullableTuple"/>
      <param name="index" type="int"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getKeyType" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setKeyType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="keyType" type="byte"/>
    </method>
    <method name="clone" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
      <doc>
      <![CDATA[Make a deep copy of this operator.  
 @throws CloneNotSupportedException]]>
      </doc>
    </method>
    <method name="setKeyInfo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="keyInfo" type="java.util.Map"/>
      <doc>
      <![CDATA[@param keyInfo the keyInfo to set]]>
      </doc>
    </method>
    <method name="setKeyTuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="keyTuple" type="boolean"/>
      <doc>
      <![CDATA[@param keyTuple the keyTuple to set]]>
      </doc>
    </method>
    <method name="getKeyInfo" return="java.util.Map"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the keyInfo]]>
      </doc>
    </method>
    <method name="isDistinct" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the distinct]]>
      </doc>
    </method>
    <method name="setDistinct"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="distinct" type="boolean"/>
      <doc>
      <![CDATA[@param distinct the distinct to set]]>
      </doc>
    </method>
    <field name="isKeyTuple" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="keyAsTuple" type="org.apache.pig.data.Tuple"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="distinct" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="keyInfo" type="java.util.Map"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="mBagFactory" type="org.apache.pig.data.BagFactory"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="mTupleFactory" type="org.apache.pig.data.TupleFactory"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[The package operator that packages
 the globally rearranged tuples into
 output format as required by co-group.
 This is last stage of processing co-group.
 This operator has a slightly different
 format than other operators in that, it
 takes two things as input. The key being 
 worked on and the iterator of bags that
 contain indexed tuples that just need to
 be packaged into their appropriate output
 bags based on the index.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackageLite -->
  <class name="POPackageLite" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="POPackageLite" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POPackageLite" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POPackageLite" type="org.apache.pig.impl.plan.OperatorKey, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POPackageLite" type="org.apache.pig.impl.plan.OperatorKey, int, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setNumInps"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="numInps" type="int"/>
    </method>
    <method name="getInner" return="boolean[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setInner"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="inner" type="boolean[]"/>
    </method>
    <method name="clone" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackageLite"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
      <doc>
      <![CDATA[Make a deep copy of this operator.  
 @throws CloneNotSupportedException]]>
      </doc>
    </method>
    <method name="isDistinct" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the distinct]]>
      </doc>
    </method>
    <method name="setDistinct"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="distinct" type="boolean"/>
      <doc>
      <![CDATA[@param distinct the distinct to set]]>
      </doc>
    </method>
    <method name="getKeyTuple" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the isKeyTuple]]>
      </doc>
    </method>
    <method name="getKeyAsTuple" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the keyAsTuple]]>
      </doc>
    </method>
    <method name="getTupIter" return="java.util.Iterator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the tupIter]]>
      </doc>
    </method>
    <method name="getKey" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the key]]>
      </doc>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Similar to POPackage.getNext except that
 only one input is expected with index 0 
 and ReadOnceBag is used instead of 
 DefaultDataBag.]]>
      </doc>
    </method>
    <method name="getValueTuple" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ntup" type="org.apache.pig.impl.io.NullableTuple"/>
      <param name="index" type="int"/>
      <param name="key" type="java.lang.Object"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Makes use of the superclass method, but this requires 
 an additional parameter key passed by ReadOnceBag.
 key of this instance will be set to null in detachInput 
 call, but an instance of ReadOnceBag may have the original 
 key that it uses. Therefore this extra argument is taken
 to temporarily set it before the call to the superclass method 
 and then restore it.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This package operator is a specialization
 of POPackage operator used for the specific
 case of the order by query. See JIRA 802 
 for more details.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackageLite -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPreCombinerLocalRearrange -->
  <class name="POPreCombinerLocalRearrange" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="POPreCombinerLocalRearrange" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POPreCombinerLocalRearrange" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POPreCombinerLocalRearrange" type="org.apache.pig.impl.plan.OperatorKey, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POPreCombinerLocalRearrange" type="org.apache.pig.impl.plan.OperatorKey, int, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleOutputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="attachInput"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <doc>
      <![CDATA[Overridden since the attachment of the new input should cause the old
 processing to end.]]>
      </doc>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Calls getNext on the generate operator inside the nested
 physical plan. Converts the generated tuple into the proper
 format, i.e, (key,indexedTuple(value))]]>
      </doc>
    </method>
    <method name="constructLROutput" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="resLst" type="java.util.List"/>
      <param name="value" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getKeyType" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setKeyType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="keyType" type="byte"/>
    </method>
    <method name="getPlans" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setPlans"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="plans" type="java.util.List"/>
    </method>
    <field name="serialVersionUID" type="long"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="mTupleFactory" type="org.apache.pig.data.TupleFactory"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="mBagFactory" type="org.apache.pig.data.BagFactory"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="plans" type="java.util.List"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="leafOps" type="java.util.List"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="keyType" type="byte"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[A specialized local rearrange operator which behaves
 like the regular local rearrange in the getNext() 
 as far as getting its input and constructing the 
 "key" out of the input. It then returns a tuple with
 two fields - the key in the first position and the
 "value" inside a bag in the second position. This output
 format resembles the format out of a Package. This output
 will feed to a foreach which expects this format.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPreCombinerLocalRearrange -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PORead -->
  <class name="PORead" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PORead" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="PORead" type="org.apache.pig.impl.plan.OperatorKey, int, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="PORead" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="PORead" type="org.apache.pig.impl.plan.OperatorKey, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="PORead" type="org.apache.pig.impl.plan.OperatorKey, org.apache.pig.data.DataBag"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleOutputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <doc>
    <![CDATA[This operator is used to read tuples from a databag in memory. Used mostly
 for testing. It'd also be useful for the example generator]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PORead -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort -->
  <class name="POSort" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="POSort" type="org.apache.pig.impl.plan.OperatorKey, int, java.util.List, java.util.List, java.util.List, org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserComparisonFunc"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POSort" type="org.apache.pig.impl.plan.OperatorKey, int, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POSort" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POSort" type="org.apache.pig.impl.plan.OperatorKey, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POSort" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isBlocking" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleOutputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="reset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSortPlans" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setSortPlans"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sortPlans" type="java.util.List"/>
    </method>
    <method name="getMSortFunc" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserComparisonFunc"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setMSortFunc"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sortFunc" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserComparisonFunc"/>
    </method>
    <method name="getMAscCols" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setLimit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="l" type="long"/>
    </method>
    <method name="getLimit" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isLimited" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="clone" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
    </method>
    <field name="isUDFComparatorUsed" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[This implementation is applicable for both the physical plan and for the
 local backend, as the conversion of physical to mapreduce would see the SORT
 operator and take necessary steps to convert it to a quantile and a sort job.
 
 This is a blocking operator. The sortedDataBag accumulates Tuples and sorts
 them only when there an iterator is started. So all the tuples from the input
 operator should be accumulated and filled into the dataBag. The attachInput
 method is not applicable here.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort.SortComparator -->
  <class name="POSort.SortComparator" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.util.Comparator"/>
    <implements name="java.io.Serializable"/>
    <constructor name="POSort.SortComparator"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="compare" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o1" type="org.apache.pig.data.Tuple"/>
      <param name="o2" type="org.apache.pig.data.Tuple"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort.SortComparator -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort.UDFSortComparator -->
  <class name="POSort.UDFSortComparator" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.util.Comparator"/>
    <implements name="java.io.Serializable"/>
    <constructor name="POSort.UDFSortComparator"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="compare" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t1" type="org.apache.pig.data.Tuple"/>
      <param name="t2" type="org.apache.pig.data.Tuple"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort.UDFSortComparator -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSplit -->
  <class name="POSplit" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="POSplit" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs an operator with the specified key
 @param k the operator key]]>
      </doc>
    </constructor>
    <constructor name="POSplit" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs an operator with the specified key
 and degree of parallelism 
 @param k the operator key
 @param rp the degree of parallelism requested]]>
      </doc>
    </constructor>
    <constructor name="POSplit" type="org.apache.pig.impl.plan.OperatorKey, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs an operator with the specified key and inputs 
 @param k the operator key
 @param inp the inputs that this operator will read data from]]>
      </doc>
    </constructor>
    <constructor name="POSplit" type="org.apache.pig.impl.plan.OperatorKey, int, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs an operator with the specified key,
 degree of parallelism and inputs
 @param k the operator key
 @param rp the degree of parallelism requested 
 @param inp the inputs that this operator will read data from]]>
      </doc>
    </constructor>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleOutputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSplitStore" return="org.apache.pig.impl.io.FileSpec"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the name of the file associated with this operator
 @return the FileSpec associated with this operator]]>
      </doc>
    </method>
    <method name="setSplitStore"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="splitStore" type="org.apache.pig.impl.io.FileSpec"/>
      <doc>
      <![CDATA[Sets the name of the file associated with this operator
 @param splitStore the FileSpec used to store the data]]>
      </doc>
    </method>
    <method name="getPlans" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the list of nested plans. 
 @return the list of the nested plans
 @see org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PlanPrinter]]>
      </doc>
    </method>
    <method name="addPlan"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="inPlan" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"/>
      <doc>
      <![CDATA[Appends the specified plan to the end of 
 the nested input plan list
 @param inPlan plan to be appended to the list]]>
      </doc>
    </method>
    <method name="removePlan"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="plan" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"/>
      <doc>
      <![CDATA[Removes plan from
 the nested input plan list
 @param plan plan to be removed]]>
      </doc>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <doc>
    <![CDATA[The MapReduce Split operator.
 <p>
 The assumption here is that
 the logical to physical translation
 will create this dummy operator with
 just the filename using which the input
 branch will be stored and used for loading
 Also the translation should make sure that
 appropriate filter operators are configured
 as outputs of this operator using the conditions
 specified in the LOSplit. So LOSplit will be converted
 into:
 
     |        |           |
  Filter1  Filter2 ... Filter3
     |        |    ...    |
     |        |    ...    |
     ---- POSplit -... ----
 This is different than the existing implementation
 where the POSplit writes to sidefiles after filtering
 and then loads the appropriate file.
 <p>
 The approach followed here is as good as the old
 approach if not better in many cases because
 of the availability of attachinInputs. An optimization
 that can ensue is if there are multiple loads that
 load the same file, they can be merged into one and 
 then the operators that take input from the load 
 can be stored. This can be used when
 the mapPlan executes to read the file only once and
 attach the resulting tuple as inputs to all the 
 operators that take input from this load.
 
 In some cases where the conditions are exclusive and
 some outputs are ignored, this approach can be worse.
 But this leads to easier management of the Split and
 also allows to reuse this data stored from the split
 job whenever necessary.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSplit -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore -->
  <class name="POStore" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="POStore" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POStore" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POStore" type="org.apache.pig.impl.plan.OperatorKey, int, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setUp"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Set up the storer
 @throws IOException]]>
      </doc>
    </method>
    <method name="tearDown"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Called at the end of processing for clean up.
 @throws IOException]]>
      </doc>
    </method>
    <method name="cleanUp"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[To perform cleanup when there is an error.
 @throws IOException]]>
      </doc>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleOutputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="getSFile" return="org.apache.pig.impl.io.FileSpec"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setSFile"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sFile" type="org.apache.pig.impl.io.FileSpec"/>
    </method>
    <method name="setInputSpec"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="lFile" type="org.apache.pig.impl.io.FileSpec"/>
    </method>
    <method name="getInputSpec" return="org.apache.pig.impl.io.FileSpec"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setIsTmpStore"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tmp" type="boolean"/>
    </method>
    <method name="isTmpStore" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setStoreImpl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="impl" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStoreImpl"/>
    </method>
    <method name="setSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="schema" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
    </method>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[The store operator which is used in two ways:
 1) As a local operator it can be used to store files
 2) In the Map Reduce setting, it is used to create jobs
    from MapReduce operators which keep the loads and
    stores in the Map and Reduce Plans till the job is created]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStoreImpl -->
  <class name="POStoreImpl" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="POStoreImpl"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="createStoreFunc" return="org.apache.pig.StoreFunc"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sFile" type="org.apache.pig.impl.io.FileSpec"/>
      <param name="schema" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Set up the storer 
 @param sFile - The file the store should write to
 @throws IOException]]>
      </doc>
    </method>
    <method name="tearDown"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[At the end of processing, the outputstream is closed
 using this method
 @throws IOException]]>
      </doc>
    </method>
    <method name="cleanUp"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[To perform cleanup when there is an error.
 Uses the FileLocalizer method which only 
 deletes the file but not the dirs created
 with it.
 @throws IOException]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This class is used to specify the actual behavior of the store
 operator just when ready to start execution.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStoreImpl -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStream -->
  <class name="POStream" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="POStream" type="org.apache.pig.impl.plan.OperatorKey, org.apache.pig.impl.streaming.ExecutableManager, org.apache.pig.impl.streaming.StreamingCommand, java.util.Properties"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getShipCacheProperties" return="java.util.Properties"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getCommand" return="org.apache.pig.impl.streaming.StreamingCommand"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the {@link StreamingCommand} for this <code>StreamSpec</code>.
 @return the {@link StreamingCommand} for this <code>StreamSpec</code>]]>
      </doc>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getNextHelper" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleOutputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="finish"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getBinaryInputQueue" return="java.util.concurrent.BlockingQueue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the Queue which has input to binary]]>
      </doc>
    </method>
    <method name="getBinaryOutputQueue" return="java.util.concurrent.BlockingQueue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the Queue which has output from binary]]>
      </doc>
    </method>
    <field name="initialized" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="binaryOutputQueue" type="java.util.concurrent.BlockingQueue"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="binaryInputQueue" type="java.util.concurrent.BlockingQueue"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="allInputFromPredecessorConsumed" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="allOutputFromBinaryProcessed" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStream -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POUnion -->
  <class name="POUnion" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="POUnion" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POUnion" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POUnion" type="org.apache.pig.impl.plan.OperatorKey, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POUnion" type="org.apache.pig.impl.plan.OperatorKey, int, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setInputs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="inputs" type="java.util.List"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleOutputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="clearDone"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[The code below, tries to follow our single threaded 
 shared execution model with execution being passed
 around each non-drained input]]>
      </doc>
    </method>
    <doc>
    <![CDATA[The union operator that combines the two inputs into a single
 stream. Note that this doesn't eliminate duplicate tuples.
 The Operator will also be added to every map plan which processes
 more than one input. This just pulls out data from the piepline
 using the proposed single threaded shared execution model. By shared
 execution I mean, one input to the Union operator is called
 once and the execution moves to the next non-drained input till
 all the inputs are drained.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POUnion -->
</package>
<package name="org.apache.pig.backend.hadoop.executionengine.physicalLayer.util">
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.operatorHelper -->
  <class name="operatorHelper" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="operatorHelper"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="numTypes" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="genAllTypes" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="genTypeToNameMap" return="java.util.Map"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.operatorHelper -->
  <!-- start class org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper -->
  <class name="PlanHelper" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getStores" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="plan" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[Get all the store operators in the plan in the right dependency order
 @param plan
 @return List of stores (could be empty)]]>
      </doc>
    </method>
    <method name="getLoads" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="plan" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[Get all the load operators in the plan in the right dependency order
 @param plan
 @return List of loads (could be empty)]]>
      </doc>
    </method>
    <method name="makeStoreTmpPath" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="orig" type="java.lang.String"/>
      <doc>
      <![CDATA[Creates a relative path that can be used to build a temporary
 place to store the output from a number of map-reduce tasks.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Utility class with a few helper functions to deal with physical plans.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper -->
</package>
<package name="org.apache.pig.backend.hadoop.executionengine.util">
  <!-- start class org.apache.pig.backend.hadoop.executionengine.util.MapRedUtil -->
  <class name="MapRedUtil" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MapRedUtil"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getStoreFunc" return="org.apache.pig.StoreFunc"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="conf" type="org.apache.hadoop.mapred.JobConf"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[This method is to be called from an 
 {@link org.apache.hadoop.mapred.OutputFormat#getRecordWriter(FileSystem ignored, JobConf job,
                                     String name, Progressable progress)}
 method to obtain a reference to the {@link org.apache.pig.StoreFunc} object to be used by
 that OutputFormat to perform the write() operation
 @param conf the JobConf object
 @return the StoreFunc reference
 @throws ExecException]]>
      </doc>
    </method>
    <method name="getStoreConfig" return="org.apache.pig.StoreConfig"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="conf" type="org.apache.hadoop.mapred.JobConf"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[This method is to be called from an 
 {@link org.apache.hadoop.mapred.OutputFormat#getRecordWriter(FileSystem ignored, JobConf job,
                                     String name, Progressable progress)}
 method to obtain a reference to the {@link org.apache.pig.StoreConfig} object. The StoreConfig
 object will contain metadata information like schema and location to be used by
 that OutputFormat to perform the write() operation
 @param conf the JobConf object
 @return StoreConfig object containing metadata information useful for
 an OutputFormat to write the data
 @throws IOException]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A class of utility static methods to be used in the hadoop map reduce backend]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.executionengine.util.MapRedUtil -->
</package>
<package name="org.apache.pig.backend.hadoop.hbase">
  <!-- start class org.apache.pig.backend.hadoop.hbase.HBaseSlice -->
  <class name="HBaseSlice" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.Slice"/>
    <constructor name="HBaseSlice" type="byte[], byte[], byte[], byte[][], java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor
 
 @param tableName
            table name
 @param startRow
            start now, inclusive
 @param endRow
            end row, exclusive
 @param inputColumns
            input columns
 @param location
            region location]]>
      </doc>
    </constructor>
    <method name="getTableName" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return table name]]>
      </doc>
    </method>
    <method name="getStartRow" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return starting row key]]>
      </doc>
    </method>
    <method name="getEndRow" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return end row key]]>
      </doc>
    </method>
    <method name="getInputColumns" return="byte[][]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return input columns]]>
      </doc>
    </method>
    <method name="getRegionLocation" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the region's hostname]]>
      </doc>
    </method>
    <method name="getStart" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLength" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLocations" return="java.lang.String[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getPos" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getProgress" return="float"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="init"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="store" type="org.apache.pig.backend.datastorage.DataStorage"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="next" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[HBase Slice to load a portion of range of a table. The key range will be
 [start, end) Modeled from org.apache.hadoop.hbase.mapred.TableSplit.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.hbase.HBaseSlice -->
  <!-- start class org.apache.pig.backend.hadoop.hbase.HBaseStorage -->
  <class name="HBaseStorage" extends="org.apache.pig.builtin.Utf8StorageConverter"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.Slicer"/>
    <implements name="org.apache.pig.LoadFunc"/>
    <constructor name="HBaseStorage" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor. Construct a HBase Table loader to load the cells of the
 provided columns.
 
 @param columnList
            columnlist that is a presented string delimited by space.]]>
      </doc>
    </constructor>
    <method name="slice" return="org.apache.pig.Slice[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="store" type="org.apache.pig.backend.datastorage.DataStorage"/>
      <param name="tablename" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="validate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="store" type="org.apache.pig.backend.datastorage.DataStorage"/>
      <param name="tablename" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="bindTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <param name="is" type="org.apache.pig.impl.io.BufferedPositionedInputStream"/>
      <param name="offset" type="long"/>
      <param name="end" type="long"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="determineSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <param name="execType" type="org.apache.pig.ExecType"/>
      <param name="storage" type="org.apache.pig.backend.datastorage.DataStorage"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="fieldsToRead"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="schema" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
    </method>
    <method name="getNext" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[A <code>Slicer</code> that split the hbase table into {@link HBaseSlice}s.
 And a load function will provided to do none load operations, the actually
 load operatrions will be done in {@link HBaseSlice}.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.hbase.HBaseStorage -->
</package>
<package name="org.apache.pig.backend.hadoop.streaming">
  <!-- start class org.apache.pig.backend.hadoop.streaming.HadoopExecutableManager -->
  <class name="HadoopExecutableManager" extends="org.apache.pig.impl.streaming.ExecutableManager"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="HadoopExecutableManager"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="configure"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stream" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="exec"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="processError"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="error" type="java.lang.String"/>
    </method>
    <doc>
    <![CDATA[{@link HadoopExecutableManager} is a specialization of 
 {@link ExecutableManager} and provides HDFS-specific support for secondary
 outputs, task-logs etc.
 
 <code>HadoopExecutableManager</code> provides support for  secondary outputs
 of the managed process and also persists the logs of the tasks on HDFS.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.hadoop.streaming.HadoopExecutableManager -->
</package>
<package name="org.apache.pig.backend.local.datastorage">
  <!-- start class org.apache.pig.backend.local.datastorage.LocalDataStorage -->
  <class name="LocalDataStorage" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.backend.datastorage.DataStorage"/>
    <constructor name="LocalDataStorage"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="init"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getConfiguration" return="java.util.Properties"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="updateConfiguration"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="newConfiguration" type="java.util.Properties"/>
      <exception name="DataStorageException" type="org.apache.pig.backend.datastorage.DataStorageException"/>
    </method>
    <method name="getStatistics" return="java.util.Map"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="asElement" return="org.apache.pig.backend.local.datastorage.LocalPath"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <exception name="DataStorageException" type="org.apache.pig.backend.datastorage.DataStorageException"/>
    </method>
    <method name="asElement" return="org.apache.pig.backend.local.datastorage.LocalPath"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="element" type="org.apache.pig.backend.datastorage.ElementDescriptor"/>
      <exception name="DataStorageException" type="org.apache.pig.backend.datastorage.DataStorageException"/>
    </method>
    <method name="asElement" return="org.apache.pig.backend.local.datastorage.LocalPath"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parent" type="java.lang.String"/>
      <param name="child" type="java.lang.String"/>
      <exception name="DataStorageException" type="org.apache.pig.backend.datastorage.DataStorageException"/>
    </method>
    <method name="asElement" return="org.apache.pig.backend.local.datastorage.LocalPath"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parent" type="org.apache.pig.backend.datastorage.ContainerDescriptor"/>
      <param name="child" type="java.lang.String"/>
      <exception name="DataStorageException" type="org.apache.pig.backend.datastorage.DataStorageException"/>
    </method>
    <method name="asElement" return="org.apache.pig.backend.local.datastorage.LocalPath"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parent" type="org.apache.pig.backend.datastorage.ContainerDescriptor"/>
      <param name="child" type="org.apache.pig.backend.datastorage.ElementDescriptor"/>
      <exception name="DataStorageException" type="org.apache.pig.backend.datastorage.DataStorageException"/>
    </method>
    <method name="asContainer" return="org.apache.pig.backend.local.datastorage.LocalDir"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <exception name="DataStorageException" type="org.apache.pig.backend.datastorage.DataStorageException"/>
    </method>
    <method name="asContainer" return="org.apache.pig.backend.local.datastorage.LocalDir"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="container" type="org.apache.pig.backend.datastorage.ContainerDescriptor"/>
      <exception name="DataStorageException" type="org.apache.pig.backend.datastorage.DataStorageException"/>
    </method>
    <method name="asContainer" return="org.apache.pig.backend.local.datastorage.LocalDir"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parent" type="java.lang.String"/>
      <param name="child" type="java.lang.String"/>
      <exception name="DataStorageException" type="org.apache.pig.backend.datastorage.DataStorageException"/>
    </method>
    <method name="asContainer" return="org.apache.pig.backend.local.datastorage.LocalDir"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parent" type="org.apache.pig.backend.datastorage.ContainerDescriptor"/>
      <param name="child" type="java.lang.String"/>
      <exception name="DataStorageException" type="org.apache.pig.backend.datastorage.DataStorageException"/>
    </method>
    <method name="asContainer" return="org.apache.pig.backend.local.datastorage.LocalDir"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parent" type="org.apache.pig.backend.datastorage.ContainerDescriptor"/>
      <param name="child" type="org.apache.pig.backend.datastorage.ContainerDescriptor"/>
      <exception name="DataStorageException" type="org.apache.pig.backend.datastorage.DataStorageException"/>
    </method>
    <method name="isContainer" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <exception name="DataStorageException" type="org.apache.pig.backend.datastorage.DataStorageException"/>
    </method>
    <method name="setActiveContainer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="container" type="org.apache.pig.backend.datastorage.ContainerDescriptor"/>
    </method>
    <method name="getActiveContainer" return="org.apache.pig.backend.datastorage.ContainerDescriptor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="asCollection" return="org.apache.pig.backend.local.datastorage.LocalPath[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pattern" type="java.lang.String"/>
      <exception name="DataStorageException" type="org.apache.pig.backend.datastorage.DataStorageException"/>
    </method>
    <method name="getWorkingDir" return="java.io.File"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="workingDir" type="java.io.File"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.backend.local.datastorage.LocalDataStorage -->
  <!-- start class org.apache.pig.backend.local.datastorage.LocalDir -->
  <class name="LocalDir" extends="org.apache.pig.backend.local.datastorage.LocalPath"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.backend.datastorage.ContainerDescriptor"/>
    <constructor name="LocalDir" type="org.apache.pig.backend.local.datastorage.LocalDataStorage, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="LocalDir" type="org.apache.pig.backend.local.datastorage.LocalDataStorage, java.io.File"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="LocalDir" type="org.apache.pig.backend.local.datastorage.LocalDataStorage, java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="LocalDir" type="org.apache.pig.backend.local.datastorage.LocalDataStorage, java.io.File, java.io.File"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="LocalDir" type="org.apache.pig.backend.local.datastorage.LocalDataStorage, java.io.File, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="LocalDir" type="org.apache.pig.backend.local.datastorage.LocalDataStorage, java.lang.String, java.io.File"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="create" return="java.io.OutputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="configuration" type="java.util.Properties"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="copy"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dstName" type="org.apache.pig.backend.datastorage.ElementDescriptor"/>
      <param name="dstConfiguration" type="java.util.Properties"/>
      <param name="removeSrc" type="boolean"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="copy"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dstName" type="org.apache.pig.backend.datastorage.ContainerDescriptor"/>
      <param name="dstConfiguration" type="java.util.Properties"/>
      <param name="removeSrc" type="boolean"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="open" return="java.io.InputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="configuration" type="java.util.Properties"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="open" return="java.io.InputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="sopen" return="org.apache.pig.backend.datastorage.SeekableInputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="configuration" type="java.util.Properties"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="sopen" return="org.apache.pig.backend.datastorage.SeekableInputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="iterator" return="java.util.Iterator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.backend.local.datastorage.LocalDir -->
  <!-- start class org.apache.pig.backend.local.datastorage.LocalFile -->
  <class name="LocalFile" extends="org.apache.pig.backend.local.datastorage.LocalPath"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LocalFile" type="org.apache.pig.backend.local.datastorage.LocalDataStorage, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="LocalFile" type="org.apache.pig.backend.local.datastorage.LocalDataStorage, java.io.File"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="LocalFile" type="org.apache.pig.backend.local.datastorage.LocalDataStorage, java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="LocalFile" type="org.apache.pig.backend.local.datastorage.LocalDataStorage, java.io.File, java.io.File"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="LocalFile" type="org.apache.pig.backend.local.datastorage.LocalDataStorage, java.io.File, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="LocalFile" type="org.apache.pig.backend.local.datastorage.LocalDataStorage, java.lang.String, java.io.File"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="create" return="java.io.OutputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="configuration" type="java.util.Properties"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="copy"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dstName" type="org.apache.pig.backend.datastorage.ElementDescriptor"/>
      <param name="dstConfiguration" type="java.util.Properties"/>
      <param name="removeSrc" type="boolean"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="open" return="java.io.InputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="configuration" type="java.util.Properties"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="open" return="java.io.InputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="sopen" return="org.apache.pig.backend.datastorage.SeekableInputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="configuration" type="java.util.Properties"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="sopen" return="org.apache.pig.backend.datastorage.SeekableInputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.local.datastorage.LocalFile -->
  <!-- start class org.apache.pig.backend.local.datastorage.LocalPath -->
  <class name="LocalPath" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.backend.datastorage.ElementDescriptor"/>
    <constructor name="LocalPath" type="org.apache.pig.backend.local.datastorage.LocalDataStorage, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="LocalPath" type="org.apache.pig.backend.local.datastorage.LocalDataStorage, java.io.File"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="LocalPath" type="org.apache.pig.backend.local.datastorage.LocalDataStorage, java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="LocalPath" type="org.apache.pig.backend.local.datastorage.LocalDataStorage, java.io.File, java.io.File"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="LocalPath" type="org.apache.pig.backend.local.datastorage.LocalDataStorage, java.io.File, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="LocalPath" type="org.apache.pig.backend.local.datastorage.LocalDataStorage, java.lang.String, java.io.File"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getCurPath" return="java.io.File"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
    <method name="getDataStorage" return="org.apache.pig.backend.datastorage.DataStorage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getPath" return="java.io.File"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="create" return="java.io.OutputStream"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="configuration" type="java.util.Properties"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="create" return="java.io.OutputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="copy"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dstName" type="org.apache.pig.backend.datastorage.ElementDescriptor"/>
      <param name="dstConfiguration" type="java.util.Properties"/>
      <param name="removeSrc" type="boolean"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="copy"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dstName" type="org.apache.pig.backend.datastorage.ElementDescriptor"/>
      <param name="removeSrc" type="boolean"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="open" return="java.io.InputStream"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="sopen" return="org.apache.pig.backend.datastorage.SeekableInputStream"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="exists" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="rename"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="newName" type="org.apache.pig.backend.datastorage.ElementDescriptor"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="delete"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getConfiguration" return="java.util.Properties"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="updateConfiguration"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="newConfig" type="java.util.Properties"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getStatistics" return="java.util.Map"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="compareTo" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="other" type="org.apache.pig.backend.datastorage.ElementDescriptor"/>
    </method>
    <method name="systemElement" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="fs" type="org.apache.pig.backend.datastorage.DataStorage"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="path" type="java.io.File"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.backend.local.datastorage.LocalPath -->
  <!-- start class org.apache.pig.backend.local.datastorage.LocalSeekableInputStream -->
  <class name="LocalSeekableInputStream" extends="org.apache.pig.backend.datastorage.SeekableInputStream"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LocalSeekableInputStream" type="java.io.File"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FileNotFoundException" type="java.io.FileNotFoundException"/>
    </constructor>
    <method name="seek"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="offset" type="long"/>
      <param name="whence" type="org.apache.pig.backend.datastorage.SeekableInputStream.FLAGS"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="tell" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="read" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="read" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="read" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
      <param name="off" type="int"/>
      <param name="len" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="available" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="skip" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="long"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="mark"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="readlimit" type="int"/>
    </method>
    <method name="reset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="markSupported" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="file" type="java.io.RandomAccessFile"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="curMark" type="long"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.backend.local.datastorage.LocalSeekableInputStream -->
</package>
<package name="org.apache.pig.backend.local.executionengine">
  <!-- start class org.apache.pig.backend.local.executionengine.LocalExecutionEngine -->
  <class name="LocalExecutionEngine" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.backend.executionengine.ExecutionEngine"/>
    <constructor name="LocalExecutionEngine" type="org.apache.pig.impl.PigContext"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getDataStorage" return="org.apache.pig.backend.datastorage.DataStorage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="init"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getConfiguration" return="java.util.Properties"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="updateConfiguration"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="newConfiguration" type="java.util.Properties"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getStatistics" return="java.util.Map"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="compile" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="plan" type="org.apache.pig.impl.logicalLayer.LogicalPlan"/>
      <param name="properties" type="java.util.Properties"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="execute" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="plan" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"/>
      <param name="jobName" type="java.lang.String"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="submit" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="plan" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"/>
      <param name="jobName" type="java.lang.String"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="explain"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="plan" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"/>
      <param name="stream" type="java.io.PrintStream"/>
      <param name="format" type="java.lang.String"/>
      <param name="isVerbose" type="boolean"/>
    </method>
    <method name="runningJobs" return="java.util.Collection"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="properties" type="java.util.Properties"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="activeScopes" return="java.util.Collection"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="reclaimScope"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="scope" type="java.lang.String"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <field name="pigContext" type="org.apache.pig.impl.PigContext"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="ds" type="org.apache.pig.backend.datastorage.DataStorage"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="nodeIdGenerator" type="org.apache.pig.impl.plan.NodeIdGenerator"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="logicalToPhysicalKeys" type="java.util.Map"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="physicalOpTable" type="java.util.Map"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="materializedResults" type="java.util.Map"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.backend.local.executionengine.LocalExecutionEngine -->
  <!-- start class org.apache.pig.backend.local.executionengine.LocalJob -->
  <class name="LocalJob" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.backend.executionengine.ExecJob"/>
    <constructor name="LocalJob" type="org.apache.pig.backend.executionengine.ExecJob.JOB_STATUS, org.apache.pig.impl.PigContext, org.apache.pig.impl.io.FileSpec"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="LocalJob" type="org.apache.pig.backend.executionengine.ExecJob.JOB_STATUS, org.apache.pig.impl.PigContext, org.apache.pig.impl.io.FileSpec, org.apache.pig.tools.pigstats.PigStats"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getStatus" return="org.apache.pig.backend.executionengine.ExecJob.JOB_STATUS"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hasCompleted" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getResults" return="java.util.Iterator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getContiguration" return="java.util.Properties"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getStatistics" return="org.apache.pig.tools.pigstats.PigStats"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="completionNotification"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cookie" type="java.lang.Object"/>
    </method>
    <method name="kill"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getLogs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="log" type="java.io.OutputStream"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getSTDOut"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.OutputStream"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getSTDError"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="error" type="java.io.OutputStream"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getException" return="java.lang.Exception"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="status" type="org.apache.pig.backend.executionengine.ExecJob.JOB_STATUS"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="pigContext" type="org.apache.pig.impl.PigContext"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="outFileSpec" type="org.apache.pig.impl.io.FileSpec"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.backend.local.executionengine.LocalJob -->
  <!-- start class org.apache.pig.backend.local.executionengine.LocalPigLauncher -->
  <class name="LocalPigLauncher" extends="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.Launcher"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LocalPigLauncher"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="explain"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pp" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"/>
      <param name="pc" type="org.apache.pig.impl.PigContext"/>
      <param name="ps" type="java.io.PrintStream"/>
      <param name="format" type="java.lang.String"/>
      <param name="isVerbose" type="boolean"/>
      <exception name="PlanException" type="org.apache.pig.impl.plan.PlanException"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="launchPig" return="org.apache.pig.tools.pigstats.PigStats"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="php" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"/>
      <param name="grpName" type="java.lang.String"/>
      <param name="pc" type="org.apache.pig.impl.PigContext"/>
      <exception name="PlanException" type="org.apache.pig.impl.plan.PlanException"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <exception name="JobCreationException" type="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobCreationException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.local.executionengine.LocalPigLauncher -->
  <!-- start class org.apache.pig.backend.local.executionengine.LocalPOStoreImpl -->
  <class name="LocalPOStoreImpl" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStoreImpl"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LocalPOStoreImpl" type="org.apache.pig.impl.PigContext"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="createStoreFunc" return="org.apache.pig.StoreFunc"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sFile" type="org.apache.pig.impl.io.FileSpec"/>
      <param name="schema" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="tearDown"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="cleanUp"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[This class implements the behavior of a POStore in the local
 execution engine. It creates and manages the store function and the
 output stream of the store.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.local.executionengine.LocalPOStoreImpl -->
  <!-- start class org.apache.pig.backend.local.executionengine.LocalResult -->
  <class name="LocalResult" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LocalResult" type="org.apache.pig.impl.io.FileSpec"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="outFileSpec" type="org.apache.pig.impl.io.FileSpec"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.backend.local.executionengine.LocalResult -->
</package>
<package name="org.apache.pig.backend.local.executionengine.physicalLayer">
  <!-- start class org.apache.pig.backend.local.executionengine.physicalLayer.LocalLogToPhyTranslationVisitor -->
  <class name="LocalLogToPhyTranslationVisitor" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.LogToPhyTranslationVisitor"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LocalLogToPhyTranslationVisitor" type="org.apache.pig.impl.logicalLayer.LogicalPlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getLogToPhyMap" return="java.util.Map"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cg" type="org.apache.pig.impl.logicalLayer.LOCogroup"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="split" type="org.apache.pig.impl.logicalLayer.LOSplit"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="split" type="org.apache.pig.impl.logicalLayer.LOSplitOutput"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stream" type="org.apache.pig.impl.logicalLayer.LOStream"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cross" type="org.apache.pig.impl.logicalLayer.LOCross"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="loStore" type="org.apache.pig.impl.logicalLayer.LOStore"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.local.executionengine.physicalLayer.LocalLogToPhyTranslationVisitor -->
</package>
<package name="org.apache.pig.backend.local.executionengine.physicalLayer.counters">
  <!-- start class org.apache.pig.backend.local.executionengine.physicalLayer.counters.POCounter -->
  <class name="POCounter" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="POCounter" type="org.apache.pig.impl.plan.OperatorKey, int, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POCounter" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POCounter" type="org.apache.pig.impl.plan.OperatorKey, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POCounter" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleOutputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getCount" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.backend.local.executionengine.physicalLayer.counters.POCounter -->
</package>
<package name="org.apache.pig.backend.local.executionengine.physicalLayer.relationalOperators">
  <!-- start class org.apache.pig.backend.local.executionengine.physicalLayer.relationalOperators.POCogroup -->
  <class name="POCogroup" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="POCogroup" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POCogroup" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POCogroup" type="org.apache.pig.impl.plan.OperatorKey, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POCogroup" type="org.apache.pig.impl.plan.OperatorKey, int, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setInner"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="inner" type="boolean[]"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleOutputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[This is a local implementation of Cogroup.
 The inputs need to be connected to LocalRearranges possibly by the
 logical to physical translator.
 
 This is a blocking operator. The outputs of LRs are put into
 SortedDataBags. They are sorted on the keys. We then start pulling
 tuple out of these bags and start constructing output.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.local.executionengine.physicalLayer.relationalOperators.POCogroup -->
  <!-- start class org.apache.pig.backend.local.executionengine.physicalLayer.relationalOperators.POCross -->
  <class name="POCross" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="POCross" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POCross" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POCross" type="org.apache.pig.impl.plan.OperatorKey, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POCross" type="org.apache.pig.impl.plan.OperatorKey, int, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleOutputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[This is a local implementation of the cross. Its a blocking operator.
 It accumulates inputs into databags and then applies logic similar to 
 foreach flatten(*) to get the output tuples]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.backend.local.executionengine.physicalLayer.relationalOperators.POCross -->
  <!-- start class org.apache.pig.backend.local.executionengine.physicalLayer.relationalOperators.POSplit -->
  <class name="POSplit" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="POSplit" type="org.apache.pig.impl.plan.OperatorKey, int, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POSplit" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POSplit" type="org.apache.pig.impl.plan.OperatorKey, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POSplit" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleOutputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.backend.local.executionengine.physicalLayer.relationalOperators.POSplit -->
  <!-- start class org.apache.pig.backend.local.executionengine.physicalLayer.relationalOperators.POSplitOutput -->
  <class name="POSplitOutput" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="POSplitOutput" type="org.apache.pig.impl.plan.OperatorKey, int, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POSplitOutput" type="org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POSplitOutput" type="org.apache.pig.impl.plan.OperatorKey, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="POSplitOutput" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleOutputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setPlan"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="compPlan" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"/>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.local.executionengine.physicalLayer.relationalOperators.POSplitOutput -->
  <!-- start class org.apache.pig.backend.local.executionengine.physicalLayer.relationalOperators.POStreamLocal -->
  <class name="POStreamLocal" extends="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStream"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="POStreamLocal" type="org.apache.pig.impl.plan.OperatorKey, org.apache.pig.impl.streaming.ExecutableManager, org.apache.pig.impl.streaming.StreamingCommand, java.util.Properties"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNext" return="org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[This is different from the Map-Reduce implementation of the POStream since there is no
 push model here. POStatus_EOP signals the end of input and can be used to decide when 
 to stop the stdin to the process]]>
      </doc>
    </method>
  </class>
  <!-- end class org.apache.pig.backend.local.executionengine.physicalLayer.relationalOperators.POStreamLocal -->
</package>
<package name="org.apache.pig.builtin">
  <!-- start class org.apache.pig.builtin.ARITY -->
  <class name="ARITY" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ARITY"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Integer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="outputSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.ARITY -->
  <!-- start class org.apache.pig.builtin.AVG -->
  <class name="AVG" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.Algebraic"/>
    <constructor name="AVG"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getInitial" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getIntermed" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFinal" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="combine" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="values" type="org.apache.pig.data.DataBag"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="count" return="long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="sum" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="outputSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
    </method>
    <method name="getArgToFuncMapping" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <doc>
    <![CDATA[Generates the average of the values of the first field of a tuple. This class is Algebraic in
 implemenation, so if possible the execution will be split into a local and global application]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.builtin.AVG -->
  <!-- start class org.apache.pig.builtin.AVG.Final -->
  <class name="AVG.Final" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AVG.Final"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.AVG.Final -->
  <!-- start class org.apache.pig.builtin.AVG.Initial -->
  <class name="AVG.Initial" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AVG.Initial"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.AVG.Initial -->
  <!-- start class org.apache.pig.builtin.AVG.Intermediate -->
  <class name="AVG.Intermediate" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AVG.Intermediate"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.AVG.Intermediate -->
  <!-- start class org.apache.pig.builtin.BagSize -->
  <class name="BagSize" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="BagSize"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="outputSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
    </method>
    <doc>
    <![CDATA[Generates the size of the first field of a tuple.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.builtin.BagSize -->
  <!-- start class org.apache.pig.builtin.BinaryStorage -->
  <class name="BinaryStorage" extends="org.apache.pig.builtin.Utf8StorageConverter"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.LoadFunc"/>
    <implements name="org.apache.pig.StoreFunc"/>
    <constructor name="BinaryStorage"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a <code>BinaryStorage</code> with default buffer size for reading
 inputs.]]>
      </doc>
    </constructor>
    <constructor name="BinaryStorage" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a <code>BinaryStorage</code> with the given buffer-size for 
 reading inputs.
 
 @param bufferSize buffer size to be used]]>
      </doc>
    </constructor>
    <method name="bindTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <param name="in" type="org.apache.pig.impl.io.BufferedPositionedInputStream"/>
      <param name="offset" type="long"/>
      <param name="end" type="long"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getNext" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="bindTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="finish"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="putNext"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="f" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
    </method>
    <method name="determineSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <param name="execType" type="org.apache.pig.ExecType"/>
      <param name="storage" type="org.apache.pig.backend.datastorage.DataStorage"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="fieldsToRead"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="schema" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
    </method>
    <method name="getStorePreparationClass" return="java.lang.Class"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <field name="bufferSize" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="in" type="org.apache.pig.impl.io.BufferedPositionedInputStream"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="offset" type="long"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="end" type="long"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[{@link BinaryStorage} is a simple, as-is, serializer/deserializer pair.
 
 It is {@link LoadFunc} which loads all the given data from the given 
 {@link InputStream} into a single {@link Tuple} and a {@link StoreFunc}
 which writes out all input data as a single <code>Tuple</code>. 
 
 <code>BinaryStorage</code> is intended to work in cases where input files
 are to be sent in-whole for processing without any splitting and 
 interpretation of their data.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.builtin.BinaryStorage -->
  <!-- start class org.apache.pig.builtin.BinStorage -->
  <class name="BinStorage" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.ReversibleLoadStoreFunc"/>
    <constructor name="BinStorage"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Simple binary nested reader format]]>
      </doc>
    </constructor>
    <method name="getNext" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="bindTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <param name="in" type="org.apache.pig.impl.io.BufferedPositionedInputStream"/>
      <param name="offset" type="long"/>
      <param name="end" type="long"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="bindTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="os" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="finish"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="putNext"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="bytesToBag" return="org.apache.pig.data.DataBag"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
    </method>
    <method name="bytesToCharArray" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
    </method>
    <method name="bytesToDouble" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
    </method>
    <method name="bytesToFloat" return="java.lang.Float"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
    </method>
    <method name="bytesToInteger" return="java.lang.Integer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
    </method>
    <method name="bytesToLong" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
    </method>
    <method name="bytesToMap" return="java.util.Map"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
    </method>
    <method name="bytesToTuple" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
    </method>
    <method name="determineSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <param name="execType" type="org.apache.pig.ExecType"/>
      <param name="storage" type="org.apache.pig.backend.datastorage.DataStorage"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="fieldsToRead"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="schema" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
    </method>
    <method name="toBytes" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="bag" type="org.apache.pig.data.DataBag"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toBytes" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="s" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toBytes" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="d" type="java.lang.Double"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toBytes" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="f" type="java.lang.Float"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toBytes" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="java.lang.Integer"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toBytes" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="l" type="java.lang.Long"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toBytes" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="m" type="java.util.Map"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toBytes" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
    </method>
    <method name="getStorePreparationClass" return="java.lang.Class"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <field name="RECORD_1" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="RECORD_2" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="RECORD_3" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="in" type="org.apache.pig.impl.io.BufferedPositionedInputStream"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="end" type="long"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.builtin.BinStorage -->
  <!-- start class org.apache.pig.builtin.CONCAT -->
  <class name="CONCAT" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="CONCAT"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.DataByteArray"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="outputSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
    </method>
    <method name="getArgToFuncMapping" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <doc>
    <![CDATA[Generates the concatenation of the first two fields of a tuple.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.builtin.CONCAT -->
  <!-- start class org.apache.pig.builtin.ConstantSize -->
  <class name="ConstantSize" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ConstantSize"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="outputSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
    </method>
    <doc>
    <![CDATA[Generates the size of the first field of a tuple.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.builtin.ConstantSize -->
  <!-- start class org.apache.pig.builtin.COUNT -->
  <class name="COUNT" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.Algebraic"/>
    <constructor name="COUNT"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getInitial" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getIntermed" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFinal" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="sum" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <exception name="NumberFormatException" type="java.lang.NumberFormatException"/>
    </method>
    <method name="outputSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
    </method>
    <doc>
    <![CDATA[Generates the count of the values of the first field of a tuple. This class is Algebraic in
 implemenation, so if possible the execution will be split into a local and global functions]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.builtin.COUNT -->
  <!-- start class org.apache.pig.builtin.COUNT.Final -->
  <class name="COUNT.Final" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="COUNT.Final"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.COUNT.Final -->
  <!-- start class org.apache.pig.builtin.COUNT.Initial -->
  <class name="COUNT.Initial" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="COUNT.Initial"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.COUNT.Initial -->
  <!-- start class org.apache.pig.builtin.COUNT.Intermediate -->
  <class name="COUNT.Intermediate" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="COUNT.Intermediate"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.COUNT.Intermediate -->
  <!-- start class org.apache.pig.builtin.DIFF -->
  <class name="DIFF" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DIFF"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.DataBag"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Compares a tuple with two fields. Emits any differences.
 @param input a tuple with exactly two fields.
 @throws IOException if there are not exactly two fields in a tuple]]>
      </doc>
    </method>
    <doc>
    <![CDATA[DIFF compares the fields of a tuple with arity 2. If the fields are DataBags, it
 will emit any Tuples that are in on of the DataBags but not the other. If the
 fields are values, it will emit tuples with values that do not match.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.builtin.DIFF -->
  <!-- start class org.apache.pig.builtin.Distinct -->
  <class name="Distinct" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.Algebraic"/>
    <constructor name="Distinct"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.DataBag"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getFinal" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getInitial" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getIntermed" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDistinct" return="org.apache.pig.data.DataBag"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[Find the distinct set of tuples in a bag.
 This is a blocking operator. All the input is put in the hashset implemented
 in DistinctDataBag which also provides the other DataBag interfaces.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.builtin.Distinct -->
  <!-- start class org.apache.pig.builtin.Distinct.Final -->
  <class name="Distinct.Final" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Distinct.Final"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.DataBag"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.Distinct.Final -->
  <!-- start class org.apache.pig.builtin.Distinct.Initial -->
  <class name="Distinct.Initial" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Distinct.Initial"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.Distinct.Initial -->
  <!-- start class org.apache.pig.builtin.Distinct.Intermediate -->
  <class name="Distinct.Intermediate" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Distinct.Intermediate"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.Distinct.Intermediate -->
  <!-- start class org.apache.pig.builtin.DoubleAvg -->
  <class name="DoubleAvg" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.Algebraic"/>
    <constructor name="DoubleAvg"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getInitial" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getIntermed" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFinal" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="combine" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="values" type="org.apache.pig.data.DataBag"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="count" return="long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="sum" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="outputSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
    </method>
    <doc>
    <![CDATA[Generates the average of the values of the first field of a tuple. This class is Algebraic in
 implemenation, so if possible the execution will be split into a local and global application]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.builtin.DoubleAvg -->
  <!-- start class org.apache.pig.builtin.DoubleAvg.Final -->
  <class name="DoubleAvg.Final" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DoubleAvg.Final"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.DoubleAvg.Final -->
  <!-- start class org.apache.pig.builtin.DoubleAvg.Initial -->
  <class name="DoubleAvg.Initial" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DoubleAvg.Initial"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.DoubleAvg.Initial -->
  <!-- start class org.apache.pig.builtin.DoubleAvg.Intermediate -->
  <class name="DoubleAvg.Intermediate" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DoubleAvg.Intermediate"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.DoubleAvg.Intermediate -->
  <!-- start class org.apache.pig.builtin.DoubleMax -->
  <class name="DoubleMax" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.Algebraic"/>
    <constructor name="DoubleMax"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getInitial" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getIntermed" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFinal" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="max" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="outputSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
    </method>
    <doc>
    <![CDATA[Generates the max of the values of the first field of a tuple.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.builtin.DoubleMax -->
  <!-- start class org.apache.pig.builtin.DoubleMax.Final -->
  <class name="DoubleMax.Final" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DoubleMax.Final"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.DoubleMax.Final -->
  <!-- start class org.apache.pig.builtin.DoubleMax.Initial -->
  <class name="DoubleMax.Initial" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DoubleMax.Initial"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.DoubleMax.Initial -->
  <!-- start class org.apache.pig.builtin.DoubleMax.Intermediate -->
  <class name="DoubleMax.Intermediate" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DoubleMax.Intermediate"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.DoubleMax.Intermediate -->
  <!-- start class org.apache.pig.builtin.DoubleMin -->
  <class name="DoubleMin" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.Algebraic"/>
    <constructor name="DoubleMin"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getInitial" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getIntermed" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFinal" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="min" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="outputSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
    </method>
    <doc>
    <![CDATA[Generates the min of the Double values in the first field of a tuple.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.builtin.DoubleMin -->
  <!-- start class org.apache.pig.builtin.DoubleMin.Final -->
  <class name="DoubleMin.Final" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DoubleMin.Final"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.DoubleMin.Final -->
  <!-- start class org.apache.pig.builtin.DoubleMin.Initial -->
  <class name="DoubleMin.Initial" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DoubleMin.Initial"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.DoubleMin.Initial -->
  <!-- start class org.apache.pig.builtin.DoubleMin.Intermediate -->
  <class name="DoubleMin.Intermediate" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DoubleMin.Intermediate"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.DoubleMin.Intermediate -->
  <!-- start class org.apache.pig.builtin.DoubleSum -->
  <class name="DoubleSum" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.Algebraic"/>
    <constructor name="DoubleSum"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getInitial" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getIntermed" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFinal" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="sum" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="outputSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
    </method>
    <doc>
    <![CDATA[Generates the sum of the values of the first field of a tuple.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.builtin.DoubleSum -->
  <!-- start class org.apache.pig.builtin.DoubleSum.Final -->
  <class name="DoubleSum.Final" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DoubleSum.Final"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.DoubleSum.Final -->
  <!-- start class org.apache.pig.builtin.DoubleSum.Initial -->
  <class name="DoubleSum.Initial" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DoubleSum.Initial"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.DoubleSum.Initial -->
  <!-- start class org.apache.pig.builtin.DoubleSum.Intermediate -->
  <class name="DoubleSum.Intermediate" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DoubleSum.Intermediate"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.DoubleSum.Intermediate -->
  <!-- start class org.apache.pig.builtin.FloatAvg -->
  <class name="FloatAvg" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.Algebraic"/>
    <constructor name="FloatAvg"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getInitial" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getIntermed" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFinal" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="combine" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="values" type="org.apache.pig.data.DataBag"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="count" return="long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="sum" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="outputSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
    </method>
    <doc>
    <![CDATA[Generates the average of the values of the first field of a tuple. This class is Algebraic in
 implementation, so if possible the execution will be split into a local and global application]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.builtin.FloatAvg -->
  <!-- start class org.apache.pig.builtin.FloatAvg.Final -->
  <class name="FloatAvg.Final" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FloatAvg.Final"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.FloatAvg.Final -->
  <!-- start class org.apache.pig.builtin.FloatAvg.Initial -->
  <class name="FloatAvg.Initial" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FloatAvg.Initial"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.FloatAvg.Initial -->
  <!-- start class org.apache.pig.builtin.FloatAvg.Intermediate -->
  <class name="FloatAvg.Intermediate" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FloatAvg.Intermediate"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.FloatAvg.Intermediate -->
  <!-- start class org.apache.pig.builtin.FloatMax -->
  <class name="FloatMax" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.Algebraic"/>
    <constructor name="FloatMax"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Float"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getInitial" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getIntermed" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFinal" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="max" return="java.lang.Float"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="outputSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
    </method>
    <doc>
    <![CDATA[Generates the max of the values of the first field of a tuple.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.builtin.FloatMax -->
  <!-- start class org.apache.pig.builtin.FloatMax.Final -->
  <class name="FloatMax.Final" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FloatMax.Final"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Float"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.FloatMax.Final -->
  <!-- start class org.apache.pig.builtin.FloatMax.Initial -->
  <class name="FloatMax.Initial" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FloatMax.Initial"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.FloatMax.Initial -->
  <!-- start class org.apache.pig.builtin.FloatMax.Intermediate -->
  <class name="FloatMax.Intermediate" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FloatMax.Intermediate"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.FloatMax.Intermediate -->
  <!-- start class org.apache.pig.builtin.FloatMin -->
  <class name="FloatMin" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.Algebraic"/>
    <constructor name="FloatMin"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Float"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getInitial" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getIntermed" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFinal" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="min" return="java.lang.Float"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="outputSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
    </method>
    <doc>
    <![CDATA[Generates the min of the Float values in the first field of a tuple.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.builtin.FloatMin -->
  <!-- start class org.apache.pig.builtin.FloatMin.Final -->
  <class name="FloatMin.Final" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FloatMin.Final"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Float"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.FloatMin.Final -->
  <!-- start class org.apache.pig.builtin.FloatMin.Initial -->
  <class name="FloatMin.Initial" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FloatMin.Initial"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.FloatMin.Initial -->
  <!-- start class org.apache.pig.builtin.FloatMin.Intermediate -->
  <class name="FloatMin.Intermediate" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FloatMin.Intermediate"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.FloatMin.Intermediate -->
  <!-- start class org.apache.pig.builtin.FloatSum -->
  <class name="FloatSum" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.Algebraic"/>
    <constructor name="FloatSum"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getInitial" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getIntermed" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFinal" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="sumDoubles" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="sum" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="outputSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
    </method>
    <doc>
    <![CDATA[Generates the sum of the Float values in the first field of a tuple.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.builtin.FloatSum -->
  <!-- start class org.apache.pig.builtin.FloatSum.Final -->
  <class name="FloatSum.Final" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FloatSum.Final"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.FloatSum.Final -->
  <!-- start class org.apache.pig.builtin.FloatSum.Initial -->
  <class name="FloatSum.Initial" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FloatSum.Initial"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.FloatSum.Initial -->
  <!-- start class org.apache.pig.builtin.FloatSum.Intermediate -->
  <class name="FloatSum.Intermediate" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FloatSum.Intermediate"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.FloatSum.Intermediate -->
  <!-- start class org.apache.pig.builtin.IntAvg -->
  <class name="IntAvg" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.Algebraic"/>
    <constructor name="IntAvg"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getInitial" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getIntermed" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFinal" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="combine" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="values" type="org.apache.pig.data.DataBag"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="count" return="long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="sum" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="outputSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
    </method>
    <doc>
    <![CDATA[Generates the average of the values of the first field of a tuple. This class is Algebraic in
 implementation, so if possible the execution will be split into a local and global application]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.builtin.IntAvg -->
  <!-- start class org.apache.pig.builtin.IntAvg.Final -->
  <class name="IntAvg.Final" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="IntAvg.Final"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.IntAvg.Final -->
  <!-- start class org.apache.pig.builtin.IntAvg.Initial -->
  <class name="IntAvg.Initial" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="IntAvg.Initial"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.IntAvg.Initial -->
  <!-- start class org.apache.pig.builtin.IntAvg.Intermediate -->
  <class name="IntAvg.Intermediate" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="IntAvg.Intermediate"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.IntAvg.Intermediate -->
  <!-- start class org.apache.pig.builtin.IntMax -->
  <class name="IntMax" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.Algebraic"/>
    <constructor name="IntMax"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Integer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getInitial" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getIntermed" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFinal" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="max" return="java.lang.Integer"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="outputSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
    </method>
    <doc>
    <![CDATA[Generates the max of the values of the first field of a tuple.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.builtin.IntMax -->
  <!-- start class org.apache.pig.builtin.IntMax.Final -->
  <class name="IntMax.Final" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="IntMax.Final"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Integer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.IntMax.Final -->
  <!-- start class org.apache.pig.builtin.IntMax.Initial -->
  <class name="IntMax.Initial" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="IntMax.Initial"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.IntMax.Initial -->
  <!-- start class org.apache.pig.builtin.IntMax.Intermediate -->
  <class name="IntMax.Intermediate" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="IntMax.Intermediate"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.IntMax.Intermediate -->
  <!-- start class org.apache.pig.builtin.IntMin -->
  <class name="IntMin" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.Algebraic"/>
    <constructor name="IntMin"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Integer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getInitial" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getIntermed" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFinal" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="min" return="java.lang.Integer"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="outputSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
    </method>
    <doc>
    <![CDATA[Generates the min of the Integer values in the first field of a tuple.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.builtin.IntMin -->
  <!-- start class org.apache.pig.builtin.IntMin.Final -->
  <class name="IntMin.Final" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="IntMin.Final"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Integer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.IntMin.Final -->
  <!-- start class org.apache.pig.builtin.IntMin.Initial -->
  <class name="IntMin.Initial" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="IntMin.Initial"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.IntMin.Initial -->
  <!-- start class org.apache.pig.builtin.IntMin.Intermediate -->
  <class name="IntMin.Intermediate" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="IntMin.Intermediate"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.IntMin.Intermediate -->
  <!-- start class org.apache.pig.builtin.IntSum -->
  <class name="IntSum" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.Algebraic"/>
    <constructor name="IntSum"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getInitial" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getIntermed" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFinal" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="sumLongs" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="sum" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="outputSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
    </method>
    <doc>
    <![CDATA[Generates the sum of the Integer in the first field of a tuple.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.builtin.IntSum -->
  <!-- start class org.apache.pig.builtin.IntSum.Final -->
  <class name="IntSum.Final" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="IntSum.Final"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.IntSum.Final -->
  <!-- start class org.apache.pig.builtin.IntSum.Initial -->
  <class name="IntSum.Initial" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="IntSum.Initial"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.IntSum.Initial -->
  <!-- start class org.apache.pig.builtin.IntSum.Intermediate -->
  <class name="IntSum.Intermediate" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="IntSum.Intermediate"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.IntSum.Intermediate -->
  <!-- start class org.apache.pig.builtin.IsEmpty -->
  <class name="IsEmpty" extends="org.apache.pig.FilterFunc"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="IsEmpty"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.IsEmpty -->
  <!-- start class org.apache.pig.builtin.LongAvg -->
  <class name="LongAvg" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.Algebraic"/>
    <constructor name="LongAvg"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getInitial" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getIntermed" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFinal" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="combine" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="values" type="org.apache.pig.data.DataBag"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="count" return="long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="sum" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="outputSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
    </method>
    <doc>
    <![CDATA[Generates the average of the values of the first field of a tuple. This class is Algebraic in
 implementation, so if possible the execution will be split into a local and global application]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.builtin.LongAvg -->
  <!-- start class org.apache.pig.builtin.LongAvg.Final -->
  <class name="LongAvg.Final" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LongAvg.Final"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.LongAvg.Final -->
  <!-- start class org.apache.pig.builtin.LongAvg.Initial -->
  <class name="LongAvg.Initial" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LongAvg.Initial"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.LongAvg.Initial -->
  <!-- start class org.apache.pig.builtin.LongAvg.Intermediate -->
  <class name="LongAvg.Intermediate" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LongAvg.Intermediate"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.LongAvg.Intermediate -->
  <!-- start class org.apache.pig.builtin.LongMax -->
  <class name="LongMax" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.Algebraic"/>
    <constructor name="LongMax"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getInitial" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getIntermed" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFinal" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="max" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="outputSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
    </method>
    <doc>
    <![CDATA[Generates the max of the values of the first field of a tuple.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.builtin.LongMax -->
  <!-- start class org.apache.pig.builtin.LongMax.Final -->
  <class name="LongMax.Final" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LongMax.Final"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.LongMax.Final -->
  <!-- start class org.apache.pig.builtin.LongMax.Initial -->
  <class name="LongMax.Initial" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LongMax.Initial"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.LongMax.Initial -->
  <!-- start class org.apache.pig.builtin.LongMax.Intermediate -->
  <class name="LongMax.Intermediate" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LongMax.Intermediate"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.LongMax.Intermediate -->
  <!-- start class org.apache.pig.builtin.LongMin -->
  <class name="LongMin" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.Algebraic"/>
    <constructor name="LongMin"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getInitial" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getIntermed" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFinal" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="min" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="outputSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
    </method>
    <doc>
    <![CDATA[Generates the min of the Long values in the first field of a tuple.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.builtin.LongMin -->
  <!-- start class org.apache.pig.builtin.LongMin.Final -->
  <class name="LongMin.Final" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LongMin.Final"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.LongMin.Final -->
  <!-- start class org.apache.pig.builtin.LongMin.Initial -->
  <class name="LongMin.Initial" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LongMin.Initial"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.LongMin.Initial -->
  <!-- start class org.apache.pig.builtin.LongMin.Intermediate -->
  <class name="LongMin.Intermediate" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LongMin.Intermediate"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.LongMin.Intermediate -->
  <!-- start class org.apache.pig.builtin.LongSum -->
  <class name="LongSum" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.Algebraic"/>
    <constructor name="LongSum"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getInitial" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getIntermed" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFinal" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="sum" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="outputSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
    </method>
    <doc>
    <![CDATA[Generates the sum of the Long values in the first field of a tuple.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.builtin.LongSum -->
  <!-- start class org.apache.pig.builtin.LongSum.Final -->
  <class name="LongSum.Final" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LongSum.Final"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.LongSum.Final -->
  <!-- start class org.apache.pig.builtin.LongSum.Initial -->
  <class name="LongSum.Initial" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LongSum.Initial"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.LongSum.Initial -->
  <!-- start class org.apache.pig.builtin.LongSum.Intermediate -->
  <class name="LongSum.Intermediate" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LongSum.Intermediate"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.LongSum.Intermediate -->
  <!-- start class org.apache.pig.builtin.MapSize -->
  <class name="MapSize" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MapSize"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="outputSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
    </method>
    <doc>
    <![CDATA[Generates the size of the first field of a tuple.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.builtin.MapSize -->
  <!-- start class org.apache.pig.builtin.MAX -->
  <class name="MAX" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.Algebraic"/>
    <constructor name="MAX"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getInitial" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getIntermed" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFinal" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="max" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="maxDoubles" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="outputSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
    </method>
    <method name="getArgToFuncMapping" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <doc>
    <![CDATA[Generates the max of the values of the first field of a tuple.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.builtin.MAX -->
  <!-- start class org.apache.pig.builtin.MAX.Final -->
  <class name="MAX.Final" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MAX.Final"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.MAX.Final -->
  <!-- start class org.apache.pig.builtin.MAX.Initial -->
  <class name="MAX.Initial" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MAX.Initial"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.MAX.Initial -->
  <!-- start class org.apache.pig.builtin.MAX.Intermediate -->
  <class name="MAX.Intermediate" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MAX.Intermediate"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.MAX.Intermediate -->
  <!-- start class org.apache.pig.builtin.MIN -->
  <class name="MIN" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.Algebraic"/>
    <constructor name="MIN"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getInitial" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getIntermed" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFinal" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="min" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="minDoubles" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="outputSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
    </method>
    <method name="getArgToFuncMapping" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <doc>
    <![CDATA[Generates the min of the values of the first field of a tuple.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.builtin.MIN -->
  <!-- start class org.apache.pig.builtin.MIN.Final -->
  <class name="MIN.Final" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MIN.Final"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.MIN.Final -->
  <!-- start class org.apache.pig.builtin.MIN.Initial -->
  <class name="MIN.Initial" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MIN.Initial"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.MIN.Initial -->
  <!-- start class org.apache.pig.builtin.MIN.Intermediate -->
  <class name="MIN.Intermediate" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MIN.Intermediate"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.MIN.Intermediate -->
  <!-- start class org.apache.pig.builtin.PigDump -->
  <class name="PigDump" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.StoreFunc"/>
    <constructor name="PigDump"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="bindTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="os" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="finish"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="putNext"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="f" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getStorePreparationClass" return="java.lang.Class"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <field name="recordDelimiter" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.builtin.PigDump -->
  <!-- start class org.apache.pig.builtin.PigStorage -->
  <class name="PigStorage" extends="org.apache.pig.builtin.Utf8StorageConverter"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.ReversibleLoadStoreFunc"/>
    <constructor name="PigStorage"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="PigStorage" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs a Pig loader that uses specified regex as a field delimiter.
 
 @param delimiter
            the single byte character that is used to separate fields.
            ("\t" is the default.)]]>
      </doc>
    </constructor>
    <method name="getNext" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="bindTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <param name="in" type="org.apache.pig.impl.io.BufferedPositionedInputStream"/>
      <param name="offset" type="long"/>
      <param name="end" type="long"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="bindTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="os" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="putNext"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="f" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="finish"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="determineSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <param name="execType" type="org.apache.pig.ExecType"/>
      <param name="storage" type="org.apache.pig.backend.datastorage.DataStorage"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="fieldsToRead"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="schema" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="other" type="org.apache.pig.builtin.PigStorage"/>
    </method>
    <method name="getStorePreparationClass" return="java.lang.Class"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <field name="in" type="org.apache.pig.impl.io.BufferedPositionedInputStream"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="mLog" type="org.apache.commons.logging.Log"
      transient="false" volatile="false"
      static="false" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[A load function that parses a line of input into fields using a delimiter to set the fields. The
 delimiter is given as a regular expression. See String.split(delimiter) and
 http://java.sun.com/j2se/1.5.0/docs/api/java/util/regex/Pattern.html for more information.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.builtin.PigStorage -->
  <!-- start class org.apache.pig.builtin.RANDOM -->
  <class name="RANDOM" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="RANDOM"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="outputSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.RANDOM -->
  <!-- start class org.apache.pig.builtin.SIZE -->
  <class name="SIZE" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SIZE"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="outputSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
    </method>
    <method name="getArgToFuncMapping" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <doc>
    <![CDATA[Generates the Size of the first field of a tuple.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.builtin.SIZE -->
  <!-- start class org.apache.pig.builtin.StringConcat -->
  <class name="StringConcat" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="StringConcat"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="outputSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
    </method>
    <doc>
    <![CDATA[Generates the concatenation of the first two fields of a tuple.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.builtin.StringConcat -->
  <!-- start class org.apache.pig.builtin.StringMax -->
  <class name="StringMax" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.Algebraic"/>
    <constructor name="StringMax"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getInitial" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getIntermed" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFinal" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="max" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="outputSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
    </method>
    <doc>
    <![CDATA[Generates the max of the values of the first field of a tuple.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.builtin.StringMax -->
  <!-- start class org.apache.pig.builtin.StringMax.Final -->
  <class name="StringMax.Final" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="StringMax.Final"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.StringMax.Final -->
  <!-- start class org.apache.pig.builtin.StringMax.Initial -->
  <class name="StringMax.Initial" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="StringMax.Initial"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.StringMax.Initial -->
  <!-- start class org.apache.pig.builtin.StringMax.Intermediate -->
  <class name="StringMax.Intermediate" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="StringMax.Intermediate"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.StringMax.Intermediate -->
  <!-- start class org.apache.pig.builtin.StringMin -->
  <class name="StringMin" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.Algebraic"/>
    <constructor name="StringMin"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getInitial" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getIntermed" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFinal" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="min" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="outputSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
    </method>
    <doc>
    <![CDATA[Generates the min of the String values in the first field of a tuple.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.builtin.StringMin -->
  <!-- start class org.apache.pig.builtin.StringMin.Final -->
  <class name="StringMin.Final" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="StringMin.Final"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.StringMin.Final -->
  <!-- start class org.apache.pig.builtin.StringMin.Initial -->
  <class name="StringMin.Initial" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="StringMin.Initial"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.StringMin.Initial -->
  <!-- start class org.apache.pig.builtin.StringMin.Intermediate -->
  <class name="StringMin.Intermediate" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="StringMin.Intermediate"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.StringMin.Intermediate -->
  <!-- start class org.apache.pig.builtin.StringSize -->
  <class name="StringSize" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="StringSize"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="outputSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
    </method>
    <doc>
    <![CDATA[Generates the size of the first field of a tuple.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.builtin.StringSize -->
  <!-- start class org.apache.pig.builtin.SUM -->
  <class name="SUM" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.Algebraic"/>
    <constructor name="SUM"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getInitial" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getIntermed" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFinal" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="sum" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="sumDoubles" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="outputSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
    </method>
    <method name="getArgToFuncMapping" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <doc>
    <![CDATA[Generates the sum of the values of the first field of a tuple.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.builtin.SUM -->
  <!-- start class org.apache.pig.builtin.SUM.Final -->
  <class name="SUM.Final" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SUM.Final"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.SUM.Final -->
  <!-- start class org.apache.pig.builtin.SUM.Initial -->
  <class name="SUM.Initial" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SUM.Initial"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.SUM.Initial -->
  <!-- start class org.apache.pig.builtin.SUM.Intermediate -->
  <class name="SUM.Intermediate" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SUM.Intermediate"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.SUM.Intermediate -->
  <!-- start class org.apache.pig.builtin.TextLoader -->
  <class name="TextLoader" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.LoadFunc"/>
    <constructor name="TextLoader"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="bindTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <param name="in" type="org.apache.pig.impl.io.BufferedPositionedInputStream"/>
      <param name="offset" type="long"/>
      <param name="end" type="long"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getNext" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="bytesToBoolean" return="java.lang.Boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[TextLoader does not support conversion to Boolean.
 @throws IOException if the value cannot be cast.]]>
      </doc>
    </method>
    <method name="bytesToInteger" return="java.lang.Integer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[TextLoader does not support conversion to Integer
 @throws IOException if the value cannot be cast.]]>
      </doc>
    </method>
    <method name="bytesToLong" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[TextLoader does not support conversion to Long
 @throws IOException if the value cannot be cast.]]>
      </doc>
    </method>
    <method name="bytesToFloat" return="java.lang.Float"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[TextLoader does not support conversion to Float
 @throws IOException if the value cannot be cast.]]>
      </doc>
    </method>
    <method name="bytesToDouble" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[TextLoader does not support conversion to Double
 @throws IOException if the value cannot be cast.]]>
      </doc>
    </method>
    <method name="bytesToCharArray" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Cast data from bytes to chararray value.  
 @param b byte array to be cast.
 @return String value.
 @throws IOException if the value cannot be cast.]]>
      </doc>
    </method>
    <method name="bytesToMap" return="java.util.Map"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[TextLoader does not support conversion to Map
 @throws IOException if the value cannot be cast.]]>
      </doc>
    </method>
    <method name="bytesToTuple" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[TextLoader does not support conversion to Tuple
 @throws IOException if the value cannot be cast.]]>
      </doc>
    </method>
    <method name="bytesToBag" return="org.apache.pig.data.DataBag"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[TextLoader does not support conversion to Bag
 @throws IOException if the value cannot be cast.]]>
      </doc>
    </method>
    <method name="fieldsToRead"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="schema" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
      <doc>
      <![CDATA[TextLoader doesn't make use of this.]]>
      </doc>
    </method>
    <method name="determineSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <param name="execType" type="org.apache.pig.ExecType"/>
      <param name="storage" type="org.apache.pig.backend.datastorage.DataStorage"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[TextLoader does not provide a schema.]]>
      </doc>
    </method>
    <method name="toBytes" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="bag" type="org.apache.pig.data.DataBag"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toBytes" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="s" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toBytes" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="d" type="java.lang.Double"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toBytes" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="f" type="java.lang.Float"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toBytes" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="java.lang.Integer"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toBytes" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="l" type="java.lang.Long"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toBytes" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="m" type="java.util.Map"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toBytes" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[This load function simply creates a tuple for each line of text that has a single field that
 contains the line of text.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.builtin.TextLoader -->
  <!-- start class org.apache.pig.builtin.TOKENIZE -->
  <class name="TOKENIZE" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TOKENIZE"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.DataBag"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="outputSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
    </method>
  </class>
  <!-- end class org.apache.pig.builtin.TOKENIZE -->
  <!-- start class org.apache.pig.builtin.TupleSize -->
  <class name="TupleSize" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TupleSize"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="outputSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
    </method>
    <doc>
    <![CDATA[Generates the size of the first field of a tuple.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.builtin.TupleSize -->
  <!-- start class org.apache.pig.builtin.Utf8StorageConverter -->
  <class name="Utf8StorageConverter" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Utf8StorageConverter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="bytesToBag" return="org.apache.pig.data.DataBag"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="bytesToCharArray" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="bytesToDouble" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
    </method>
    <method name="bytesToFloat" return="java.lang.Float"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="bytesToInteger" return="java.lang.Integer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="bytesToLong" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="bytesToMap" return="java.util.Map"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="bytesToTuple" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toBytes" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="bag" type="org.apache.pig.data.DataBag"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toBytes" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="s" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toBytes" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="d" type="java.lang.Double"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toBytes" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="f" type="java.lang.Float"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toBytes" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="java.lang.Integer"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toBytes" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="l" type="java.lang.Long"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toBytes" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="m" type="java.util.Map"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toBytes" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <field name="mBagFactory" type="org.apache.pig.data.BagFactory"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="mTupleFactory" type="org.apache.pig.data.TupleFactory"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="mLog" type="org.apache.commons.logging.Log"
      transient="false" volatile="false"
      static="false" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[This abstract class provides standard conversions between utf8 encoded data
 and pig data types.  It is intended to be extended by load and store
 functions (such as PigStorage).]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.builtin.Utf8StorageConverter -->
</package>
<package name="org.apache.pig.data">
  <!-- start class org.apache.pig.data.AmendableTuple -->
  <class name="AmendableTuple" extends="org.apache.pig.data.DefaultTuple"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AmendableTuple" type="int, java.lang.Object"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getAmendKey" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setAmendKey"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="amendKey" type="java.lang.Object"/>
    </method>
  </class>
  <!-- end class org.apache.pig.data.AmendableTuple -->
  <!-- start class org.apache.pig.data.BagFactory -->
  <class name="BagFactory" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="BagFactory"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <method name="getInstance" return="org.apache.pig.data.BagFactory"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get a reference to the singleton factory.]]>
      </doc>
    </method>
    <method name="newDefaultBag" return="org.apache.pig.data.DataBag"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get a default (unordered, not distinct) data bag.]]>
      </doc>
    </method>
    <method name="newDefaultBag" return="org.apache.pig.data.DataBag"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listOfTuples" type="java.util.List"/>
      <doc>
      <![CDATA[Get a default (unordered, not distinct) data bag from
 an existing list of tuples.]]>
      </doc>
    </method>
    <method name="newSortedBag" return="org.apache.pig.data.DataBag"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="comp" type="java.util.Comparator"/>
      <doc>
      <![CDATA[Get a sorted data bag.
 @param comp Comparator that controls how the data is sorted.
 If null, default comparator will be used.]]>
      </doc>
    </method>
    <method name="newDistinctBag" return="org.apache.pig.data.DataBag"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get a distinct data bag.]]>
      </doc>
    </method>
    <method name="registerBag"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="b" type="org.apache.pig.data.DataBag"/>
    </method>
    <method name="resetSelf"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Provided for testing purposes only.  This function should never be
 called by anybody but the unit tests.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Factory for constructing different types of bags.
 This class is abstract so that users can
 override the bag factory if they desire to provide their own that
 returns their implementation of a bag.  If the property
 pig.data.bag.factory.name is set to a class name and
 pig.data.bag.factory.jar is set to a URL pointing to a jar that
 contains the above named class, then getInstance() will create a
 a instance of the named class using the indicatd jar.  Otherwise, it
 will create an instance of DefaultBagFactory.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.data.BagFactory -->
  <!-- start interface org.apache.pig.data.DataBag -->
  <interface name="DataBag"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.impl.util.Spillable"/>
    <implements name="org.apache.hadoop.io.WritableComparable"/>
    <implements name="java.lang.Iterable"/>
    <implements name="java.io.Serializable"/>
    <method name="size" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the number of elements in the bag, both in memory and on disk.]]>
      </doc>
    </method>
    <method name="isSorted" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Find out if the bag is sorted.]]>
      </doc>
    </method>
    <method name="isDistinct" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Find out if the bag is distinct.]]>
      </doc>
    </method>
    <method name="iterator" return="java.util.Iterator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get an iterator to the bag. For default and distinct bags,
 no particular order is guaranteed. For sorted bags the order
 is guaranteed to be sorted according
 to the provided comparator.]]>
      </doc>
    </method>
    <method name="add"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <doc>
      <![CDATA[Add a tuple to the bag.
 @param t tuple to add.]]>
      </doc>
    </method>
    <method name="addAll"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="org.apache.pig.data.DataBag"/>
      <doc>
      <![CDATA[Add contents of a bag to the bag.
 @param b bag to add contents of.]]>
      </doc>
    </method>
    <method name="clear"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Clear out the contents of the bag, both on disk and in memory.
 Any attempts to read after this is called will produce undefined
 results.]]>
      </doc>
    </method>
    <method name="markStale"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stale" type="boolean"/>
      <doc>
      <![CDATA[This is used by FuncEvalSpec.FakeDataBag.
 @param stale Set stale state.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A collection of Tuples.  A DataBag may or may not fit into memory.
 DataBag extends spillable, which means that it registers with a memory
 manager.  By default, it attempts to keep all of its contents in memory.
 If it is asked by the memory manager to spill to disk (by a call to
 spill()), it takes whatever it has in memory, opens a spill file, and
 writes the contents out.  This may happen multiple times.  The bag
 tracks all of the files it's spilled to.
 
 DataBag provides an Iterator interface, that allows callers to read
 through the contents.  The iterators are aware of the data spilling.
 They have to be able to handle reading from files, as well as the fact
 that data they were reading from memory may have been spilled to disk
 underneath them.

 The DataBag interface assumes that all data is written before any is
 read.  That is, a DataBag cannot be used as a queue.  If data is written
 after data is read, the results are undefined.  This condition is not
 checked on each add or read, for reasons of speed.  Caveat emptor.

 Since spills are asynchronous (the memory manager requesting a spill
 runs in a separate thread), all operations dealing with the mContents
 Collection (which is the collection of tuples contained in the bag) have
 to be synchronized.  This means that reading from a DataBag is currently
 serialized.  This is ok for the moment because pig execution is
 currently single threaded.  A ReadWriteLock was experimented with, but
 it was found to be about 10x slower than using the synchronize keyword.
 If pig changes its execution model to be multithreaded, we may need to
 return to this issue, as synchronizing reads will most likely defeat the
 purpose of multi-threading execution.

 DataBags come in several types, default, sorted, and distinct.  The type
 must be chosen up front, there is no way to convert a bag on the fly.]]>
    </doc>
  </interface>
  <!-- end interface org.apache.pig.data.DataBag -->
  <!-- start class org.apache.pig.data.DataByteArray -->
  <class name="DataByteArray" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.Comparable"/>
    <implements name="java.io.Serializable"/>
    <constructor name="DataByteArray"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Default constructor.  The data array will not be allocated when this
 constructor is called.]]>
      </doc>
    </constructor>
    <constructor name="DataByteArray" type="byte[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Construct a byte array using the provided bytes as the content.
 @param b byte array to use as content.  A reference to the bytes
 will be taken, the underlying bytes will not be copied.]]>
      </doc>
    </constructor>
    <constructor name="DataByteArray" type="org.apache.pig.data.DataByteArray, org.apache.pig.data.DataByteArray"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Construct a byte array concatenating the two provided 
 byte arrays as the content.
 @param b the first byte array to use as content.
 @param c the other byte array to use as content.]]>
      </doc>
    </constructor>
    <constructor name="DataByteArray" type="byte[], int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Construct a byte array using a portion of the provided bytes as content.
 @param b byte array to read from.  A copy of the underlying bytes will be
 made.
 @param start starting point to copy from
 @param end ending point to copy to, exclusive.]]>
      </doc>
    </constructor>
    <constructor name="DataByteArray" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Construct a byte array from a String.  The contents of the string
 are copied.
 @param s String to make a byte array out of.]]>
      </doc>
    </constructor>
    <method name="size" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Find the size of the byte array.
 @return number of bytes in the array.]]>
      </doc>
    </method>
    <method name="get" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the underlying byte array.  This is the real thing, not a copy,
 so don't mess with it!
 @return underlying byte[]]]>
      </doc>
    </method>
    <method name="set"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
      <doc>
      <![CDATA[Set the internal byte array.  This should not be called unless the
 default constructor was used.
 @param b byte array to store.  The contents of the byte array are
 not copied.]]>
      </doc>
    </method>
    <method name="set"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="s" type="java.lang.String"/>
      <doc>
      <![CDATA[Set the internal byte array.  This should not be called unless the
 default constructor was used.
 @param s String to copy.  The contents of the string are copied.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="compareTo" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="other" type="java.lang.Object"/>
      <doc>
      <![CDATA[Compare two byte arrays.  Comparison is done first using byte values
 then length.  So "g" will be greater than "abcdefg", but "hello worlds"
 is greater than "hello world".  If the other object is not a
 DataByteArray, DataType.compare will be called.
 @param other Other object to compare to.
 @return -1 if less than, 1 if greater than, 0 if equal.]]>
      </doc>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="other" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[An implementation of byte array.  This is done as an object because we
 need to be able to implement compareTo, toString, hashCode, and some
 other methods.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.data.DataByteArray -->
  <!-- start class org.apache.pig.data.DataReaderWriter -->
  <class name="DataReaderWriter" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DataReaderWriter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="bytesToTuple" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.DataInput"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="bytesToBag" return="org.apache.pig.data.DataBag"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.DataInput"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="bytesToMap" return="java.util.Map"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.DataInput"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="bytesToCharArray" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.DataInput"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="bytesToBigCharArray" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.DataInput"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="readDatum" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.DataInput"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="readDatum" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.DataInput"/>
      <param name="type" type="byte"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="writeDatum"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.DataOutput"/>
      <param name="val" type="java.lang.Object"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[A class to handle reading and writing of intermediate results of data
 types.  This class could also be used for storing permanent results.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.data.DataReaderWriter -->
  <!-- start class org.apache.pig.data.DataType -->
  <class name="DataType" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DataType"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="findType" return="byte"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
      <doc>
      <![CDATA[Determine the datatype of an object.
 @param o Object to test.
 @return byte code of the type, or ERROR if we don't know.]]>
      </doc>
    </method>
    <method name="findType" return="byte"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.reflect.Type"/>
      <doc>
      <![CDATA[Given a Type object determine the data type it represents.  This isn't
 cheap, as it uses reflection, so use sparingly.
 @param t Type to examine
 @return byte code of the type, or ERROR if we don't know.]]>
      </doc>
    </method>
    <method name="numTypes" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="genAllTypes" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="genTypeToNameMap" return="java.util.Map"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="genNameToTypeMap" return="java.util.Map"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="findTypeName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
      <doc>
      <![CDATA[Get the type name.
 @param o Object to test.
 @return type name, as a String.]]>
      </doc>
    </method>
    <method name="findTypeName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dt" type="byte"/>
      <doc>
      <![CDATA[Get the type name from the type byte code
 @param dt Type byte code
 @return type name, as a String.]]>
      </doc>
    </method>
    <method name="isComplex" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dataType" type="byte"/>
      <doc>
      <![CDATA[Determine whether the this data type is complex.
 @param dataType Data type code to test.
 @return true if dataType is bag, tuple, or map.]]>
      </doc>
    </method>
    <method name="isComplex" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
      <doc>
      <![CDATA[Determine whether the object is complex or atomic.
 @param o Object to determine type of.
 @return true if dataType is bag, tuple, or map.]]>
      </doc>
    </method>
    <method name="isAtomic" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dataType" type="byte"/>
      <doc>
      <![CDATA[Determine whether the this data type is atomic.
 @param dataType Data type code to test.
 @return true if dataType is bytearray, bigchararray, chararray, integer, long,
 float, or boolean.]]>
      </doc>
    </method>
    <method name="isAtomic" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
      <doc>
      <![CDATA[Determine whether the this data type is atomic.
 @param o Object to determine type of.
 @return true if dataType is bytearray, chararray, integer, long,
 float, or boolean.]]>
      </doc>
    </method>
    <method name="isSchemaType" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
      <doc>
      <![CDATA[Determine whether the this object can have a schema.
 @param o Object to determine if it has a schema
 @return true if the type can have a valid schema (i.e., bag or tuple)]]>
      </doc>
    </method>
    <method name="isSchemaType" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dataType" type="byte"/>
      <doc>
      <![CDATA[Determine whether the this data type can have a schema.
 @param dataType dataType to determine if it has a schema
 @return true if the type can have a valid schema (i.e., bag or tuple)]]>
      </doc>
    </method>
    <method name="compare" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o1" type="java.lang.Object"/>
      <param name="o2" type="java.lang.Object"/>
      <doc>
      <![CDATA[/**
 Compare two objects to each other.  This function is necessary
 because there's no super class that implements compareTo.  This
 function provides an (arbitrary) ordering of objects of different
 types as follows:  NULL &lt; BOOLEAN &lt; BYTE &lt; INTEGER &lt; LONG &lt;
 FLOAT &lt; DOUBLE * &lt; BYTEARRAY &lt; STRING &lt; MAP &lt;
 TUPLE &lt; BAG.  No other functions should implement this cross
 object logic.  They should call this function for it instead.
 @param o1 First object
 @param o2 Second object
 @return -1 if o1 is less, 0 if they are equal, 1 if o2 is less.]]>
      </doc>
    </method>
    <method name="toInteger" return="java.lang.Integer"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
      <param name="type" type="byte"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Force a data object to an Integer, if possible.  Any numeric type
 can be forced to an Integer (though precision may be lost), as well
 as CharArray, ByteArray, or Boolean.  Complex types cannot be
 forced to an Integer.  This isn't particularly efficient, so if you
 already <b>know</b> that the object you have is an Integer you
 should just cast it.
 @return The object as a Integer.
 @throws ExecException if the type can't be forced to an Integer.]]>
      </doc>
    </method>
    <method name="toInteger" return="java.lang.Integer"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[If type of object is not known, use this method, which internally calls
 toInteger(object,type)
 
 @param o
 @return Object as Integer.
 @throws ExecException]]>
      </doc>
    </method>
    <method name="toLong" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
      <param name="type" type="byte"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Force a data object to a Long, if possible.  Any numeric type
 can be forced to a Long (though precision may be lost), as well
 as CharArray, ByteArray, or Boolean.  Complex types cannot be
 forced to a Long.  This isn't particularly efficient, so if you
 already <b>know</b> that the object you have is a Long you
 should just cast it.
 @return The object as a Long.
 @throws ExecException if the type can't be forced to a Long.]]>
      </doc>
    </method>
    <method name="toLong" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[If type of object is not known, use this method which in turns call
 toLong(object,type) after finding type.
 
 @param o
 @return Object as Long.
 @throws ExecException]]>
      </doc>
    </method>
    <method name="toFloat" return="java.lang.Float"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
      <param name="type" type="byte"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Force a data object to a Float, if possible.  Any numeric type
 can be forced to a Float (though precision may be lost), as well
 as CharArray, ByteArray.  Complex types cannot be
 forced to a Float.  This isn't particularly efficient, so if you
 already <b>know</b> that the object you have is a Float you
 should just cast it.
 @return The object as a Float.
 @throws ExecException if the type can't be forced to a Float.]]>
      </doc>
    </method>
    <method name="toFloat" return="java.lang.Float"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[If type of object is not known, use this method which in turns call
 toFloat(object,type) after finding type.
 
 @param o
 @return Object as Float.
 @throws ExecException]]>
      </doc>
    </method>
    <method name="toDouble" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
      <param name="type" type="byte"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Force a data object to a Double, if possible.  Any numeric type
 can be forced to a Double, as well
 as CharArray, ByteArray.  Complex types cannot be
 forced to a Double.  This isn't particularly efficient, so if you
 already <b>know</b> that the object you have is a Double you
 should just cast it.
 @return The object as a Double.
 @throws ExecException if the type can't be forced to a Double.]]>
      </doc>
    </method>
    <method name="toDouble" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[If type of object is not known, use this method which in turns call
 toLong(object,type) after finding type.
 
 @param o
 @return Object as Double.
 @throws ExecException]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
      <param name="type" type="byte"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Force a data object to a String, if possible.  Any simple (atomic) type
 can be forced to a String including ByteArray.  Complex types cannot be
 forced to a String.  This isn't particularly efficient, so if you
 already <b>know</b> that the object you have is a String you
 should just cast it.
 @return The object as a String.
 @throws ExecException if the type can't be forced to a String.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[If type of object is not known, use this method which in turns call
 toString(object,type) after finding type.
 
 @param o
 @return Object as String.
 @throws ExecException]]>
      </doc>
    </method>
    <method name="toMap" return="java.util.Map"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[If this object is a map, return it as a map.
 This isn't particularly efficient, so if you
 already <b>know</b> that the object you have is a Map you
 should just cast it.
 @return The object as a Double.
 @throws ExecException if the type can't be forced to a Double.]]>
      </doc>
    </method>
    <method name="toTuple" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[If this object is a tuple, return it as a tuple.
 This isn't particularly efficient, so if you
 already <b>know</b> that the object you have is a Tuple you
 should just cast it.
 @return The object as a Double.
 @throws ExecException if the type can't be forced to a Double.]]>
      </doc>
    </method>
    <method name="toBag" return="org.apache.pig.data.DataBag"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[If this object is a bag, return it as a bag.
 This isn't particularly efficient, so if you
 already <b>know</b> that the object you have is a bag you
 should just cast it.
 @return The object as a Double.
 @throws ExecException if the type can't be forced to a Double.]]>
      </doc>
    </method>
    <method name="spillTupleContents"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <param name="label" type="java.lang.String"/>
      <doc>
      <![CDATA[Purely for debugging]]>
      </doc>
    </method>
    <method name="isNumberType" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="byte"/>
    </method>
    <method name="isUsableType" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="byte"/>
    </method>
    <method name="mergeType" return="byte"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type1" type="byte"/>
      <param name="type2" type="byte"/>
      <doc>
      <![CDATA[Merge types if possible
 @param type1
 @param type2
 @return the merged type, or DataType.ERROR if not successful]]>
      </doc>
    </method>
    <method name="mapToString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="m" type="java.util.Map"/>
    </method>
    <method name="equalByteArrays" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="lhs" type="byte[]"/>
      <param name="rhs" type="byte[]"/>
    </method>
    <method name="determineFieldSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
      <exception name="SchemaMergeException" type="org.apache.pig.impl.logicalLayer.schema.SchemaMergeException"/>
      <doc>
      <![CDATA[Determine the field schema of an object
 @param o the object whose field schema is to be determined
 @return the field schema corresponding to the object
 @throws ExecException,FrontendException,SchemaMergeException]]>
      </doc>
    </method>
    <field name="UNKNOWN" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="NULL" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="BOOLEAN" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="BYTE" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="INTEGER" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="LONG" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="FLOAT" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="DOUBLE" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="BYTEARRAY" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="CHARARRAY" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="BIGCHARARRAY" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="MAP" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="TUPLE" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="BAG" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ERROR" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[A class of static final values used to encode data type and a number of
 static helper funcitons for manipulating data objects.  The data type
 values could be
 done as an enumeration, but it is done as byte codes instead to save
 creating objects.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.data.DataType -->
  <!-- start class org.apache.pig.data.DefaultAbstractBag -->
  <class name="DefaultAbstractBag" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.data.DataBag"/>
    <constructor name="DefaultAbstractBag"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="size" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the number of elements in the bag, both in memory and on disk.]]>
      </doc>
    </method>
    <method name="add"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <doc>
      <![CDATA[Add a tuple to the bag.
 @param t tuple to add.]]>
      </doc>
    </method>
    <method name="addAll"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="org.apache.pig.data.DataBag"/>
      <doc>
      <![CDATA[Add contents of a bag to the bag.
 @param b bag to add contents of.]]>
      </doc>
    </method>
    <method name="addAll"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="c" type="java.util.Collection"/>
      <doc>
      <![CDATA[Add contents of a container to the bag.
 @param c Collection to add contents of.]]>
      </doc>
    </method>
    <method name="getMemorySize" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return the size of memory usage.]]>
      </doc>
    </method>
    <method name="clear"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Clear out the contents of the bag, both on disk and in memory.
 Any attempts to read after this is called will produce undefined
 results.]]>
      </doc>
    </method>
    <method name="compareTo" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="other" type="java.lang.Object"/>
      <doc>
      <![CDATA[This method is potentially very expensive since it may require a
 sort of the bag; don't call it unless you have to.]]>
      </doc>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="other" type="java.lang.Object"/>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.DataOutput"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Write a bag's contents to disk.
 @param out DataOutput to write data to.
 @throws IOException (passes it on from underlying calls).]]>
      </doc>
    </method>
    <method name="readFields"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.DataInput"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Read a bag from disk.
 @param in DataInput to read data from.
 @throws IOException (passes it on from underlying calls).]]>
      </doc>
    </method>
    <method name="markStale"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stale" type="boolean"/>
      <doc>
      <![CDATA[This is used by FuncEvalSpec.FakeDataBag.
 @param stale Set stale state.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Write the bag into a string.]]>
      </doc>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="finalize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Need to override finalize to clean out the mSpillFiles array.]]>
      </doc>
    </method>
    <method name="getSpillFile" return="java.io.DataOutputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Get a file to spill contents to.  The file will be registered in the
 mSpillFiles array.
 @return stream to write tuples to.]]>
      </doc>
    </method>
    <method name="reportProgress"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Report progress to HDFS.]]>
      </doc>
    </method>
    <method name="warn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="msg" type="java.lang.String"/>
      <param name="warningEnum" type="java.lang.Enum"/>
      <param name="e" type="java.lang.Exception"/>
    </method>
    <field name="mContents" type="java.util.Collection"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="mSpillFiles" type="java.util.ArrayList"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="mSize" type="long"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="mMemSizeChanged" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="mMemSize" type="long"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="startBag" type="org.apache.pig.data.Tuple"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="endBag" type="org.apache.pig.data.Tuple"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="MAX_SPILL_FILES" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Default implementation of DataBag.  This is the an abstract class used as a
 parent for all three of the types of data bags.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.data.DefaultAbstractBag -->
  <!-- start class org.apache.pig.data.DefaultAbstractBag.BagDelimiterTuple -->
  <class name="DefaultAbstractBag.BagDelimiterTuple" extends="org.apache.pig.data.DefaultTuple"
    abstract="true"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DefaultAbstractBag.BagDelimiterTuple"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.apache.pig.data.DefaultAbstractBag.BagDelimiterTuple -->
  <!-- start class org.apache.pig.data.DefaultAbstractBag.EndBag -->
  <class name="DefaultAbstractBag.EndBag" extends="org.apache.pig.data.DefaultAbstractBag.BagDelimiterTuple"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DefaultAbstractBag.EndBag"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.apache.pig.data.DefaultAbstractBag.EndBag -->
  <!-- start class org.apache.pig.data.DefaultAbstractBag.StartBag -->
  <class name="DefaultAbstractBag.StartBag" extends="org.apache.pig.data.DefaultAbstractBag.BagDelimiterTuple"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DefaultAbstractBag.StartBag"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.apache.pig.data.DefaultAbstractBag.StartBag -->
  <!-- start class org.apache.pig.data.DefaultBagFactory -->
  <class name="DefaultBagFactory" extends="org.apache.pig.data.BagFactory"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="newDefaultBag" return="org.apache.pig.data.DataBag"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get a default (unordered, not distinct) data bag.]]>
      </doc>
    </method>
    <method name="newDefaultBag" return="org.apache.pig.data.DataBag"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listOfTuples" type="java.util.List"/>
      <doc>
      <![CDATA[Get a default (unordered, not distinct) data bag from
 an existing list of tuples. Note that the bag does NOT
 copy the tuples but uses the provided list as its backing store.
 So it takes ownership of the list.]]>
      </doc>
    </method>
    <method name="newSortedBag" return="org.apache.pig.data.DataBag"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="comp" type="java.util.Comparator"/>
      <doc>
      <![CDATA[Get a sorted data bag.
 @param comp Comparator that controls how the data is sorted.
 If null, default comparator will be used.]]>
      </doc>
    </method>
    <method name="newDistinctBag" return="org.apache.pig.data.DataBag"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get a distinct data bag.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Default implementation of BagFactory.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.data.DefaultBagFactory -->
  <!-- start class org.apache.pig.data.DefaultDataBag -->
  <class name="DefaultDataBag" extends="org.apache.pig.data.DefaultAbstractBag"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DefaultDataBag"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="DefaultDataBag" type="java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This constructor creates a bag out of an existing list
 of tuples by taking ownership of the list and NOT
 copying the contents of the list.
 @param listOfTuples List<Tuple> containing the tuples]]>
      </doc>
    </constructor>
    <method name="isSorted" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isDistinct" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="iterator" return="java.util.Iterator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="spill" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[An unordered collection of Tuples (possibly) with multiples.  The tuples
 are stored in an ArrayList, since there is no concern for order or
 distinctness.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.data.DefaultDataBag -->
  <!-- start class org.apache.pig.data.DefaultTuple -->
  <class name="DefaultTuple" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.data.Tuple"/>
    <constructor name="DefaultTuple"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Default constructor.  This constructor is public so that hadoop can call
 it directly.  However, inside pig you should never be calling this
 function.  Use TupleFactory instead.]]>
      </doc>
    </constructor>
    <method name="reference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <doc>
      <![CDATA[Make this tuple reference the contents of another.  This method does not copy
 the underlying data.   It maintains references to the data from the original
 tuple (and possibly even to the data structure holding the data).
 @param t Tuple to reference.]]>
      </doc>
    </method>
    <method name="size" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Find the size of the tuple.  Used to be called arity().
 @return number of fields in the tuple.]]>
      </doc>
    </method>
    <method name="isNull" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldNum" type="int"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Find out if a given field is null.
 @param fieldNum Number of field to check for null.
 @return true if the field is null, false otherwise.
 @throws ExecException if the field number given is greater
 than or equal to the number of fields in the tuple.]]>
      </doc>
    </method>
    <method name="getType" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldNum" type="int"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Find the type of a given field.
 @param fieldNum Number of field to get the type for.
 @return type, encoded as a byte value.  The values are taken from
 the class DataType.  If the field is null, then DataType.UNKNOWN
 will be returned.
 @throws ExecException if the field number is greater than or equal to
 the number of fields in the tuple.]]>
      </doc>
    </method>
    <method name="get" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldNum" type="int"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Get the value in a given field.
 @param fieldNum Number of the field to get the value for.
 @return value, as an Object.
 @throws ExecException if the field number is greater than or equal to
 the number of fields in the tuple.]]>
      </doc>
    </method>
    <method name="getAll" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get all of the fields in the tuple as a list.
 @return List&lt;Object&gt; containing the fields of the tuple
 in order.]]>
      </doc>
    </method>
    <method name="set"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldNum" type="int"/>
      <param name="val" type="java.lang.Object"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Set the value in a given field.
 @param fieldNum Number of the field to set the value for.
 @param val Object to put in the indicated field.
 @throws ExecException if the field number is greater than or equal to
 the number of fields in the tuple.]]>
      </doc>
    </method>
    <method name="append"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="val" type="java.lang.Object"/>
      <doc>
      <![CDATA[Append a field to a tuple.  This method is not efficient as it may
 force copying of existing data in order to grow the data structure.
 Whenever possible you should construct your Tuple with the
 newTuple(int) method and then fill in the values with set(), rather
 than construct it with newTuple() and append values.
 @param val Object to append to the tuple.]]>
      </doc>
    </method>
    <method name="getMemorySize" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Determine the size of tuple in memory.  This is used by data bags
 to determine their memory size.  This need not be exact, but it
 should be a decent estimation.
 @return estimated memory size.]]>
      </doc>
    </method>
    <method name="toDelimitedString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="delim" type="java.lang.String"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Write a tuple of atomic values into a string.  All values in the
 tuple must be atomic (no bags, tuples, or maps).
 @param delim Delimiter to use in the string.
 @return A string containing the tuple.
 @throws ExecException if a non-atomic value is found.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="compareTo" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="other" type="java.lang.Object"/>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="other" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.DataOutput"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="readFields"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.DataInput"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="isNull" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if this Tuple is null]]>
      </doc>
    </method>
    <method name="setNull"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="isNull" type="boolean"/>
      <doc>
      <![CDATA[@param isNull boolean indicating whether this tuple is null]]>
      </doc>
    </method>
    <field name="isNull" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="mFields" type="java.util.List"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[A default implementation of Tuple.  This class will be created by the
 DefaultTupleFactory.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.data.DefaultTuple -->
  <!-- start class org.apache.pig.data.DefaultTupleFactory -->
  <class name="DefaultTupleFactory" extends="org.apache.pig.data.TupleFactory"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="newTuple" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="newTuple" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="size" type="int"/>
    </method>
    <method name="newTuple" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="c" type="java.util.List"/>
    </method>
    <method name="newTupleNoCopy" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="list" type="java.util.List"/>
    </method>
    <method name="newTuple" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="datum" type="java.lang.Object"/>
    </method>
    <method name="tupleClass" return="java.lang.Class"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Default implementation of TupleFactory.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.data.DefaultTupleFactory -->
  <!-- start class org.apache.pig.data.DistinctDataBag -->
  <class name="DistinctDataBag" extends="org.apache.pig.data.DefaultAbstractBag"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DistinctDataBag"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="isSorted" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isDistinct" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="size" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="iterator" return="java.util.Iterator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="add"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
    </method>
    <method name="addAll"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="org.apache.pig.data.DataBag"/>
    </method>
    <method name="spill" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[An unordered collection of Tuples with no multiples.  Data is
 stored without duplicates as it comes in.  When it is time to spill,
 that data is sorted and written to disk.  It must also be sorted upon
 the first read, otherwise if a spill happened after that the iterators
 would have no way to find their place in the new file.  The data is
 stored in a HashSet.  When it is time to sort it is placed in an
 ArrayList and then sorted.  Dispite all these machinations, this was
 found to be faster than storing it in a TreeSet.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.data.DistinctDataBag -->
  <!-- start class org.apache.pig.data.NonSpillableDataBag -->
  <class name="NonSpillableDataBag" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.data.DataBag"/>
    <constructor name="NonSpillableDataBag"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="NonSpillableDataBag" type="java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This constructor creates a bag out of an existing list
 of tuples by taking ownership of the list and NOT
 copying the contents of the list.
 @param listOfTuples List<Tuple> containing the tuples]]>
      </doc>
    </constructor>
    <method name="isSorted" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isDistinct" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="iterator" return="java.util.Iterator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="reportProgress"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Report progress to HDFS.]]>
      </doc>
    </method>
    <method name="add"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
    </method>
    <method name="addAll"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="org.apache.pig.data.DataBag"/>
    </method>
    <method name="clear"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="markStale"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stale" type="boolean"/>
    </method>
    <method name="size" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getMemorySize" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="spill" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.DataOutput"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Write a bag's contents to disk.
 @param out DataOutput to write data to.
 @throws IOException (passes it on from underlying calls).]]>
      </doc>
    </method>
    <method name="readFields"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.DataInput"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Read a bag from disk.
 @param in DataInput to read data from.
 @throws IOException (passes it on from underlying calls).]]>
      </doc>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
    </method>
    <method name="compareTo" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="other" type="java.lang.Object"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Write the bag into a string.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[An unordered collection of Tuples (possibly) with multiples.  The tuples
 are stored in an ArrayList, since there is no concern for order or
 distinctness. The implicit assumption is that the user of this class
 is storing only those many tuples as will fit in memory - no spilling
 will be done on this bag to disk.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.data.NonSpillableDataBag -->
  <!-- start class org.apache.pig.data.ReadOnceBag -->
  <class name="ReadOnceBag" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.data.DataBag"/>
    <constructor name="ReadOnceBag" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackageLite, java.util.Iterator, java.lang.Object"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This constructor creates a bag out of an existing iterator
 of tuples by taking ownership of the iterator and NOT
 copying the elements of the iterator.
 @param pkg POPackageLite
 @param tupIter Iterator<NullableTuple>
 @param key Object]]>
      </doc>
    </constructor>
    <method name="getMemorySize" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="spill" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="add"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
    </method>
    <method name="addAll"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="org.apache.pig.data.DataBag"/>
    </method>
    <method name="clear"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isDistinct" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isSorted" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="iterator" return="java.util.Iterator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="markStale"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stale" type="boolean"/>
    </method>
    <method name="size" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="readFields"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.DataInput"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.DataOutput"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="compareTo" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="other" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="mTupleFactory" type="org.apache.pig.data.TupleFactory"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[This bag is specifically created for use by POPackageLite. So it has three 
 properties, the NullableTuple iterator, the key (Object) and the keyInfo 
 (Map<Integer, Pair<Boolean, Map<Integer, Integer>>>) all three 
 of which are required in the constructor call. This bag does not store 
 the tuples in memory, but has access to an iterator typically provided by 
 Hadoop. Use this when you already have an iterator over tuples and do not 
 want to copy over again to a new bag.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.data.ReadOnceBag -->
  <!-- start class org.apache.pig.data.SingleTupleBag -->
  <class name="SingleTupleBag" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.data.DataBag"/>
    <constructor name="SingleTupleBag" type="org.apache.pig.data.Tuple"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="add"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
    </method>
    <method name="addAll"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="org.apache.pig.data.DataBag"/>
    </method>
    <method name="clear"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isDistinct" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isSorted" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="iterator" return="java.util.Iterator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="markStale"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stale" type="boolean"/>
    </method>
    <method name="size" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getMemorySize" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="spill" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="readFields"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.DataInput"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.DataOutput"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="compareTo" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Write the bag into a string.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A simple performant implementation of the DataBag
 interface which only holds a single tuple. This will
 be used from POPreCombinerLocalRearrange and wherever else
 a single Tuple non-serializable DataBag is required.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.data.SingleTupleBag -->
  <!-- start class org.apache.pig.data.SortedDataBag -->
  <class name="SortedDataBag" extends="org.apache.pig.data.DefaultAbstractBag"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SortedDataBag" type="java.util.Comparator"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param comp Comparator to use to do the sorting.  If null,
 DefaultComparator will be used.]]>
      </doc>
    </constructor>
    <method name="isSorted" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isDistinct" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="iterator" return="java.util.Iterator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="spill" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[An ordered collection of Tuples (possibly) with multiples.  Data is
 stored unsorted as it comes in, and only sorted when it is time to dump
 it to a file or when the first iterator is requested.  Experementation
 found this to be the faster than storing it sorted to begin with.
 
 We allow a user defined comparator, but provide a default comparator in
 cases where the user doesn't specify one.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.data.SortedDataBag -->
  <!-- start class org.apache.pig.data.TargetedTuple -->
  <class name="TargetedTuple" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.data.Tuple"/>
    <constructor name="TargetedTuple"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="TargetedTuple" type="org.apache.pig.data.Tuple, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.DataOutput"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="readFields"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.DataInput"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toTuple" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTargetOps" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setTargetOps"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="targetOps" type="java.util.List"/>
    </method>
    <method name="append"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="val" type="java.lang.Object"/>
    </method>
    <method name="get" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldNum" type="int"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getAll" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getMemorySize" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getType" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldNum" type="int"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="isNull" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldNum" type="int"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="reference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
    </method>
    <method name="set"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldNum" type="int"/>
      <param name="val" type="java.lang.Object"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="size" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toDelimitedString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="delim" type="java.lang.String"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="compareTo" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="isNull" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if this Tuple is null]]>
      </doc>
    </method>
    <method name="setNull"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="isNull" type="boolean"/>
      <doc>
      <![CDATA[@param isNull boolean indicating whether this tuple is null]]>
      </doc>
    </method>
    <field name="targetOps" type="java.util.List"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="isNull" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[A tuple composed with the operators to which
 it needs be attached]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.data.TargetedTuple -->
  <!-- start class org.apache.pig.data.TimestampedTuple -->
  <class name="TimestampedTuple" extends="org.apache.pig.data.DefaultTuple"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TimestampedTuple" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="TimestampedTuple" type="java.lang.String, java.lang.String, int, java.text.SimpleDateFormat"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getTimeStamp" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setTimeStamp"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="double"/>
    </method>
    <method name="isHeartBeat" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setHeartBeat"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="h" type="boolean"/>
    </method>
    <field name="timestamp" type="double"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="heartbeat" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.data.TimestampedTuple -->
  <!-- start interface org.apache.pig.data.Tuple -->
  <interface name="Tuple"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.hadoop.io.WritableComparable"/>
    <implements name="java.io.Serializable"/>
    <method name="reference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <doc>
      <![CDATA[Make this tuple reference the contents of another.  This method does not copy
 the underlying data.   It maintains references to the data from the original
 tuple (and possibly even to the data structure holding the data).
 @param t Tuple to reference.]]>
      </doc>
    </method>
    <method name="size" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Find the size of the tuple.  Used to be called arity().
 @return number of fields in the tuple.]]>
      </doc>
    </method>
    <method name="isNull" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldNum" type="int"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Find out if a given field is null.
 @param fieldNum Number of field to check for null.
 @return true if the field is null, false otherwise.
 @throws ExecException if the field number given is greater
 than or equal to the number of fields in the tuple.]]>
      </doc>
    </method>
    <method name="getType" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldNum" type="int"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Find the type of a given field.
 @param fieldNum Number of field to get the type for.
 @return type, encoded as a byte value.  The values are taken from
 the class DataType.  If the field is null, then DataType.UNKNOWN
 will be returned.
 @throws ExecException if the field number is greater than or equal to
 the number of fields in the tuple.]]>
      </doc>
    </method>
    <method name="get" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldNum" type="int"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Get the value in a given field.
 @param fieldNum Number of the field to get the value for.
 @return value, as an Object.
 @throws ExecException if the field number is greater than or equal to
 the number of fields in the tuple.]]>
      </doc>
    </method>
    <method name="getAll" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get all of the fields in the tuple as a list.
 @return List&lt;Object&gt; containing the fields of the tuple
 in order.]]>
      </doc>
    </method>
    <method name="set"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldNum" type="int"/>
      <param name="val" type="java.lang.Object"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Set the value in a given field.
 @param fieldNum Number of the field to set the value for.
 @param val Object to put in the indicated field.
 @throws ExecException if the field number is greater than or equal to
 the number of fields in the tuple.]]>
      </doc>
    </method>
    <method name="append"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="val" type="java.lang.Object"/>
      <doc>
      <![CDATA[Append a field to a tuple.  This method is not efficient as it may
 force copying of existing data in order to grow the data structure.
 Whenever possible you should construct your Tuple with the
 newTuple(int) method and then fill in the values with set(), rather
 than construct it with newTuple() and append values.
 @param val Object to append to the tuple.]]>
      </doc>
    </method>
    <method name="getMemorySize" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Determine the size of tuple in memory.  This is used by data bags
 to determine their memory size.  This need not be exact, but it
 should be a decent estimation.
 @return estimated memory size.]]>
      </doc>
    </method>
    <method name="toDelimitedString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="delim" type="java.lang.String"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Write a tuple of atomic values into a string.  All values in the
 tuple must be atomic (no bags, tuples, or maps).
 @param delim Delimiter to use in the string.
 @return A string containing the tuple.
 @throws ExecException if a non-atomic value is found.]]>
      </doc>
    </method>
    <method name="isNull" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if this Tuple is null]]>
      </doc>
    </method>
    <method name="setNull"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="isNull" type="boolean"/>
      <doc>
      <![CDATA[@param isNull boolean indicating whether this tuple is null]]>
      </doc>
    </method>
    <field name="NULL" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Marker for indicating whether the value this object holds
 is a null]]>
      </doc>
    </field>
    <field name="NOTNULL" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Marker for indicating whether the value this object holds
 is not a null]]>
      </doc>
    </field>
    <doc>
    <![CDATA[An ordered list of Data.  A tuple has fields, numbered 0 through
 (number of fields - 1).  The entry in the field can be any datatype,
 or it can be null.

 Tuples are constructed only by a TupleFactory.  A DefaultTupleFactory
 is provided by the system.  If a user wishes to use their own type of
 Tuple, they should also provide an implementation of TupleFactory to
 construct their types of Tuples.

 Fields are numbered from 0.]]>
    </doc>
  </interface>
  <!-- end interface org.apache.pig.data.Tuple -->
  <!-- start class org.apache.pig.data.TupleFactory -->
  <class name="TupleFactory" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TupleFactory"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <method name="getInstance" return="org.apache.pig.data.TupleFactory"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get a reference to the singleton factory.]]>
      </doc>
    </method>
    <method name="newTuple" return="org.apache.pig.data.Tuple"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create an empty tuple.  This should be used as infrequently as
 possible, use newTuple(int) instead.]]>
      </doc>
    </method>
    <method name="newTuple" return="org.apache.pig.data.Tuple"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="size" type="int"/>
      <doc>
      <![CDATA[Create a tuple with size fields.  Whenever possible this is prefered
 over the nullary constructor, as the constructor can preallocate the
 size of the container holding the fields.  Once this is called, it
 is legal to call Tuple.set(x, object), where x &lt; size.
 @param size Number of fields in the tuple.]]>
      </doc>
    </method>
    <method name="newTuple" return="org.apache.pig.data.Tuple"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="c" type="java.util.List"/>
      <doc>
      <![CDATA[Create a tuple from the provided list of objects.  The underlying list
 will be copied.
 @param c List of objects to use as the fields of the tuple.]]>
      </doc>
    </method>
    <method name="newTupleNoCopy" return="org.apache.pig.data.Tuple"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="list" type="java.util.List"/>
      <doc>
      <![CDATA[Create a tuple from a provided list of objects, keeping the provided
 list.  The new tuple will take over ownership of the provided list.
 @param list List of objects that will become the fields of the tuple.]]>
      </doc>
    </method>
    <method name="newTuple" return="org.apache.pig.data.Tuple"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="datum" type="java.lang.Object"/>
      <doc>
      <![CDATA[Create a tuple with a single element.  This is useful because of
 the fact that bags (currently) only take tuples, we often end up
 sticking a single element in a tuple in order to put it in a bag.
 @param datum Datum to put in the tuple.]]>
      </doc>
    </method>
    <method name="tupleClass" return="java.lang.Class"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return the actual class representing a tuple that the implementing
 factory will be returning.  This is needed because hadoop (and
 possibly other systems) we use need to know the exact class we will
 be using for input and output.
 @return Class that implements tuple.]]>
      </doc>
    </method>
    <method name="resetSelf"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Provided for testing purposes only.  This function should never be
 called by anybody but the unit tests.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A factory to construct tuples.  This class is abstract so that users can
 override the tuple factory if they desire to provide their own that
 returns their implementation of a tuple.  If the property
 pig.data.tuple.factory.name is set to a class name and
 pig.data.tuple.factory.jar is set to a URL pointing to a jar that
 contains the above named class, then getInstance() will create a
 a instance of the named class using the indicatd jar.  Otherwise, it
 will create and instance of DefaultTupleFactory.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.data.TupleFactory -->
  <doc>
  <![CDATA[<p>
Data types for Pig.
<p>
This package contains implementations of Pig specific data types as well as
support functions for reading, writing, and using all Pig data types.
<p>
Whenever possible, Pig utilizes Java provided data types.  These include
Integer, Long, Float, Double, Boolean, String, and Map.  Tuple, Bag, and
DataByteArray are implemented in this package.  

<h2> Design </h2>
<p>
The choice was made to utilize Java provided types for two main reasons.  One,
it minimizes the burden on UDF developers, as they will have full access to
these types with no need to convert to and from Pig specific types.  Two,
maintenance costs will be lower as there is no need to implement and maintain
Pig specific data classes.  The drawback is that the only common parent of all
these types is Object.  Thus Pig is often required to treat its data objects
as Objects and then implement static methods to manipulate these Objects,
rather than being able to define a PigDatum class with common funcitons.
<p>
Three data types were implemented as Pig specific classes: 
{@link org.apache.pig.data.DataByteArray}, {@link org.apache.pig.data.Tuple},
and {@link org.apache.pig.data.DataBag}.  
<p>
DataByteArray represents an array of bytes, with no interpretation of those
bytes provided or assumed.  This could have been represented as byte[], but a
separate class was constructed to provide common functions needed to
manipulate these objects.
<p>
Tuple represents an ordered collection of data elements.  Every field in a
tuple can contain any Pig data type.  Tuple is presented as an interface to
allow differing implementations in cases where users have unique
representations of their data that they wish to preserve in their in memory
representations.  The {@link org.apache.pig.data.TupleFactory} is an
abstract class, to enable a user who has defined his own tuples to provide a
factory that creates those tuples.  Default implementations of Tuple and
TupleFactory are provided and used by default. 
<p>
DataBag represents a collection of Tuples.  DataBags can be of default type
(no extra features), sorted (tuples are sorted according to a provided
comparator function), or distinct (no duplicate tuples).  As with Tuple,
DataBag is presented as an interface, and 
{@link org.apache.pig.data.BagFactory} is an abstract class.  Default implementations of DataBag,
BagFactory, and all three types of bags are provided.]]>
  </doc>
</package>
<package name="org.apache.pig.impl">
  <!-- start interface org.apache.pig.impl.FunctionInstantiator -->
  <interface name="FunctionInstantiator"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="instantiateFuncFromAlias" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="alias" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </interface>
  <!-- end interface org.apache.pig.impl.FunctionInstantiator -->
  <!-- start class org.apache.pig.impl.PigContext -->
  <class name="PigContext" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <implements name="org.apache.pig.impl.FunctionInstantiator"/>
    <constructor name="PigContext"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="PigContext" type="org.apache.pig.ExecType, java.util.Properties"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="connect"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="setJobtrackerLocation"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="newLocation" type="java.lang.String"/>
    </method>
    <method name="addJar"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="path" type="java.lang.String"/>
      <exception name="MalformedURLException" type="java.net.MalformedURLException"/>
    </method>
    <method name="addJar"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="resource" type="java.net.URL"/>
      <exception name="MalformedURLException" type="java.net.MalformedURLException"/>
    </method>
    <method name="rename"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="oldName" type="java.lang.String"/>
      <param name="newName" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="copy"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="src" type="java.lang.String"/>
      <param name="dst" type="java.lang.String"/>
      <param name="localDst" type="boolean"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getExecutionEngine" return="org.apache.pig.backend.executionengine.ExecutionEngine"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDfs" return="org.apache.pig.backend.datastorage.DataStorage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLfs" return="org.apache.pig.backend.datastorage.DataStorage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFs" return="org.apache.pig.backend.datastorage.DataStorage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getProperties" return="java.util.Properties"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Provides configuration information.
 
 @return - information about the configuration used to connect to
         execution engine]]>
      </doc>
    </method>
    <method name="getConf" return="java.util.Properties"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use {@link #getProperties()} instead">
      <doc>
      <![CDATA[@deprecated use {@link #getProperties()} instead]]>
      </doc>
    </method>
    <method name="getLastAlias" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setLastAlias"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
    </method>
    <method name="registerFunction"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="function" type="java.lang.String"/>
      <param name="functionSpec" type="org.apache.pig.FuncSpec"/>
      <doc>
      <![CDATA[Defines an alias for the given function spec. This
 is useful for functions that require arguments to the 
 constructor.
 
 @param function - the new function alias to define.
 @param functionSpec - the FuncSpec object representing the name of 
 the function class and any arguments to constructor.]]>
      </doc>
    </method>
    <method name="registerStreamCmd"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="alias" type="java.lang.String"/>
      <param name="command" type="org.apache.pig.impl.streaming.StreamingCommand"/>
      <doc>
      <![CDATA[Defines an alias for the given streaming command.
 
 This is useful for complicated streaming command specs.
 
 @param alias - the new command alias to define.
 @param command - the command]]>
      </doc>
    </method>
    <method name="getExecType" return="org.apache.pig.ExecType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the type of execution currently in effect.
 
 @return current execution type]]>
      </doc>
    </method>
    <method name="createCl" return="java.lang.ClassLoader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jarFile" type="java.lang.String"/>
      <exception name="MalformedURLException" type="java.net.MalformedURLException"/>
      <doc>
      <![CDATA[Creates a Classloader based on the passed jarFile and any extra jar files.
 
 @param jarFile
            the jar file to be part of the newly created Classloader. This jar file plus any
            jars in the extraJars list will constitute the classpath.
 @return the new Classloader.
 @throws MalformedURLException]]>
      </doc>
    </method>
    <method name="resolveClassName" return="java.lang.Class"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="instantiateFuncFromSpec" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="funcSpec" type="org.apache.pig.FuncSpec"/>
    </method>
    <method name="instantiateFuncFromSpec" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="funcSpec" type="java.lang.String"/>
    </method>
    <method name="getClassForAlias" return="java.lang.Class"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="alias" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="instantiateFuncFromAlias" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="alias" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getCommandForAlias" return="org.apache.pig.impl.streaming.StreamingCommand"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="alias" type="java.lang.String"/>
      <doc>
      <![CDATA[Get the {@link StreamingCommand} for the given alias.
 
 @param alias the alias for the <code>StreamingCommand</code>
 @return <code>StreamingCommand</code> for the alias]]>
      </doc>
    </method>
    <method name="setExecType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="execType" type="org.apache.pig.ExecType"/>
    </method>
    <method name="createExecutableManager" return="org.apache.pig.impl.streaming.ExecutableManager"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Create a new {@link ExecutableManager} depending on the ExecType.
 
 @return a new {@link ExecutableManager} depending on the ExecType
 @throws ExecException]]>
      </doc>
    </method>
    <method name="getFuncSpecFromAlias" return="org.apache.pig.FuncSpec"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="alias" type="java.lang.String"/>
    </method>
    <method name="addPathToSkip"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="path" type="java.lang.String"/>
      <doc>
      <![CDATA[Add a path to be skipped while automatically shipping binaries for 
 streaming.
  
 @param path path to be skipped]]>
      </doc>
    </method>
    <method name="getPathsToSkip" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get paths which are to skipped while automatically shipping binaries for
 streaming.
 
 @return paths which are to skipped while automatically shipping binaries 
         for streaming]]>
      </doc>
    </method>
    <method name="getErrorSource" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Check the execution mode and return the appropriate error source
 
 @return error source]]>
      </doc>
    </method>
    <field name="JOB_NAME" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="JOB_NAME_PREFIX" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="extraJars" type="java.util.List"
      transient="true" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="skipJars" type="java.util.Vector"
      transient="true" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="debug" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="inExplain" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.impl.PigContext -->
</package>
<package name="org.apache.pig.impl.builtin">
  <!-- start class org.apache.pig.impl.builtin.FindQuantiles -->
  <class name="FindQuantiles" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FindQuantiles"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="FindQuantiles" type="java.lang.String[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.util.Map"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[first field in the input tuple is the number of quantiles to generate
 second field is the *sorted* bag of samples]]>
      </doc>
    </method>
    <field name="QUANTILES_LIST" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="WEIGHTED_PARTS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.impl.builtin.FindQuantiles -->
  <!-- start class org.apache.pig.impl.builtin.GFAny -->
  <class name="GFAny" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GFAny"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="GFAny" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="java.lang.Integer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <field name="defaultNumGroups" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[built-in grouping function; permits system to choose any grouping.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.builtin.GFAny -->
  <!-- start class org.apache.pig.impl.builtin.GFCross -->
  <class name="GFCross" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GFCross"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.DataBag"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <field name="DEFAULT_PARALLELISM" type="int"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.impl.builtin.GFCross -->
  <!-- start class org.apache.pig.impl.builtin.GFReplicate -->
  <class name="GFReplicate" extends="org.apache.pig.EvalFunc"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GFReplicate"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="GFReplicate" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="exec" return="org.apache.pig.data.DataBag"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.impl.builtin.GFReplicate -->
  <!-- start class org.apache.pig.impl.builtin.RandomSampleLoader -->
  <class name="RandomSampleLoader" extends="org.apache.pig.builtin.BinStorage"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="RandomSampleLoader"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="bindTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <param name="is" type="org.apache.pig.impl.io.BufferedPositionedInputStream"/>
      <param name="offset" type="long"/>
      <param name="end" type="long"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getNext" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="bindTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="os" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <field name="defaultNumSamples" type="int"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.impl.builtin.RandomSampleLoader -->
</package>
<package name="org.apache.pig.impl.io">
  <!-- start class org.apache.pig.impl.io.BufferedPositionedInputStream -->
  <class name="BufferedPositionedInputStream" extends="java.io.InputStream"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="BufferedPositionedInputStream" type="java.io.InputStream, long"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="BufferedPositionedInputStream" type="java.io.InputStream"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="read" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="read" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
      <param name="off" type="int"/>
      <param name="len" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="skip" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="long"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getPosition" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the current position in the tracked InputStream.]]>
      </doc>
    </method>
    <method name="readLine" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="charset" type="java.nio.charset.Charset"/>
      <param name="delimiter" type="byte"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.impl.io.BufferedPositionedInputStream -->
  <!-- start class org.apache.pig.impl.io.FileLocalizer -->
  <class name="FileLocalizer" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FileLocalizer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="openDFSFile" return="java.io.InputStream"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[This function is meant to be used if the mappers/reducers want to access any HDFS file
 @param fileName
 @return InputStream of the open file.
 @throws IOException]]>
      </doc>
    </method>
    <method name="openDFSFile" return="java.io.InputStream"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <param name="properties" type="java.util.Properties"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="open" return="java.io.InputStream"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <param name="execType" type="org.apache.pig.ExecType"/>
      <param name="storage" type="org.apache.pig.backend.datastorage.DataStorage"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[This function returns an input stream to a local file system file or
 a file residing on Hadoop's DFS
 @param fileName The filename to open
 @param execType execType indicating whether executing in local mode or MapReduce mode (Hadoop)
 @param storage The DataStorage object used to open the fileSpec
 @return InputStream to the fileSpec
 @throws IOException]]>
      </doc>
    </method>
    <method name="open" return="java.io.InputStream"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileSpec" type="java.lang.String"/>
      <param name="pigContext" type="org.apache.pig.impl.PigContext"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="create" return="java.io.OutputStream"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileSpec" type="java.lang.String"/>
      <param name="pigContext" type="org.apache.pig.impl.PigContext"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="create" return="java.io.OutputStream"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileSpec" type="java.lang.String"/>
      <param name="append" type="boolean"/>
      <param name="pigContext" type="org.apache.pig.impl.PigContext"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="delete" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileSpec" type="java.lang.String"/>
      <param name="pigContext" type="org.apache.pig.impl.PigContext"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="deleteTempFiles"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTemporaryPath" return="org.apache.pig.backend.datastorage.ElementDescriptor"
      abstract="false" native="false" synchronized="true"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="relative" type="org.apache.pig.backend.datastorage.ElementDescriptor"/>
      <param name="pigContext" type="org.apache.pig.impl.PigContext"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="hadoopify" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="filename" type="java.lang.String"/>
      <param name="pigContext" type="org.apache.pig.impl.PigContext"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="fullPath" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="filename" type="java.lang.String"/>
      <param name="pigContext" type="org.apache.pig.impl.PigContext"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="fileExists" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="filename" type="java.lang.String"/>
      <param name="context" type="org.apache.pig.impl.PigContext"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="fileExists" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="filename" type="java.lang.String"/>
      <param name="store" type="org.apache.pig.backend.datastorage.DataStorage"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="isFile" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="filename" type="java.lang.String"/>
      <param name="context" type="org.apache.pig.impl.PigContext"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="isFile" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="filename" type="java.lang.String"/>
      <param name="store" type="org.apache.pig.backend.datastorage.DataStorage"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="isDirectory" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="filename" type="java.lang.String"/>
      <param name="context" type="org.apache.pig.impl.PigContext"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="isDirectory" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="filename" type="java.lang.String"/>
      <param name="store" type="org.apache.pig.backend.datastorage.DataStorage"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getR" return="java.util.Random"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setR"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="r" type="java.util.Random"/>
    </method>
    <method name="clearDeleteOnFail"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="registerDeleteOnFail"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="filename" type="java.lang.String"/>
      <param name="pigContext" type="org.apache.pig.impl.PigContext"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="triggerDeleteOnFail"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="parseCygPath" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="path" type="java.lang.String"/>
      <param name="style" type="int"/>
      <doc>
      <![CDATA[Convert path from Windows convention to Unix convention. Invoked under
 cygwin.
 
 @param path
            path in Windows convention
 @return path in Unix convention, null if fail]]>
      </doc>
    </method>
    <field name="LOCAL_PREFIX" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="STYLE_UNIX" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="STYLE_WINDOWS" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.impl.io.FileLocalizer -->
  <!-- start class org.apache.pig.impl.io.FileLocalizer.DataStorageInputStreamIterator -->
  <class name="FileLocalizer.DataStorageInputStreamIterator" extends="java.io.InputStream"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FileLocalizer.DataStorageInputStreamIterator" type="org.apache.pig.backend.datastorage.ElementDescriptor[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="read" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="available" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="read" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
      <param name="off" type="int"/>
      <param name="len" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="read" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="skip" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="long"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.impl.io.FileLocalizer.DataStorageInputStreamIterator -->
  <!-- start class org.apache.pig.impl.io.FileSpec -->
  <class name="FileSpec" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <constructor name="FileSpec" type="java.lang.String, org.apache.pig.FuncSpec"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getFileName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFuncSpec" return="org.apache.pig.FuncSpec"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFuncName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSize" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A simple class that specifies a file name and storage function which is used to read/write it]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.io.FileSpec -->
  <!-- start class org.apache.pig.impl.io.NullableBag -->
  <class name="NullableBag" extends="org.apache.pig.impl.io.PigNullableWritable"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="NullableBag"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="NullableBag" type="org.apache.pig.data.DataBag"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param b]]>
      </doc>
    </constructor>
    <method name="getValueAsPigType" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.impl.io.NullableBag -->
  <!-- start class org.apache.pig.impl.io.NullableBooleanWritable -->
  <class name="NullableBooleanWritable" extends="org.apache.pig.impl.io.PigNullableWritable"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="NullableBooleanWritable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="NullableBooleanWritable" type="boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param value]]>
      </doc>
    </constructor>
    <method name="getValueAsPigType" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.impl.io.NullableBooleanWritable -->
  <!-- start class org.apache.pig.impl.io.NullableBytesWritable -->
  <class name="NullableBytesWritable" extends="org.apache.pig.impl.io.PigNullableWritable"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="NullableBytesWritable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="NullableBytesWritable" type="byte[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param bytes]]>
      </doc>
    </constructor>
    <method name="getValueAsPigType" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.impl.io.NullableBytesWritable -->
  <!-- start class org.apache.pig.impl.io.NullableDoubleWritable -->
  <class name="NullableDoubleWritable" extends="org.apache.pig.impl.io.PigNullableWritable"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="NullableDoubleWritable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="NullableDoubleWritable" type="double"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param value]]>
      </doc>
    </constructor>
    <method name="getValueAsPigType" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.impl.io.NullableDoubleWritable -->
  <!-- start class org.apache.pig.impl.io.NullableFloatWritable -->
  <class name="NullableFloatWritable" extends="org.apache.pig.impl.io.PigNullableWritable"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="NullableFloatWritable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="NullableFloatWritable" type="float"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param value]]>
      </doc>
    </constructor>
    <method name="getValueAsPigType" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.impl.io.NullableFloatWritable -->
  <!-- start class org.apache.pig.impl.io.NullableIntWritable -->
  <class name="NullableIntWritable" extends="org.apache.pig.impl.io.PigNullableWritable"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="NullableIntWritable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="NullableIntWritable" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param value]]>
      </doc>
    </constructor>
    <method name="getValueAsPigType" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.impl.io.NullableIntWritable -->
  <!-- start class org.apache.pig.impl.io.NullableLongWritable -->
  <class name="NullableLongWritable" extends="org.apache.pig.impl.io.PigNullableWritable"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="NullableLongWritable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="NullableLongWritable" type="long"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param value]]>
      </doc>
    </constructor>
    <method name="getValueAsPigType" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.impl.io.NullableLongWritable -->
  <!-- start class org.apache.pig.impl.io.NullableText -->
  <class name="NullableText" extends="org.apache.pig.impl.io.PigNullableWritable"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="NullableText"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="NullableText" type="byte[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param utf8]]>
      </doc>
    </constructor>
    <constructor name="NullableText" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param string]]>
      </doc>
    </constructor>
    <method name="getValueAsPigType" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.impl.io.NullableText -->
  <!-- start class org.apache.pig.impl.io.NullableTuple -->
  <class name="NullableTuple" extends="org.apache.pig.impl.io.PigNullableWritable"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="NullableTuple"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="NullableTuple" type="org.apache.pig.data.Tuple"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param t]]>
      </doc>
    </constructor>
    <method name="getValueAsPigType" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.impl.io.NullableTuple -->
  <!-- start class org.apache.pig.impl.io.PigFile -->
  <class name="PigFile" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PigFile" type="java.lang.String, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="PigFile" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="load" return="org.apache.pig.data.DataBag"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="lfunc" type="org.apache.pig.LoadFunc"/>
      <param name="pigContext" type="org.apache.pig.impl.PigContext"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="store"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="data" type="org.apache.pig.data.DataBag"/>
      <param name="sfunc" type="org.apache.pig.StoreFunc"/>
      <param name="pigContext" type="org.apache.pig.impl.PigContext"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.impl.io.PigFile -->
  <!-- start class org.apache.pig.impl.io.PigNullableWritable -->
  <class name="PigNullableWritable" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.hadoop.io.WritableComparable"/>
    <constructor name="PigNullableWritable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="compareTo" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
      <doc>
      <![CDATA[Compare two nullable objects.  Step one is to check if either or both
 are null.  If one is null and the other is not, then the one that is
 null is declared to be less.  If both are null the indices are
 compared.  If neither are null the indices are again compared.  If
 these are equal, finally the values are compared.

 These comparators are used by hadoop as part of the post-map sort, when
 the data is still in object format.]]>
      </doc>
    </method>
    <method name="readFields"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.DataInput"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.DataOutput"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="isNull" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the isNull]]>
      </doc>
    </method>
    <method name="setNull"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="isNull" type="boolean"/>
      <doc>
      <![CDATA[@param isNull the isNull to set]]>
      </doc>
    </method>
    <method name="getIndex" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the index for this value]]>
      </doc>
    </method>
    <method name="setIndex"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="byte"/>
      <doc>
      <![CDATA[@param index for this value.]]>
      </doc>
    </method>
    <method name="getValueAsPigType" return="java.lang.Object"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return The wrapped value as a pig type, not as a WritableComparable.]]>
      </doc>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="arg0" type="java.lang.Object"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="mqFlag" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[indices in multiquery optimized maps
 will have the Most Significant Bit set
 This is a bitmask used in those cases.]]>
      </doc>
    </field>
    <field name="idxSpace" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[regular indices used in group and cogroup
  can only go from 0x00 to 0x7F]]>
      </doc>
    </field>
    <field name="mValue" type="org.apache.hadoop.io.WritableComparable"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[A base class for all types that pig uses to move data between map and
 reduce.  It implements WritableComparable so that compareTo etc. can be
 called.  It also wraps a WritableComparable 'value'.  This is set by each
 different type to be an object of its specific type.
 It also provides a getIndex() and setIndex() calls that are used to get
 and set the index.  These can be used by LocalRearrange, the partitioner,
 and Package to determine the index.
 
 Index and the null indicator are packed into one byte to save space.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.io.PigNullableWritable -->
  <!-- start class org.apache.pig.impl.io.ValidatingInputFileSpec -->
  <class name="ValidatingInputFileSpec" extends="org.apache.pig.impl.io.FileSpec"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ValidatingInputFileSpec" type="org.apache.pig.impl.io.FileSpec, org.apache.pig.backend.datastorage.DataStorage"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </constructor>
    <constructor name="ValidatingInputFileSpec" type="java.lang.String, java.lang.String, org.apache.pig.impl.PigContext"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[If the <code>ExecType</code> of <code>context</code> is LOCAL,
 validation is not performed.]]>
      </doc>
    </constructor>
    <method name="getSlicer" return="org.apache.pig.Slicer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the Slicer created by this spec's funcSpec.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Creates a Slicer using its funcSpec in its construction and checks that it's
 valid.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.io.ValidatingInputFileSpec -->
</package>
<package name="org.apache.pig.impl.logicalLayer">
  <!-- start class org.apache.pig.impl.logicalLayer.BinaryExpressionOperator -->
  <class name="BinaryExpressionOperator" extends="org.apache.pig.impl.logicalLayer.ExpressionOperator"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="BinaryExpressionOperator" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            Logical plan this operator is a part of.
 @param k
            Operator key to assign to this node.
 @param rp
            degree of requested parallelism with which to execute this
            node.]]>
      </doc>
    </constructor>
    <constructor name="BinaryExpressionOperator" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            Logical plan this operator is a part of.
 @param k
            Operator key to assign to this node.]]>
      </doc>
    </constructor>
    <method name="getLhsOperand" return="org.apache.pig.impl.logicalLayer.ExpressionOperator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRhsOperand" return="org.apache.pig.impl.logicalLayer.ExpressionOperator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.logicalLayer.LOVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="clone" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.ExpressionOperator#clone()
 Do not use the clone method directly. Operators are cloned when logical plans
 are cloned using {@link LogicalPlanCloner}]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This abstract class represents the logical Binary Expression Operator
 The binary operator has two operands and an operator. The format of
 the expression is lhs_operand operator rhs_operand. The operator name
 is assumed and can be inferred by the class name]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.BinaryExpressionOperator -->
  <!-- start class org.apache.pig.impl.logicalLayer.CanonicalNamer -->
  <class name="CanonicalNamer" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="CanonicalNamer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNewName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A visitor to walk the logical plan and give canonical names fields.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.CanonicalNamer -->
  <!-- start class org.apache.pig.impl.logicalLayer.DotLOPrinter -->
  <class name="DotLOPrinter" extends="org.apache.pig.impl.plan.DotPlanDumper"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DotLOPrinter" type="org.apache.pig.impl.logicalLayer.LogicalPlan, java.io.PrintStream"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="makeDumper" return="org.apache.pig.impl.plan.DotPlanDumper"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="plan" type="org.apache.pig.impl.logicalLayer.LogicalPlan"/>
      <param name="ps" type="java.io.PrintStream"/>
    </method>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LogicalOperator"/>
    </method>
    <method name="getAttributes" return="java.lang.String[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LogicalOperator"/>
    </method>
    <method name="getMultiInputNestedPlans" return="org.apache.pig.impl.util.MultiMap"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LogicalOperator"/>
    </method>
    <method name="getNestedPlans" return="java.util.Collection"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LogicalOperator"/>
    </method>
    <doc>
    <![CDATA[This class can print a logical plan in the DOT format. It uses
 clusters to illustrate nesting. If "verbose" is off, it will skip
 any nesting.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.DotLOPrinter -->
  <!-- start class org.apache.pig.impl.logicalLayer.ExpressionOperator -->
  <class name="ExpressionOperator" extends="org.apache.pig.impl.logicalLayer.LogicalOperator"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ExpressionOperator" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            Logical plan this operator is a part of.
 @param k
            Operator key to assign to this node.
 @param rp
            degree of requested parallelism with which to execute this
            node.]]>
      </doc>
    </constructor>
    <constructor name="ExpressionOperator" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            Logical plan this operator is a part of.
 @param k
            Operator key to assign to this node.]]>
      </doc>
    </constructor>
    <method name="supportsMultipleOutputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="getFieldSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="setFieldSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fs" type="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"/>
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
      <doc>
      <![CDATA[Set the output schema for this operator. If a schema already exists, an
 attempt will be made to reconcile it with this new schema.
 
 @param fs
            FieldSchema to set.
 @throws FrontendException
             if there is already a schema and the existing schema cannot
             be reconciled with this new schema.]]>
      </doc>
    </method>
    <method name="unsetFieldSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Unset the field schema as if it had not been calculated.  This is used
 by anyone who reorganizes the tree and needs to have schemas
 recalculated.]]>
      </doc>
    </method>
    <method name="regenerateFieldSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="getType" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="clone" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LogicalOperator#clone()
 Do not use the clone method directly. Operators are cloned when logical plans
 are cloned using {@link LogicalPlanCloner}]]>
      </doc>
    </method>
    <field name="mIsFieldSchemaComputed" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="mFieldSchema" type="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.ExpressionOperator -->
  <!-- start class org.apache.pig.impl.logicalLayer.FrontendException -->
  <class name="FrontendException" extends="org.apache.pig.PigException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FrontendException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new FrontendException with null as the error message.]]>
      </doc>
    </constructor>
    <constructor name="FrontendException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new FrontendException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user]]>
      </doc>
    </constructor>
    <constructor name="FrontendException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new FrontendException with the specified cause.

 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="FrontendException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new FrontendException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="FrontendException" type="java.lang.String, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new FrontendException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user]]>
      </doc>
    </constructor>
    <constructor name="FrontendException" type="java.lang.String, int, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new FrontendException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="FrontendException" type="java.lang.String, int, byte"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new FrontendException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source]]>
      </doc>
    </constructor>
    <constructor name="FrontendException" type="java.lang.String, int, byte, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new FrontendException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="FrontendException" type="java.lang.String, int, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new FrontendException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param retry - If the exception is retriable or not]]>
      </doc>
    </constructor>
    <constructor name="FrontendException" type="java.lang.String, int, byte, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new FrontendException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source 
 @param retry - If the exception is retriable or not]]>
      </doc>
    </constructor>
    <constructor name="FrontendException" type="java.lang.String, int, byte, boolean, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new FrontendException with the specified message, error code, error source, retriable or not, detalied message for the developer and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source 
 @param retry - If the exception is retriable or not
 @param detailedMsg - The detailed message shown to the developer]]>
      </doc>
    </constructor>
    <constructor name="FrontendException" type="java.lang.String, int, byte, boolean, java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new FrontendException with the specified message, error code, error source, retriable or not, detalied message for the developer and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source 
 @param retry - If the exception is retriable or not
 @param detailedMsg - The detailed message shown to the developer 
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.FrontendException -->
  <!-- start class org.apache.pig.impl.logicalLayer.LOAdd -->
  <class name="LOAdd" extends="org.apache.pig.impl.logicalLayer.BinaryExpressionOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LOAdd" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            Logical plan this operator is a part of.
 @param k
            Operator key to assign to this node.]]>
      </doc>
    </constructor>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFieldSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.logicalLayer.LOVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LOAdd -->
  <!-- start class org.apache.pig.impl.logicalLayer.LOAnd -->
  <class name="LOAnd" extends="org.apache.pig.impl.logicalLayer.BinaryExpressionOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LOAnd" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            Logical plan this operator is a part of.
 @param k
            Operator key to assign to this node.]]>
      </doc>
    </constructor>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFieldSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.logicalLayer.LOVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LOAnd -->
  <!-- start class org.apache.pig.impl.logicalLayer.LOBinCond -->
  <class name="LOBinCond" extends="org.apache.pig.impl.logicalLayer.ExpressionOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LOBinCond" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            Logical plan this operator is a part of.
 @param k
            Operator key to assign to this node.]]>
      </doc>
    </constructor>
    <method name="getCond" return="org.apache.pig.impl.logicalLayer.ExpressionOperator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLhsOp" return="org.apache.pig.impl.logicalLayer.ExpressionOperator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRhsOp" return="org.apache.pig.impl.logicalLayer.ExpressionOperator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.logicalLayer.LOVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="getFieldSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="clone" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.ExpressionOperator#clone()
 Do not use the clone method directly. Operators are cloned when logical plans
 are cloned using {@link LogicalPlanCloner}]]>
      </doc>
    </method>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LOBinCond -->
  <!-- start class org.apache.pig.impl.logicalLayer.LOCast -->
  <class name="LOCast" extends="org.apache.pig.impl.logicalLayer.ExpressionOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LOCast" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey, byte"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            Logical plan this operator is a part of.
 @param k
            Operator key to assign to this node.
 @param type
            the type to which the expression is cast]]>
      </doc>
    </constructor>
    <method name="getExpression" return="org.apache.pig.impl.logicalLayer.ExpressionOperator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.logicalLayer.LOVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFieldSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLoadFuncSpec" return="org.apache.pig.FuncSpec"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setLoadFuncSpec"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="loadFuncSpec" type="org.apache.pig.FuncSpec"/>
    </method>
    <method name="clone" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.ExpressionOperator#clone()
 Do not use the clone method directly. Operators are cloned when logical plans
 are cloned using {@link LogicalPlanCloner}]]>
      </doc>
    </method>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LOCast -->
  <!-- start class org.apache.pig.impl.logicalLayer.LOCogroup -->
  <class name="LOCogroup" extends="org.apache.pig.impl.logicalLayer.LogicalOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LOCogroup" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey, org.apache.pig.impl.util.MultiMap, boolean[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            LogicalPlan this operator is a part of.
 @param k
            OperatorKey for this operator
 @param groupByPlans
            the group by columns
 @param isInner
            indicates whether the cogroup is inner for each relation]]>
      </doc>
    </constructor>
    <method name="getInputs" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getGroupByPlans" return="org.apache.pig.impl.util.MultiMap"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setGroupByPlans"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="groupByPlans" type="org.apache.pig.impl.util.MultiMap"/>
    </method>
    <method name="getInner" return="boolean[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setInner"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="inner" type="boolean[]"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="isTupleGroupCol" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.logicalLayer.LOVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="switchGroupByPlanOp"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="oldOp" type="org.apache.pig.impl.logicalLayer.LogicalOperator"/>
      <param name="newOp" type="org.apache.pig.impl.logicalLayer.LogicalOperator"/>
      <doc>
      <![CDATA[This does switch the mapping

 oldOp -> List of inner plans
         to
 newOp -> List of inner plans

 which is useful when there is a structural change in LogicalPlan

 @param oldOp the old operator
 @param newOp the new operator]]>
      </doc>
    </method>
    <method name="unsetSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="getAtomicGroupByType" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
      <doc>
      <![CDATA[This can be used to get the merged type of output group col
 only when the group col is of atomic type
 TODO: This doesn't work with group by complex type
 @return The type of the group by]]>
      </doc>
    </method>
    <method name="getTupleGroupBySchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="clone" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LogicalOperator#clone()
 Do not use the clone method directly. Operators are cloned when logical plans
 are cloned using {@link LogicalPlanCloner}]]>
      </doc>
    </method>
    <method name="getProjectionMap" return="org.apache.pig.impl.plan.ProjectionMap"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRequiredFields" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LOCogroup -->
  <!-- start class org.apache.pig.impl.logicalLayer.LOConst -->
  <class name="LOConst" extends="org.apache.pig.impl.logicalLayer.ExpressionOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LOConst" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey, java.lang.Object"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            Logical plan this operator is a part of.
 @param k
            Operator key to assign to this node.
 @param value
            the value of the constant]]>
      </doc>
    </constructor>
    <method name="getValue" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.logicalLayer.LOVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFieldSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleOutputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="clone" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.ExpressionOperator#clone()
 Do not use the clone method directly. Operators are cloned when logical plans
 are cloned using {@link LogicalPlanCloner}]]>
      </doc>
    </method>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LOConst -->
  <!-- start class org.apache.pig.impl.logicalLayer.LOCross -->
  <class name="LOCross" extends="org.apache.pig.impl.logicalLayer.LogicalOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LOCross" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            Logical plan this operator is a part of.
 @param k
            Operator key to assign to this node.]]>
      </doc>
    </constructor>
    <method name="getInputs" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.logicalLayer.LOVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="getType" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getProjectionMap" return="org.apache.pig.impl.plan.ProjectionMap"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRequiredFields" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LOCross -->
  <!-- start class org.apache.pig.impl.logicalLayer.LODefine -->
  <class name="LODefine" extends="org.apache.pig.impl.logicalLayer.LogicalOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LODefine" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.logicalLayer.LOVisitor"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LODefine -->
  <!-- start class org.apache.pig.impl.logicalLayer.LODistinct -->
  <class name="LODistinct" extends="org.apache.pig.impl.logicalLayer.LogicalOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LODistinct" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            Logical plan this operator is a part of.
 @param k
            Operator key to assign to this node.]]>
      </doc>
    </constructor>
    <method name="getInput" return="org.apache.pig.impl.logicalLayer.LogicalOperator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.logicalLayer.LOVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="getType" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="clone" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LogicalOperator#clone()
 Do not use the clone method directly. Operators are cloned when logical plans
 are cloned using {@link LogicalPlanCloner}]]>
      </doc>
    </method>
    <method name="getProjectionMap" return="org.apache.pig.impl.plan.ProjectionMap"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRequiredFields" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LODistinct -->
  <!-- start class org.apache.pig.impl.logicalLayer.LODivide -->
  <class name="LODivide" extends="org.apache.pig.impl.logicalLayer.BinaryExpressionOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LODivide" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            Logical plan this operator is a part of.
 @param k
            Operator key to assign to this node.]]>
      </doc>
    </constructor>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFieldSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.logicalLayer.LOVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LODivide -->
  <!-- start class org.apache.pig.impl.logicalLayer.LOEqual -->
  <class name="LOEqual" extends="org.apache.pig.impl.logicalLayer.BinaryExpressionOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LOEqual" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            Logical plan this operator is a part of.
 @param k
            Operator key to assign to this node.]]>
      </doc>
    </constructor>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFieldSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.logicalLayer.LOVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LOEqual -->
  <!-- start class org.apache.pig.impl.logicalLayer.LOFilter -->
  <class name="LOFilter" extends="org.apache.pig.impl.logicalLayer.LogicalOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LOFilter" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey, org.apache.pig.impl.logicalLayer.LogicalPlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            Logical plan this operator is a part of.
 @param k
            Operator key to assign to this node.
 @param comparisonPlan
            the filter condition]]>
      </doc>
    </constructor>
    <method name="getInput" return="org.apache.pig.impl.logicalLayer.LogicalOperator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getComparisonPlan" return="org.apache.pig.impl.logicalLayer.LogicalPlan"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.logicalLayer.LOVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="getType" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="unsetSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="clone" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.plan.Operator#clone()
 Do not use the clone method directly. Operators are cloned when logical plans
 are cloned using {@link LogicalPlanCloner}]]>
      </doc>
    </method>
    <method name="getProjectionMap" return="org.apache.pig.impl.plan.ProjectionMap"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRequiredFields" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LOFilter -->
  <!-- start class org.apache.pig.impl.logicalLayer.LOForEach -->
  <class name="LOForEach" extends="org.apache.pig.impl.logicalLayer.LogicalOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LOForEach" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey, java.util.ArrayList, java.util.ArrayList"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            Logical plan this operator is a part of.
 @param k
            Operator key to assign to this node.
 @param foreachPlans
            the list of plans that are applied for each input
 @param flattenList
            boolean list that tells which elements of the foreach
            projection should be flattened.]]>
      </doc>
    </constructor>
    <constructor name="LOForEach" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getForEachPlans" return="java.util.ArrayList"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setForEachPlans"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="foreachPlans" type="java.util.ArrayList"/>
    </method>
    <method name="getFlatten" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setFlatten"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="flattenList" type="java.util.ArrayList"/>
    </method>
    <method name="getUserDefinedSchema" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setUserDefinedSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userDefinedSchema" type="java.util.ArrayList"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.logicalLayer.LOVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="getType" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="unsetSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="clone" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.plan.Operator#clone()
 Do not use the clone method directly. Operators are cloned when logical plans
 are cloned using {@link LogicalPlanCloner}]]>
      </doc>
    </method>
    <method name="getProjectionMap" return="org.apache.pig.impl.plan.ProjectionMap"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRequiredFields" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LOForEach -->
  <!-- start class org.apache.pig.impl.logicalLayer.LOFRJoin -->
  <class name="LOFRJoin" extends="org.apache.pig.impl.logicalLayer.LogicalOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LOFRJoin" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey, org.apache.pig.impl.util.MultiMap, boolean[], org.apache.pig.impl.logicalLayer.LogicalOperator"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="getJoinColPlans" return="org.apache.pig.impl.util.MultiMap"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="switchJoinColPlanOp"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="oldOp" type="org.apache.pig.impl.logicalLayer.LogicalOperator"/>
      <param name="newOp" type="org.apache.pig.impl.logicalLayer.LogicalOperator"/>
    </method>
    <method name="unsetSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="getInputs" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.logicalLayer.LOVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFragOp" return="org.apache.pig.impl.logicalLayer.LogicalOperator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setFragOp"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fragOp" type="org.apache.pig.impl.logicalLayer.LogicalOperator"/>
    </method>
    <method name="isTupleJoinCol" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAtomicJoinColType" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="getTupleJoinColSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="getProjectionMap" return="org.apache.pig.impl.plan.ProjectionMap"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRequiredFields" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[This is the logical operator for the Fragment Replicate Join
 It holds the user specified information and is responsible for 
 the schema computation. This mimics the LOCogroup operator except
 the schema computation.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LOFRJoin -->
  <!-- start class org.apache.pig.impl.logicalLayer.LOGenerate -->
  <class name="LOGenerate" extends="org.apache.pig.impl.logicalLayer.LogicalOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LOGenerate" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey, java.util.ArrayList, java.util.ArrayList"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            Logical plan this operator is a part of.
 @param key
            Operator key to assign to this node.
 @param generatePlans
            Plans for each projection element
 @param flatten
            Whether to flatten each projection element]]>
      </doc>
    </constructor>
    <constructor name="LOGenerate" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="LOGenerate" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey, org.apache.pig.impl.logicalLayer.LogicalPlan, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            Logical plan this operator is a part of.
 @param key
            Operator key to assign to this node.
 @param generatePlan
            the projection of the generate
 @param flatten
            whether the result needs to be flattened]]>
      </doc>
    </constructor>
    <method name="getGeneratePlans" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFlatten" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getUserDefinedSchema" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.logicalLayer.LOVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="clone" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LOGenerate -->
  <!-- start class org.apache.pig.impl.logicalLayer.LogicalOperator -->
  <class name="LogicalOperator" extends="org.apache.pig.impl.plan.Operator"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LogicalOperator" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Equivalent to LogicalOperator(k, 0).
 
 @param plan
            Logical plan this operator is a part of.
 @param k
            Operator key to assign to this node.]]>
      </doc>
    </constructor>
    <constructor name="LogicalOperator" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            Logical plan this operator is a part of.
 @param k Operator key to assign to this node.
 @param rp degree of requested parallelism with which to execute this
            node.]]>
      </doc>
    </constructor>
    <method name="getOperatorKey" return="org.apache.pig.impl.plan.OperatorKey"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the operator key for this operator.]]>
      </doc>
    </method>
    <method name="setSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="schema" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
      <doc>
      <![CDATA[Set the output schema for this operator. If a schema already exists, an
 attempt will be made to reconcile it with this new schema.
 
 @param schema
            Schema to set.
 @throws ParseException
             if there is already a schema and the existing schema cannot
             be reconciled with this new schema.]]>
      </doc>
    </method>
    <method name="forceSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="schema" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
      <doc>
      <![CDATA[Directly force the schema without reconcilation
 Please use with great care
 @param schema]]>
      </doc>
    </method>
    <method name="unsetSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[Unset the schema as if it had not been calculated.  This is used by
 anyone who reorganizes the tree and needs to have schemas recalculated.]]>
      </doc>
    </method>
    <method name="regenerateSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="setCanonicalNames"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Calculate canonical names for all fields in the schema.  This should
 only be used for loads or other operators that create all new fields.]]>
      </doc>
    </method>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
      <doc>
      <![CDATA[Get a copy of the schema for the output of this operator.]]>
      </doc>
    </method>
    <method name="setType"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="byte"/>
      <doc>
      <![CDATA[Set the type of this operator. This should only be called by the type
 checking routines.
 
 @param t 
            Type to set this operator to.]]>
      </doc>
    </method>
    <method name="getType" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the type of this operator.]]>
      </doc>
    </method>
    <method name="getAlias" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setAlias"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="newAlias" type="java.lang.String"/>
    </method>
    <method name="getRequestedParallelism" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setRequestedParallelism"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="newRequestedParallelism" type="int"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="reconcileSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="schema" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
      <exception name="ParseException" type="org.apache.pig.impl.logicalLayer.parser.ParseException"/>
      <doc>
      <![CDATA[Given a schema, reconcile it with our existing schema.
 
 @param schema
            Schema to reconcile with the existing.
 @throws ParseException
             if the reconciliation is not possible.]]>
      </doc>
    </method>
    <method name="visit"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.logicalLayer.LOVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[Visit this node with the provided visitor. This should only be called by
 the visitor class itself, never directly.
 
 @param v
            Visitor to visit with.
 @throws VisitException
             if the visitor has a problem.]]>
      </doc>
    </method>
    <method name="getPlan" return="org.apache.pig.impl.logicalLayer.LogicalPlan"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setPlan"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="plan" type="org.apache.pig.impl.logicalLayer.LogicalPlan"/>
      <doc>
      <![CDATA[Change the reference to the plan for this operator.  Don't use this
 unless you're sure you know what you're doing.]]>
      </doc>
    </method>
    <method name="setSchemaComputed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="computed" type="boolean"/>
      <doc>
      <![CDATA[IMPORTANT:
 This method is only used for unit testing purpose.]]>
      </doc>
    </method>
    <method name="supportsMultipleOutputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="clone" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.plan.Operator#clone()
 Do not use the clone method directly. Operators are cloned when logical plans
 are cloned using {@link LogicalPlanCloner}]]>
      </doc>
    </method>
    <method name="getProjectionMap" return="org.apache.pig.impl.plan.ProjectionMap"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Produce a map describing how this operator modifies its projection.
 @return ProjectionMap null indicates it does not know how the projection
 changes, for example a join of two inputs where one input does not have
 a schema.]]>
      </doc>
    </method>
    <method name="getRequiredFields" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get a list of fields that this operator requires. This is not necessarily
 equivalent to the list of fields the operator projects. For example, a
 filter will project anything passed to it, but requires only the fields
 explicitly referenced in its filter expression.
 
 @return list of RequiredFields null indicates that the operator does not need any
         fields from its input.]]>
      </doc>
    </method>
    <field name="mSchema" type="org.apache.pig.impl.logicalLayer.schema.Schema"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Schema that defines the output of this operator.]]>
      </doc>
    </field>
    <field name="mIsSchemaComputed" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A boolean variable to remember if the schema has been computed]]>
      </doc>
    </field>
    <field name="mType" type="byte"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Datatype of this output of this operator. Operators start out with data
 type set to UNKNOWN, and have it set for them by the type checker.]]>
      </doc>
    </field>
    <field name="mRequestedParallelism" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Requested level of parallelism for this operation.]]>
      </doc>
    </field>
    <field name="mAlias" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Name of the record set that results from this operator.]]>
      </doc>
    </field>
    <field name="mPlan" type="org.apache.pig.impl.logicalLayer.LogicalPlan"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Logical plan that this operator is a part of.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Parent for all Logical operators.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LogicalOperator -->
  <!-- start class org.apache.pig.impl.logicalLayer.LogicalPlan -->
  <class name="LogicalPlan" extends="org.apache.pig.impl.plan.OperatorPlan"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LogicalPlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getSingleLeafPlanOutputOp" return="org.apache.pig.impl.logicalLayer.LogicalOperator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSingleLeafPlanOutputType" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="explain"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.OutputStream"/>
      <param name="ps" type="java.io.PrintStream"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="explain"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ps" type="java.io.PrintStream"/>
      <param name="format" type="java.lang.String"/>
      <param name="verbose" type="boolean"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="clone" return="org.apache.pig.impl.logicalLayer.LogicalPlan"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
      <doc>
      <![CDATA[Do not use the clone method directly. Use {@link LogicalPlanCloner} instead.]]>
      </doc>
    </method>
    <method name="chainOfProjects" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="plan" type="org.apache.pig.impl.logicalLayer.LogicalPlan"/>
      <doc>
      <![CDATA[A utility method to check if a plan contains a chain of projection
 operators
 
 @param plan
            input plan
 @return true if there is a chain of projection operators; false otherwise]]>
      </doc>
    </method>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LogicalPlan -->
  <!-- start class org.apache.pig.impl.logicalLayer.LogicalPlanBuilder -->
  <class name="LogicalPlanBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LogicalPlanBuilder" type="org.apache.pig.impl.PigContext"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="parse" return="org.apache.pig.impl.logicalLayer.LogicalPlan"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="scope" type="java.lang.String"/>
      <param name="query" type="java.lang.String"/>
      <param name="aliases" type="java.util.Map"/>
      <param name="opTable" type="java.util.Map"/>
      <param name="aliasOp" type="java.util.Map"/>
      <param name="fileNameMap" type="java.util.Map"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="ParseException" type="org.apache.pig.impl.logicalLayer.parser.ParseException"/>
    </method>
    <method name="parse" return="org.apache.pig.impl.logicalLayer.LogicalPlan"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="scope" type="java.lang.String"/>
      <param name="query" type="java.lang.String"/>
      <param name="aliases" type="java.util.Map"/>
      <param name="opTable" type="java.util.Map"/>
      <param name="aliasOp" type="java.util.Map"/>
      <param name="start" type="int"/>
      <param name="fileNameMap" type="java.util.Map"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="ParseException" type="org.apache.pig.impl.logicalLayer.parser.ParseException"/>
    </method>
    <field name="classloader" type="java.lang.ClassLoader"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[PlanBuilder class outputs a logical plan given a query String and set of ValidIDs]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LogicalPlanBuilder -->
  <!-- start class org.apache.pig.impl.logicalLayer.LogicalPlanCloneHelper -->
  <class name="LogicalPlanCloneHelper" extends="org.apache.pig.impl.logicalLayer.LOVisitor"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LogicalPlanCloneHelper" type="org.apache.pig.impl.logicalLayer.LogicalPlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
      <doc>
      <![CDATA[@param plan logical plan to be cloned]]>
      </doc>
    </constructor>
    <constructor name="LogicalPlanCloneHelper" type="org.apache.pig.impl.logicalLayer.LogicalPlan, java.util.Map"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
      <doc>
      <![CDATA[@param plan
 @param origCloneMap the lookup table used for tracking operators cloned in the plan]]>
      </doc>
    </constructor>
    <method name="getClonedPlan" return="org.apache.pig.impl.logicalLayer.LogicalPlan"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
    </method>
    <method name="resetState"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="binOp" type="org.apache.pig.impl.logicalLayer.BinaryExpressionOperator"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOAdd"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LOVisitor#visit(org.apache.pig.impl.logicalLayer.LOAdd)]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="binOp" type="org.apache.pig.impl.logicalLayer.LOAnd"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LOVisitor#visit(org.apache.pig.impl.logicalLayer.LOAnd)]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="binCond" type="org.apache.pig.impl.logicalLayer.LOBinCond"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LOVisitor#visit(org.apache.pig.impl.logicalLayer.LOBinCond)]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="cast" type="org.apache.pig.impl.logicalLayer.LOCast"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LOVisitor#visit(org.apache.pig.impl.logicalLayer.LOCast)]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="cg" type="org.apache.pig.impl.logicalLayer.LOCogroup"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LOVisitor#visit(org.apache.pig.impl.logicalLayer.LOCogroup)]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="constant" type="org.apache.pig.impl.logicalLayer.LOConst"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LOVisitor#visit(org.apache.pig.impl.logicalLayer.LOConst)]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="cs" type="org.apache.pig.impl.logicalLayer.LOCross"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LOVisitor#visit(org.apache.pig.impl.logicalLayer.LOCross)]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="dt" type="org.apache.pig.impl.logicalLayer.LODistinct"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LOVisitor#visit(org.apache.pig.impl.logicalLayer.LODistinct)]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LODivide"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LOVisitor#visit(org.apache.pig.impl.logicalLayer.LODivide)]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOEqual"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LOVisitor#visit(org.apache.pig.impl.logicalLayer.LOEqual)]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="filter" type="org.apache.pig.impl.logicalLayer.LOFilter"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LOVisitor#visit(org.apache.pig.impl.logicalLayer.LOFilter)]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="forEach" type="org.apache.pig.impl.logicalLayer.LOForEach"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LOVisitor#visit(org.apache.pig.impl.logicalLayer.LOForEach)]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="g" type="org.apache.pig.impl.logicalLayer.LOGenerate"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LOVisitor#visit(org.apache.pig.impl.logicalLayer.LOGenerate)]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LogicalOperator"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LOVisitor#visit(org.apache.pig.impl.logicalLayer.LogicalOperator)]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOGreaterThan"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LOVisitor#visit(org.apache.pig.impl.logicalLayer.LOGreaterThan)]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOGreaterThanEqual"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LOVisitor#visit(org.apache.pig.impl.logicalLayer.LOGreaterThanEqual)]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="uniOp" type="org.apache.pig.impl.logicalLayer.LOIsNull"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LOVisitor#visit(org.apache.pig.impl.logicalLayer.LOIsNull)]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOLesserThan"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LOVisitor#visit(org.apache.pig.impl.logicalLayer.LOLesserThan)]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOLesserThanEqual"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LOVisitor#visit(org.apache.pig.impl.logicalLayer.LOLesserThanEqual)]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="limOp" type="org.apache.pig.impl.logicalLayer.LOLimit"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LOVisitor#visit(org.apache.pig.impl.logicalLayer.LOLimit)]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="load" type="org.apache.pig.impl.logicalLayer.LOLoad"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LOVisitor#visit(org.apache.pig.impl.logicalLayer.LOLoad)]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOMapLookup"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LOVisitor#visit(org.apache.pig.impl.logicalLayer.LOMapLookup)]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOMod"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LOVisitor#visit(org.apache.pig.impl.logicalLayer.LOMod)]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOMultiply"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LOVisitor#visit(org.apache.pig.impl.logicalLayer.LOMultiply)]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LONegative"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LOVisitor#visit(org.apache.pig.impl.logicalLayer.LONegative)]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="uniOp" type="org.apache.pig.impl.logicalLayer.LONot"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LOVisitor#visit(org.apache.pig.impl.logicalLayer.LONot)]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LONotEqual"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LOVisitor#visit(org.apache.pig.impl.logicalLayer.LONotEqual)]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="binOp" type="org.apache.pig.impl.logicalLayer.LOOr"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LOVisitor#visit(org.apache.pig.impl.logicalLayer.LOOr)]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="project" type="org.apache.pig.impl.logicalLayer.LOProject"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LOVisitor#visit(org.apache.pig.impl.logicalLayer.LOProject)]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="binOp" type="org.apache.pig.impl.logicalLayer.LORegexp"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LOVisitor#visit(org.apache.pig.impl.logicalLayer.LORegexp)]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="s" type="org.apache.pig.impl.logicalLayer.LOSort"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LOVisitor#visit(org.apache.pig.impl.logicalLayer.LOSort)]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="split" type="org.apache.pig.impl.logicalLayer.LOSplit"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LOVisitor#visit(org.apache.pig.impl.logicalLayer.LOSplit)]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="sop" type="org.apache.pig.impl.logicalLayer.LOSplitOutput"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LOVisitor#visit(org.apache.pig.impl.logicalLayer.LOSplitOutput)]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="store" type="org.apache.pig.impl.logicalLayer.LOStore"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LOVisitor#visit(org.apache.pig.impl.logicalLayer.LOStore)]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="stream" type="org.apache.pig.impl.logicalLayer.LOStream"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LOVisitor#visit(org.apache.pig.impl.logicalLayer.LOStream)]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOSubtract"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LOVisitor#visit(org.apache.pig.impl.logicalLayer.LOSubtract)]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="u" type="org.apache.pig.impl.logicalLayer.LOUnion"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LOVisitor#visit(org.apache.pig.impl.logicalLayer.LOUnion)]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="func" type="org.apache.pig.impl.logicalLayer.LOUserFunc"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LOVisitor#visit(org.apache.pig.impl.logicalLayer.LOUserFunc)]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="uniOp" type="org.apache.pig.impl.logicalLayer.UnaryExpressionOperator"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LOVisitor#visit(org.apache.pig.impl.logicalLayer.UnaryExpressionOperator)]]>
      </doc>
    </method>
    <field name="mOpToCloneMap" type="java.util.Map"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[LogicalPlanCloneHelper implements a visitor mechanism to clone a logical plan
 and then patch up the connections held within the operators of the logical plan.
 This class should not be used for cloning the logical plan. Use {@link LogicalPlanCloner}
 instead.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LogicalPlanCloneHelper -->
  <!-- start class org.apache.pig.impl.logicalLayer.LogicalPlanCloner -->
  <class name="LogicalPlanCloner" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LogicalPlanCloner" type="org.apache.pig.impl.logicalLayer.LogicalPlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan logical plan to be cloned]]>
      </doc>
    </constructor>
    <method name="getClonedPlan" return="org.apache.pig.impl.logicalLayer.LogicalPlan"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
    </method>
    <doc>
    <![CDATA[LogicalPlanCloner provides the only mechanism of cloning a logical plan and hence the
 the logical operators in the plan.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LogicalPlanCloner -->
  <!-- start class org.apache.pig.impl.logicalLayer.LOGreaterThan -->
  <class name="LOGreaterThan" extends="org.apache.pig.impl.logicalLayer.BinaryExpressionOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LOGreaterThan" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            Logical plan this operator is a part of.
 @param k
            Operator key to assign to this node.]]>
      </doc>
    </constructor>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFieldSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.logicalLayer.LOVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LOGreaterThan -->
  <!-- start class org.apache.pig.impl.logicalLayer.LOGreaterThanEqual -->
  <class name="LOGreaterThanEqual" extends="org.apache.pig.impl.logicalLayer.BinaryExpressionOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LOGreaterThanEqual" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            Logical plan this operator is a part of.
 @param k
            Operator key to assign to this node.]]>
      </doc>
    </constructor>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFieldSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.logicalLayer.LOVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LOGreaterThanEqual -->
  <!-- start class org.apache.pig.impl.logicalLayer.LOIsNull -->
  <class name="LOIsNull" extends="org.apache.pig.impl.logicalLayer.UnaryExpressionOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LOIsNull" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            Logical plan this operator is a part of.
 @param k
            Operator key to assign to this node.]]>
      </doc>
    </constructor>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFieldSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.logicalLayer.LOVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LOIsNull -->
  <!-- start class org.apache.pig.impl.logicalLayer.LOLesserThan -->
  <class name="LOLesserThan" extends="org.apache.pig.impl.logicalLayer.BinaryExpressionOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LOLesserThan" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            Logical plan this operator is a part of.
 @param k
            Operator key to assign to this node.]]>
      </doc>
    </constructor>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFieldSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.logicalLayer.LOVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LOLesserThan -->
  <!-- start class org.apache.pig.impl.logicalLayer.LOLesserThanEqual -->
  <class name="LOLesserThanEqual" extends="org.apache.pig.impl.logicalLayer.BinaryExpressionOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LOLesserThanEqual" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            Logical plan this operator is a part of.
 @param k
            Operator key to assign to this node.]]>
      </doc>
    </constructor>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFieldSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.logicalLayer.LOVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LOLesserThanEqual -->
  <!-- start class org.apache.pig.impl.logicalLayer.LOLimit -->
  <class name="LOLimit" extends="org.apache.pig.impl.logicalLayer.LogicalOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LOLimit" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey, long"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            Logical plan this operator is a part of.
 @param k
            Operator key to assign to this node.
 @param limit
            Number of limited outputs]]>
      </doc>
    </constructor>
    <method name="getInput" return="org.apache.pig.impl.logicalLayer.LogicalOperator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLimit" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setLimit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="limit" type="long"/>
    </method>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleOutputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.logicalLayer.LOVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="getType" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="duplicate" return="org.apache.pig.impl.logicalLayer.LOLimit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="clone" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.plan.Operator#clone()
 Do not use the clone method directly. Operators are cloned when logical plans
 are cloned using {@link LogicalPlanCloner}]]>
      </doc>
    </method>
    <method name="getProjectionMap" return="org.apache.pig.impl.plan.ProjectionMap"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRequiredFields" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LOLimit -->
  <!-- start class org.apache.pig.impl.logicalLayer.LOLoad -->
  <class name="LOLoad" extends="org.apache.pig.impl.logicalLayer.LogicalOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LOLoad" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey, org.apache.pig.impl.io.FileSpec, org.apache.pig.ExecType, org.apache.pig.backend.datastorage.DataStorage, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[@param plan
            LogicalPlan this operator is a part of.
 @param key
            OperatorKey for this operator
 @param inputFileSpec
            the file to be loaded *
 @param execType
            the execution mode @see org.apache.pig.ExecType
 @param storage
            the underlying storage
 @param splittable
            if the input file is splittable (.gz is not)]]>
      </doc>
    </constructor>
    <method name="getInputFile" return="org.apache.pig.impl.io.FileSpec"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setInputFile"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="inputFileSpec" type="org.apache.pig.impl.io.FileSpec"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getSchemaFile" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLoadFunc" return="org.apache.pig.LoadFunc"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="setSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="schema" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.logicalLayer.LOVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="getEnforcedSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setEnforcedSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="enforcedSchema" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
      <doc>
      <![CDATA[Set this when user enforces schema
 @param enforcedSchema]]>
      </doc>
    </method>
    <method name="isSplittable" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getType" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDeterminedSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the DeterminedSchema]]>
      </doc>
    </method>
    <method name="getProjectionMap" return="org.apache.pig.impl.plan.ProjectionMap"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRequiredFields" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="splittable" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LOLoad -->
  <!-- start class org.apache.pig.impl.logicalLayer.LOMapLookup -->
  <class name="LOMapLookup" extends="org.apache.pig.impl.logicalLayer.ExpressionOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LOMapLookup" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey, java.lang.Object, byte, org.apache.pig.impl.logicalLayer.schema.Schema"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ParseException" type="org.apache.pig.impl.logicalLayer.parser.ParseException"/>
      <doc>
      <![CDATA[@param plan
            Logical plan this operator is a part of.
 @param key
            Operator key to assign to this node.
 @param mapKey
            key to look up in the map. The key is of atomic type
 @param valueType
            type of the value corresponding to the key
 @param valueSchema
            schema of the value if the type is tuple]]>
      </doc>
    </constructor>
    <method name="getMap" return="org.apache.pig.impl.logicalLayer.ExpressionOperator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLookUpKey" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getValueType" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFieldSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.logicalLayer.LOVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="clone" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.ExpressionOperator#clone()
 Do not use the clone method directly. Operators are cloned when logical plans
 are cloned using {@link LogicalPlanCloner}]]>
      </doc>
    </method>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LOMapLookup -->
  <!-- start class org.apache.pig.impl.logicalLayer.LOMod -->
  <class name="LOMod" extends="org.apache.pig.impl.logicalLayer.BinaryExpressionOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LOMod" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            Logical plan this operator is a part of.
 @param k
            Operator key to assign to this node.]]>
      </doc>
    </constructor>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFieldSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.logicalLayer.LOVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LOMod -->
  <!-- start class org.apache.pig.impl.logicalLayer.LOMultiply -->
  <class name="LOMultiply" extends="org.apache.pig.impl.logicalLayer.BinaryExpressionOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LOMultiply" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            Logical plan this operator is a part of.
 @param k
            Operator key to assign to this node.]]>
      </doc>
    </constructor>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFieldSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.logicalLayer.LOVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LOMultiply -->
  <!-- start class org.apache.pig.impl.logicalLayer.LONegative -->
  <class name="LONegative" extends="org.apache.pig.impl.logicalLayer.UnaryExpressionOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LONegative" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            Logical plan this operator is a part of.
 @param k
            Operator key to assign to this node.]]>
      </doc>
    </constructor>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFieldSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.logicalLayer.LOVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LONegative -->
  <!-- start class org.apache.pig.impl.logicalLayer.LONot -->
  <class name="LONot" extends="org.apache.pig.impl.logicalLayer.UnaryExpressionOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LONot" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            Logical plan this operator is a part of.
 @param k
            Operator key to assign to this node.]]>
      </doc>
    </constructor>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFieldSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.logicalLayer.LOVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LONot -->
  <!-- start class org.apache.pig.impl.logicalLayer.LONotEqual -->
  <class name="LONotEqual" extends="org.apache.pig.impl.logicalLayer.BinaryExpressionOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LONotEqual" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            Logical plan this operator is a part of.
 @param k
            Operator key to assign to this node.]]>
      </doc>
    </constructor>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFieldSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.logicalLayer.LOVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LONotEqual -->
  <!-- start class org.apache.pig.impl.logicalLayer.LOOr -->
  <class name="LOOr" extends="org.apache.pig.impl.logicalLayer.BinaryExpressionOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LOOr" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            Logical plan this operator is a part of.
 @param k
            Operator key to assign to this node.]]>
      </doc>
    </constructor>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFieldSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.logicalLayer.LOVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LOOr -->
  <!-- start class org.apache.pig.impl.logicalLayer.LOPrinter -->
  <class name="LOPrinter" extends="org.apache.pig.impl.logicalLayer.LOVisitor"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LOPrinter" type="java.io.PrintStream, org.apache.pig.impl.logicalLayer.LogicalPlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param ps PrintStream to output plan information to
 @param plan Logical plan to print]]>
      </doc>
    </constructor>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="setVerbose"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="verbose" type="boolean"/>
    </method>
    <method name="print"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="printer" type="java.io.OutputStream"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="depthFirstLP" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[A visitor mechanism printing out the logical plan.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LOPrinter -->
  <!-- start class org.apache.pig.impl.logicalLayer.LOProject -->
  <class name="LOProject" extends="org.apache.pig.impl.logicalLayer.ExpressionOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LOProject" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey, org.apache.pig.impl.logicalLayer.LogicalOperator, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            Logical plan this operator is a part of.
 @param key
            Operator key to assign to this node.
 @param exp
            the expression which might contain the column to project
 @param projection
            the list of columns to project]]>
      </doc>
    </constructor>
    <constructor name="LOProject" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey, org.apache.pig.impl.logicalLayer.LogicalOperator, java.lang.Integer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            Logical plan this operator is a part of.
 @param key
            Operator key to assign to this node.
 @param exp
            the expression which might contain the column to project
 @param projection
            the column to project]]>
      </doc>
    </constructor>
    <method name="getExpression" return="org.apache.pig.impl.logicalLayer.LogicalOperator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setExpression"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="exp" type="org.apache.pig.impl.logicalLayer.LogicalOperator"/>
    </method>
    <method name="isStar" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getProjection" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setProjection"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="proj" type="java.util.List"/>
    </method>
    <method name="getCol" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setStar"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="boolean"/>
    </method>
    <method name="getSentinel" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setSentinel"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="boolean"/>
    </method>
    <method name="getOverloaded" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setOverloaded"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="boolean"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFieldSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="isSingleProjection" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.logicalLayer.LOVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="toDetailString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="clone" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.ExpressionOperator#clone()
 Do not use the clone method directly. Operators are cloned when logical plans
 are cloned using {@link LogicalPlanCloner}]]>
      </doc>
    </method>
    <method name="setSendEmptyBagOnEOP"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sendEmptyBagOnEOP" type="boolean"/>
      <doc>
      <![CDATA[@param sendEmptyBagOnEOP the sendEmptyBagOnEOP to set]]>
      </doc>
    </method>
    <method name="isSendEmptyBagOnEOP" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the sendEmptyBagOnEOP]]>
      </doc>
    </method>
    <doc>
    <![CDATA[LOProject is designed like a singly linked list; A few examples will
 illustrate the point about the linked list nature of the design;
 a = load 'input1' as (name, age);
 b = group a by name;
 foreach b generate a, a.name;
 The project operator occurs in two places in the above script:
 generate a(here) and a.name(here)
 In the first occurrence, we are trying to project the elements of
 the bag a; In order to retrieve the bag, we need to project the
 the second column ($1) or column number 1 (using the zero based index)
 from the input (the relation or bag b)
 In the second occurence, we are trying to project the first column
 ($0) or column number 0 from the bag a which in turn is the column
 number 1 in the relation b; As you can see, the nested structure or
 the singly linked list nature is clearly visible;
 Given that it's a singly linked list, the null pointer or the sentinel
 is marked explictly using the boolean variable mSentinel; The sentinel
 is marked true only when the input is a relational operator; This occurs
 when we create the innermost operator]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LOProject -->
  <!-- start class org.apache.pig.impl.logicalLayer.LORegexp -->
  <class name="LORegexp" extends="org.apache.pig.impl.logicalLayer.BinaryExpressionOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LORegexp" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            Logical plan this operator is a part of.
 @param key
            Operator key to assign to this node.]]>
      </doc>
    </constructor>
    <method name="getOperand" return="org.apache.pig.impl.logicalLayer.ExpressionOperator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRegexp" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFieldSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.logicalLayer.LOVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LORegexp -->
  <!-- start class org.apache.pig.impl.logicalLayer.LOSort -->
  <class name="LOSort" extends="org.apache.pig.impl.logicalLayer.LogicalOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LOSort" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey, java.util.List, java.util.List, org.apache.pig.FuncSpec"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            LogicalPlan this operator is a part of.
 @param key
            OperatorKey for this operator
 @param sortColPlans
            Array of column numbers that will be used for sorting data.
 @param ascCols
            Array of booleans. Should be same size as sortCols. True
            indicates sort ascending (default), false sort descending. If
            this array is null, then all columns will be sorted ascending.
 @param sortFunc
            the user defined sorting function]]>
      </doc>
    </constructor>
    <method name="getInput" return="org.apache.pig.impl.logicalLayer.LogicalOperator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSortColPlans" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setSortColPlans"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sortPlans" type="java.util.List"/>
    </method>
    <method name="getAscendingCols" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setAscendingCols"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ascCols" type="java.util.List"/>
    </method>
    <method name="getUserFunc" return="org.apache.pig.FuncSpec"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setUserFunc"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="func" type="org.apache.pig.FuncSpec"/>
    </method>
    <method name="isStar" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setStar"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="boolean"/>
    </method>
    <method name="setLimit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="l" type="long"/>
    </method>
    <method name="getLimit" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isLimited" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.logicalLayer.LOVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="getType" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="clone" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LogicalOperator#clone()
 Do not use the clone method directly. Operators are cloned when logical plans
 are cloned using {@link LogicalPlanCloner}]]>
      </doc>
    </method>
    <method name="getProjectionMap" return="org.apache.pig.impl.plan.ProjectionMap"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRequiredFields" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LOSort -->
  <!-- start class org.apache.pig.impl.logicalLayer.LOSplit -->
  <class name="LOSplit" extends="org.apache.pig.impl.logicalLayer.LogicalOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LOSplit" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey, java.util.ArrayList"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            LogicalPlan this operator is a part of.
 @param key
            OperatorKey for this operator
 @param outputs
            list of aliases that are the output of the split]]>
      </doc>
    </constructor>
    <method name="getOutputs" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setOutputs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="outputs" type="java.util.ArrayList"/>
    </method>
    <method name="addOutput"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="lOp" type="org.apache.pig.impl.logicalLayer.LogicalOperator"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleOutputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.logicalLayer.LOVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="getType" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="clone" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LogicalOperator#clone()
 Do not use the clone method directly. Operators are cloned when logical plans
 are cloned using {@link LogicalPlanCloner}]]>
      </doc>
    </method>
    <method name="getProjectionMap" return="org.apache.pig.impl.plan.ProjectionMap"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRequiredFields" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LOSplit -->
  <!-- start class org.apache.pig.impl.logicalLayer.LOSplitOutput -->
  <class name="LOSplitOutput" extends="org.apache.pig.impl.logicalLayer.LogicalOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LOSplitOutput" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey, int, org.apache.pig.impl.logicalLayer.LogicalPlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            LogicalPlan this operator is a part of.
 @param key
            OperatorKey for this operator
 @param index
            index of this output in the split
 @param condPlan
            logical plan containing the condition for this split output]]>
      </doc>
    </constructor>
    <method name="getConditionPlan" return="org.apache.pig.impl.logicalLayer.LogicalPlan"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.logicalLayer.LOVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getReadFrom" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getType" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="unsetSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="clone" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.plan.Operator#clone()
 Do not use the clone method directly. Operators are cloned when logical plans
 are cloned using {@link LogicalPlanCloner}]]>
      </doc>
    </method>
    <method name="getProjectionMap" return="org.apache.pig.impl.plan.ProjectionMap"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRequiredFields" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="mIndex" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LOSplitOutput -->
  <!-- start class org.apache.pig.impl.logicalLayer.LOStore -->
  <class name="LOStore" extends="org.apache.pig.impl.logicalLayer.LogicalOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LOStore" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey, org.apache.pig.impl.io.FileSpec"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[@param plan
            LogicalPlan this operator is a part of.
 @param key
            OperatorKey for this operator
 @param outputFileSpec
            the file to be stored]]>
      </doc>
    </constructor>
    <method name="getOutputFile" return="org.apache.pig.impl.io.FileSpec"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setOutputFile"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="outputFileSpec" type="org.apache.pig.impl.io.FileSpec"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getStoreFunc" return="org.apache.pig.StoreFunc"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleOutputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.logicalLayer.LOVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="setInputSpec"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="org.apache.pig.impl.io.FileSpec"/>
    </method>
    <method name="getInputSpec" return="org.apache.pig.impl.io.FileSpec"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getProjectionMap" return="org.apache.pig.impl.plan.ProjectionMap"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRequiredFields" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LOStore -->
  <!-- start class org.apache.pig.impl.logicalLayer.LOStream -->
  <class name="LOStream" extends="org.apache.pig.impl.logicalLayer.LogicalOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LOStream" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey, org.apache.pig.impl.logicalLayer.LogicalOperator, org.apache.pig.impl.streaming.ExecutableManager, org.apache.pig.impl.streaming.StreamingCommand"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new <code>LOStream</code> with the given command.
 
 @param plan the logical plan this operator is a part of
 @param k the operator key for this operator
 @param input operator that is input to this command
 @param exeManager ExecutableManager used by this streaming command.
 @param cmd StreamingCommand for this stream to run.]]>
      </doc>
    </constructor>
    <method name="getStreamingCommand" return="org.apache.pig.impl.streaming.StreamingCommand"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the StreamingCommand object associated
 with this operator
 
 @return the StreamingCommand object]]>
      </doc>
    </method>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="setOptimizedSpec"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="handle" type="org.apache.pig.impl.streaming.StreamingCommand.Handle"/>
      <param name="spec" type="java.lang.String"/>
      <doc>
      <![CDATA[Set the optimized {@link HandleSpec} for the given {@link Handle} of the 
 <code>StreamSpec</code>.
 
 @param handle <code>Handle</code> to optimize
 @param spec optimized specification for the handle]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.logicalLayer.LOVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getExecutableManager" return="org.apache.pig.impl.streaming.ExecutableManager"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the ExecutableManager]]>
      </doc>
    </method>
    <method name="getProjectionMap" return="org.apache.pig.impl.plan.ProjectionMap"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRequiredFields" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[{@link LOStream} represents the specification of an external
 command to be executed in a Pig Query. 
 
 <code>LOStream</code> encapsulates all relevant details of the
 command specified by the user either directly via the <code>STREAM</code>
 operator or indirectly via a <code>DEFINE</code> operator. It includes
 details such as input/output/error specifications and also files to be
 shipped to the cluster and files to be cached.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LOStream -->
  <!-- start class org.apache.pig.impl.logicalLayer.LOSubtract -->
  <class name="LOSubtract" extends="org.apache.pig.impl.logicalLayer.BinaryExpressionOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LOSubtract" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            Logical plan this operator is a part of.
 @param k
            Operator key to assign to this node.]]>
      </doc>
    </constructor>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFieldSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.logicalLayer.LOVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LOSubtract -->
  <!-- start class org.apache.pig.impl.logicalLayer.LOUnion -->
  <class name="LOUnion" extends="org.apache.pig.impl.logicalLayer.LogicalOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LOUnion" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            Logical plan this operator is a part of.
 @param k
            Operator key to assign to this node.]]>
      </doc>
    </constructor>
    <method name="getInputs" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.logicalLayer.LOVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="getType" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="clone" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.LogicalOperator#clone()
 Do not use the clone method directly. Operators are cloned when logical plans
 are cloned using {@link LogicalPlanCloner}]]>
      </doc>
    </method>
    <method name="getProjectionMap" return="org.apache.pig.impl.plan.ProjectionMap"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRequiredFields" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LOUnion -->
  <!-- start class org.apache.pig.impl.logicalLayer.LOUserFunc -->
  <class name="LOUserFunc" extends="org.apache.pig.impl.logicalLayer.ExpressionOperator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LOUserFunc" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey, org.apache.pig.FuncSpec, byte"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            LogicalPlan this operator is a part of.
 @param k
            OperatorKey for this operator.
 @param funcSpec
            name of the user defined function.
 @param returnType
            return type of this function.]]>
      </doc>
    </constructor>
    <method name="getFuncSpec" return="org.apache.pig.FuncSpec"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getArguments" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFieldSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.logicalLayer.LOVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="setFuncSpec"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="funcSpec" type="org.apache.pig.FuncSpec"/>
      <doc>
      <![CDATA[@param funcSpec the FuncSpec to set]]>
      </doc>
    </method>
    <method name="clone" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.ExpressionOperator#clone()
 Do not use the clone method directly. Operators are cloned when logical plans
 are cloned using {@link LogicalPlanCloner}]]>
      </doc>
    </method>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LOUserFunc -->
  <!-- start class org.apache.pig.impl.logicalLayer.LOVisitor -->
  <class name="LOVisitor" extends="org.apache.pig.impl.plan.PlanVisitor"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LOVisitor" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.PlanWalker"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="lOp" type="org.apache.pig.impl.logicalLayer.LogicalOperator"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param lOp
            the logical operator that has to be visited
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="eOp" type="org.apache.pig.impl.logicalLayer.ExpressionOperator"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param eOp
            the logical expression operator that has to be visited
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="binOp" type="org.apache.pig.impl.logicalLayer.BinaryExpressionOperator"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param binOp
            the logical binary expression operator that has to be visited
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="uniOp" type="org.apache.pig.impl.logicalLayer.UnaryExpressionOperator"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param uniOp
            the logical unary operator that has to be visited
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="cg" type="org.apache.pig.impl.logicalLayer.LOCogroup"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param cg
            the logical cogroup operator that has to be visited
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="frj" type="org.apache.pig.impl.logicalLayer.LOFRJoin"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="forEach" type="org.apache.pig.impl.logicalLayer.LOForEach"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param forEach
            the logical foreach operator that has to be visited
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="s" type="org.apache.pig.impl.logicalLayer.LOSort"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param s
            the logical sort operator that has to be visited
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="limOp" type="org.apache.pig.impl.logicalLayer.LOLimit"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="stream" type="org.apache.pig.impl.logicalLayer.LOStream"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="filter" type="org.apache.pig.impl.logicalLayer.LOFilter"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param filter
            the logical filter operator that has to be visited
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="split" type="org.apache.pig.impl.logicalLayer.LOSplit"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param split
            the logical split operator that has to be visited
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="g" type="org.apache.pig.impl.logicalLayer.LOGenerate"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param g
            the logical generate operator that has to be visited
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="func" type="org.apache.pig.impl.logicalLayer.LOUserFunc"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[Iterate over each expression that is part of the function argument list
 
 @param func
            the user defined function
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="binCond" type="org.apache.pig.impl.logicalLayer.LOBinCond"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param binCond
            the logical binCond operator that has to be visited
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="cast" type="org.apache.pig.impl.logicalLayer.LOCast"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param cast
            the logical cast operator that has to be visited
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="regexp" type="org.apache.pig.impl.logicalLayer.LORegexp"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param regexp
            the logical regexp operator that has to be visited
 @throws ParseException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="load" type="org.apache.pig.impl.logicalLayer.LOLoad"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="store" type="org.apache.pig.impl.logicalLayer.LOStore"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="store" type="org.apache.pig.impl.logicalLayer.LOConst"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="u" type="org.apache.pig.impl.logicalLayer.LOUnion"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="sop" type="org.apache.pig.impl.logicalLayer.LOSplitOutput"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="dt" type="org.apache.pig.impl.logicalLayer.LODistinct"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="cs" type="org.apache.pig.impl.logicalLayer.LOCross"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="project" type="org.apache.pig.impl.logicalLayer.LOProject"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOGreaterThan"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOLesserThan"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOGreaterThanEqual"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOLesserThanEqual"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOEqual"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LONotEqual"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOAdd"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOSubtract"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOMultiply"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LODivide"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOMod"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LONegative"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOMapLookup"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="binOp" type="org.apache.pig.impl.logicalLayer.LOAnd"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="binOp" type="org.apache.pig.impl.logicalLayer.LOOr"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="uniOp" type="org.apache.pig.impl.logicalLayer.LONot"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="uniOp" type="org.apache.pig.impl.logicalLayer.LOIsNull"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <doc>
    <![CDATA[A visitor mechanism for navigating and operating on a tree of Logical
 Operators. This class contains the logic to navigate the tree, but does not
 do anything with or to the tree. In order to operate on or extract
 information from the tree, extend this class. You only need to implement the
 methods dealing with the logical operators you are concerned with. For
 example, if you wish to find every LOEval in a logical plan and perform some
 operation on it, your visitor would look like: class MyLOVisitor extends
 LOVisitor { public void visitEval(LOEval e) { you're logic here } } Any
 operators that you do not implement the visitX method for will then be
 navigated through by this class.
 
 *NOTE* When invoking a visitor, you should never call one of the methods in
 this class. You should pass your visitor as an argument to visit() on the
 object you want to visit. So: RIGHT: LOEval myEval; MyVisitor v;
 myEval.visit(v); WRONG: LOEval myEval; MyVisitor v; v.visitEval(myEval);
 These methods are only public to make them accessible to the LO* objects.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.LOVisitor -->
  <!-- start class org.apache.pig.impl.logicalLayer.PlanSetter -->
  <class name="PlanSetter" extends="org.apache.pig.impl.logicalLayer.LOVisitor"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PlanSetter" type="org.apache.pig.impl.logicalLayer.LogicalPlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOAdd"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOAnd"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOBinCond"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOCast"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOCogroup"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOFRJoin"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOConst"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOCross"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LODistinct"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LODivide"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOEqual"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOFilter"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOForEach"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOGreaterThan"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOGreaterThanEqual"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOIsNull"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOLesserThan"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOLesserThanEqual"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOLimit"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOLoad"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOMapLookup"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOMod"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOMultiply"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LONegative"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LONot"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LONotEqual"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOOr"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOProject"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LORegexp"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOSort"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOSplit"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOSplitOutput"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOStore"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOSubtract"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOUnion"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOUserFunc"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOStream"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <doc>
    <![CDATA[A visitor to set plans correctly inside logical operators.  When a logical
 operator is constructed, it is passed the plan value that is currently
 being used.  However, once a single plan is stitched together, these
 references are no longer useful.  However, there are a number of places
 that it is useful to be able to refer to the correct plan.  So this visitor
 walks the final plan and sets the mCurrentWalker.getPlan() values in LogicalOperator
 appropriately.  Note that some operators can be in multiple plans (such as
 inside a foreach).  In this case the mCurrentWalker.getPlan() value will be for one of the
 plans.  Which one is not guaranteed.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.PlanSetter -->
  <!-- start class org.apache.pig.impl.logicalLayer.ProjectStarTranslator -->
  <class name="ProjectStarTranslator" extends="org.apache.pig.impl.logicalLayer.LOVisitor"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ProjectStarTranslator" type="org.apache.pig.impl.logicalLayer.LogicalPlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="cg" type="org.apache.pig.impl.logicalLayer.LOCogroup"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param cg
            the logical cogroup operator that has to be visited
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="frj" type="org.apache.pig.impl.logicalLayer.LOFRJoin"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="forEach" type="org.apache.pig.impl.logicalLayer.LOForEach"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param forEach
            the logical foreach operator that has to be visited
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="s" type="org.apache.pig.impl.logicalLayer.LOSort"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param s
            the logical sort operator that has to be visited
 @throws VisitorException]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A visitor to walk operators that contain a nested plan and translate project( * )
 operators to a list of projection operators, i.e., 
 project( * ) -> project(0), project(1), ... project(n-2), project(n-1)]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.ProjectStarTranslator -->
  <!-- start class org.apache.pig.impl.logicalLayer.RemoveRedundantOperators -->
  <class name="RemoveRedundantOperators" extends="org.apache.pig.impl.logicalLayer.LOVisitor"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="RemoveRedundantOperators" type="org.apache.pig.impl.logicalLayer.LogicalPlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="project" type="org.apache.pig.impl.logicalLayer.LOProject"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param project
            the logical project operator that has to be visited
 @throws VisitorException]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A visitor to remove redundant operators in a plan]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.RemoveRedundantOperators -->
  <!-- start class org.apache.pig.impl.logicalLayer.TopLevelProjectFinder -->
  <class name="TopLevelProjectFinder" extends="org.apache.pig.impl.logicalLayer.LOVisitor"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TopLevelProjectFinder" type="org.apache.pig.impl.logicalLayer.LogicalPlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="dt" type="org.apache.pig.impl.logicalLayer.LODistinct"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="filter" type="org.apache.pig.impl.logicalLayer.LOFilter"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="forEach" type="org.apache.pig.impl.logicalLayer.LOForEach"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="s" type="org.apache.pig.impl.logicalLayer.LOSort"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="project" type="org.apache.pig.impl.logicalLayer.LOProject"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="getProjectList" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getProjectSet" return="java.util.Set"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getProjectStarSet" return="java.util.Set"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A visitor to track the top-level projection operators in a plan.
 If there is a $1.$0 then only $1 is tracked]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.TopLevelProjectFinder -->
  <!-- start class org.apache.pig.impl.logicalLayer.UnaryExpressionOperator -->
  <class name="UnaryExpressionOperator" extends="org.apache.pig.impl.logicalLayer.ExpressionOperator"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="UnaryExpressionOperator" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            Logical plan this operator is a part of.
 @param k
            Operator key to assign to this node.
 @param rp
            degree of requested parallelism with which to execute this
            node.]]>
      </doc>
    </constructor>
    <constructor name="UnaryExpressionOperator" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            Logical plan this operator is a part of.
 @param k
            Operator key to assign to this node.]]>
      </doc>
    </constructor>
    <method name="getOperand" return="org.apache.pig.impl.logicalLayer.ExpressionOperator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.logicalLayer.LOVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="clone" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.logicalLayer.ExpressionOperator#clone()
 Do not use the clone method directly. Operators are cloned when logical plans
 are cloned using {@link LogicalPlanCloner}]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This abstract class represents the logical Unary Expression Operator The
 unary operator has an operand and an operator. The format of the expression
 is operator operand. The operator is implicit and not recorded in the class]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.UnaryExpressionOperator -->
  <doc>
  <![CDATA[<p>
The logical operators that represent a pig script and tools for manipulating
those operators.  The logical layer contains the logical operators themselves,
as well as validators that check the logical plan, an optimizer, and a general
visitor utility for working with the logical plans.

<h2> Design </h2>
<p>
Logical operators use the operator, plan, visitor, and optimizer framework
provided by the {@link org.apache.pig.impl.plan} package.
<p>
Logical operators consist of both relational and expression operators.
Relational operators work on an entire bag.  Expression operators work on an
element of a tuple (which may also be a bag).  Due to Pig's nested data and
execution model the distinction between relational and expression operators is
not always clear.  And some operators such as LOProject function as both.
<p>
In a traditional data base system, a query execution plan is constructed from
relational operators, such as project, filter, sort, aggregate, join.  Each of
these may contain an expression tree, made up of expression operators.  For
example, consider a SQL query <code>select a from T where a = 5;</code>.  The
where clause would be represented by a filter operator with an expression tree
for <code>a=5</code>.
<p>
Pig takes a similar approach, except that the operators contained inside of a
relational operator may also be relational.  For example, a foreach statement
that has a nested script, such as <code>foreach B { C = distinct $1; generate
group, COUNT(C);}</code>.  This foreach needs to contain not just an
expression tree but the distinct relational operator.  For this reason, Pig's
relational operators do not contain expression trees.  Instead they contain
one or more LogicalPlans themselves.  This allows Pig to arbitrarily nest
the logical plan.  In this sense Pig is more similar to a traditional
procedural language where certain statements (e.g. if, while) can contain any
other statement in the language rather than being like SQL where the statement
execution tends to be more linear.

<h2> Notes </h2>
<p>
Heads up to developers:  when adding a new logical operator to the plan,
there are a number of classes that need to know about every type of operator.
These include {@link org.apache.pig.impl.logicalLayer.PlanSetter},
{@link org.apache.pig.impl.logicalLayer.optimizer.SchemaRemover},
{@link org.apache.pig.impl.logicalLayer.optimizer.SchemaCalculator}, and 
{@link org.apache.pig.impl.logicalLayer.optimizer.LogicalTransformer}.]]>
  </doc>
</package>
<package name="org.apache.pig.impl.logicalLayer.optimizer">
  <!-- start class org.apache.pig.impl.logicalLayer.optimizer.ImplicitSplitInserter -->
  <class name="ImplicitSplitInserter" extends="org.apache.pig.impl.logicalLayer.optimizer.LogicalTransformer"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ImplicitSplitInserter" type="org.apache.pig.impl.logicalLayer.LogicalPlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="check" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nodes" type="java.util.List"/>
      <exception name="OptimizerException" type="org.apache.pig.impl.plan.optimizer.OptimizerException"/>
    </method>
    <method name="transform"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nodes" type="java.util.List"/>
      <exception name="OptimizerException" type="org.apache.pig.impl.plan.optimizer.OptimizerException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.optimizer.ImplicitSplitInserter -->
  <!-- start class org.apache.pig.impl.logicalLayer.optimizer.LogicalOptimizer -->
  <class name="LogicalOptimizer" extends="org.apache.pig.impl.plan.optimizer.PlanOptimizer"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LogicalOptimizer" type="org.apache.pig.impl.logicalLayer.LogicalPlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="LogicalOptimizer" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.ExecType"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="LogicalOptimizer" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.ExecType, java.util.Set"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[An optimizer for logical plans.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.optimizer.LogicalOptimizer -->
  <!-- start class org.apache.pig.impl.logicalLayer.optimizer.LogicalTransformer -->
  <class name="LogicalTransformer" extends="org.apache.pig.impl.plan.optimizer.Transformer"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LogicalTransformer" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.PlanWalker"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <method name="rebuildSchemas"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
      <doc>
      <![CDATA[Rebuild schemas after a rule has transformed the tree.  This will first
 null out existing schemas and then call getSchema to rebuild them.
 @throws VisitorException, FrontendException]]>
      </doc>
    </method>
    <method name="insertBetween"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="after" type="org.apache.pig.impl.logicalLayer.LogicalOperator"/>
      <param name="newNode" type="org.apache.pig.impl.logicalLayer.LogicalOperator"/>
      <param name="before" type="org.apache.pig.impl.logicalLayer.LogicalOperator"/>
      <param name="projectionMapping" type="java.util.Map"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
      <doc>
      <![CDATA[Insert a node in between two existing nodes.  This includes inserting
 the node into the correct place in the plan and finding any projects in
 successors and reconnecting them to the new node as well as rebuilding
 all of the schemas.
 @param after Node to insert the new node after
 @param newNode New node to insert
 @param before Node to insert this node before
 @param projectionMapping A map that defines how projections in after
 relate to projections in newnode.  Keys are the projection offsets in
 after, values are the new offsets in newnode.  If this field is null,
 then it will be assumed that the mapping is 1-1.
 @throws VisitorException, FrontendException]]>
      </doc>
    </method>
    <method name="fixUpContainedPlans"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="after" type="org.apache.pig.impl.logicalLayer.LogicalOperator"/>
      <param name="newNode" type="org.apache.pig.impl.logicalLayer.LogicalOperator"/>
      <param name="before" type="org.apache.pig.impl.logicalLayer.LogicalOperator"/>
      <param name="projectionMapping" type="java.util.Map"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
      <doc>
      <![CDATA[Once a node has been inserted, inner plans associated with other nodes
 may have references to the node that has been replaced or moved.  This
 function walks those inner plans and patches up references.
 @param after Node that has had a new node inserted after it.
 @param newNode node that has been inserted
 @param before Node that has had a new node inserted before it.
 @param projectionMapping A map that defines how projections in after
 relate to projections in newNode.  Keys are the projection offsets in
 after, values are the new offsets in newNode.  If this field is null,
 then it will be assumed that the mapping is 1-1.
 @throws VisitorException, FrontendException]]>
      </doc>
    </method>
    <method name="insertAfter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="after" type="org.apache.pig.impl.logicalLayer.LogicalOperator"/>
      <param name="newNode" type="org.apache.pig.impl.logicalLayer.LogicalOperator"/>
      <param name="projectionMapping" type="java.util.Map"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
      <doc>
      <![CDATA[Insert a node in after an existing nodes.  This includes inserting
 the node into the correct place in the plan and finding any projects in
 successors and reconnecting them to the new node as well as rebuilding
 all of the schemas.  This function
 assumes that the node has only one predecessor.
 @param after Node to insert the new node after
 @param newNode New node to insert
 @param projectionMapping A map that defines how projections in after
 relate to projections in newnode.  Keys are the projection offsets in
 after, values are the new offsets in newnode.  If this field is null,
 then it will be assumed that the mapping is 1-1.
 @throws VisitorException, FrontendException]]>
      </doc>
    </method>
    <method name="removeFromChain"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="nodeToRemove" type="org.apache.pig.impl.logicalLayer.LogicalOperator"/>
      <param name="projectionMapping" type="java.util.Map"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
      <doc>
      <![CDATA[Remove a node in the middle of a linear chain. This includes removing the node 
 from the plan and reconnect the nodes before and after the node as well as rebuilding
 all of the schemas. This node should have one and only one predecessor and zero or one 
 successor
 @param nodeToRemove Node to remove
 @param projectionMapping A map that defines how projections in after
 relate to projections in nodeToRemove.  Keys are the projection offsets in
 after, values are the new offsets in nodeToRemove.  If this field is null,
 then it will be assumed that the mapping is 1-1.
 @throws VisitorException, FrontendException]]>
      </doc>
    </method>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.optimizer.LogicalTransformer -->
  <!-- start class org.apache.pig.impl.logicalLayer.optimizer.OpLimitOptimizer -->
  <class name="OpLimitOptimizer" extends="org.apache.pig.impl.logicalLayer.optimizer.LogicalTransformer"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="OpLimitOptimizer" type="org.apache.pig.impl.logicalLayer.LogicalPlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="OpLimitOptimizer" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.ExecType"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="check" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nodes" type="java.util.List"/>
      <exception name="OptimizerException" type="org.apache.pig.impl.plan.optimizer.OptimizerException"/>
    </method>
    <method name="transform"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nodes" type="java.util.List"/>
      <exception name="OptimizerException" type="org.apache.pig.impl.plan.optimizer.OptimizerException"/>
    </method>
    <method name="processNode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="limit" type="org.apache.pig.impl.logicalLayer.LOLimit"/>
      <exception name="OptimizerException" type="org.apache.pig.impl.plan.optimizer.OptimizerException"/>
    </method>
    <doc>
    <![CDATA[A visitor to discover if any schema has been specified for a file being
 loaded.  If so, a projection will be injected into the plan to cast the
 data being loaded to the appropriate types.  The optimizer can then come
 along and move those casts as far down as possible, or in some cases remove
 them altogether.  This visitor does not handle finding the schemas for the 
 file, that has already been done as part of parsing.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.optimizer.OpLimitOptimizer -->
  <!-- start class org.apache.pig.impl.logicalLayer.optimizer.SchemaCalculator -->
  <class name="SchemaCalculator" extends="org.apache.pig.impl.logicalLayer.LOVisitor"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SchemaCalculator" type="org.apache.pig.impl.logicalLayer.LogicalPlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="binOp" type="org.apache.pig.impl.logicalLayer.BinaryExpressionOperator"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param binOp
            the logical binary expression operator that has to be visited
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="uniOp" type="org.apache.pig.impl.logicalLayer.UnaryExpressionOperator"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param uniOp
            the logical unary operator that has to be visited
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="cg" type="org.apache.pig.impl.logicalLayer.LOCogroup"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param cg
            the logical cogroup operator that has to be visited
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="s" type="org.apache.pig.impl.logicalLayer.LOSort"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param s
            the logical sort operator that has to be visited
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="limit" type="org.apache.pig.impl.logicalLayer.LOLimit"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param limit
            the logical limit operator that has to be visited
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="filter" type="org.apache.pig.impl.logicalLayer.LOFilter"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param filter
            the logical filter operator that has to be visited
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="split" type="org.apache.pig.impl.logicalLayer.LOSplit"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param split
            the logical split operator that has to be visited
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="forEach" type="org.apache.pig.impl.logicalLayer.LOForEach"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param forEach
            the logical foreach operator that has to be visited
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="func" type="org.apache.pig.impl.logicalLayer.LOUserFunc"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[Iterate over each expression that is part of the function argument list
 
 @param func
            the user defined function
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="binCond" type="org.apache.pig.impl.logicalLayer.LOBinCond"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param binCond
            the logical binCond operator that has to be visited
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="cast" type="org.apache.pig.impl.logicalLayer.LOCast"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param cast
            the logical cast operator that has to be visited
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="regexp" type="org.apache.pig.impl.logicalLayer.LORegexp"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param regexp
            the logical regexp operator that has to be visited
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="load" type="org.apache.pig.impl.logicalLayer.LOLoad"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="store" type="org.apache.pig.impl.logicalLayer.LOStore"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="c" type="org.apache.pig.impl.logicalLayer.LOConst"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="u" type="org.apache.pig.impl.logicalLayer.LOUnion"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="sop" type="org.apache.pig.impl.logicalLayer.LOSplitOutput"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="dt" type="org.apache.pig.impl.logicalLayer.LODistinct"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="cs" type="org.apache.pig.impl.logicalLayer.LOCross"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="project" type="org.apache.pig.impl.logicalLayer.LOProject"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <doc>
    <![CDATA[A visitor to reset all the schemas in a logical plan.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.optimizer.SchemaCalculator -->
  <!-- start class org.apache.pig.impl.logicalLayer.optimizer.SchemaRemover -->
  <class name="SchemaRemover" extends="org.apache.pig.impl.logicalLayer.LOVisitor"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SchemaRemover" type="org.apache.pig.impl.logicalLayer.LogicalPlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="binOp" type="org.apache.pig.impl.logicalLayer.BinaryExpressionOperator"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param binOp
            the logical binary expression operator that has to be visited
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="uniOp" type="org.apache.pig.impl.logicalLayer.UnaryExpressionOperator"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param uniOp
            the logical unary operator that has to be visited
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="cg" type="org.apache.pig.impl.logicalLayer.LOCogroup"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param cg
            the logical cogroup operator that has to be visited
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="s" type="org.apache.pig.impl.logicalLayer.LOSort"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param s
            the logical sort operator that has to be visited
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="limit" type="org.apache.pig.impl.logicalLayer.LOLimit"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param limit
            the logical limit operator that has to be visited
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="filter" type="org.apache.pig.impl.logicalLayer.LOFilter"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param filter
            the logical filter operator that has to be visited
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="split" type="org.apache.pig.impl.logicalLayer.LOSplit"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param split
            the logical split operator that has to be visited
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="forEach" type="org.apache.pig.impl.logicalLayer.LOForEach"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param forEach
            the logical foreach operator that has to be visited
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="func" type="org.apache.pig.impl.logicalLayer.LOUserFunc"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[Iterate over each expression that is part of the function argument list
 
 @param func
            the user defined function
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="binCond" type="org.apache.pig.impl.logicalLayer.LOBinCond"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param binCond
            the logical binCond operator that has to be visited
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="cast" type="org.apache.pig.impl.logicalLayer.LOCast"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param cast
            the logical cast operator that has to be visited
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="regexp" type="org.apache.pig.impl.logicalLayer.LORegexp"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param regexp
            the logical regexp operator that has to be visited
 @throws ParseException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="load" type="org.apache.pig.impl.logicalLayer.LOLoad"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="store" type="org.apache.pig.impl.logicalLayer.LOStore"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="c" type="org.apache.pig.impl.logicalLayer.LOConst"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="u" type="org.apache.pig.impl.logicalLayer.LOUnion"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="sop" type="org.apache.pig.impl.logicalLayer.LOSplitOutput"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="dt" type="org.apache.pig.impl.logicalLayer.LODistinct"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="cs" type="org.apache.pig.impl.logicalLayer.LOCross"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="project" type="org.apache.pig.impl.logicalLayer.LOProject"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="frj" type="org.apache.pig.impl.logicalLayer.LOFRJoin"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <doc>
    <![CDATA[A visitor to reset all the schemas in a logical plan.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.optimizer.SchemaRemover -->
  <!-- start class org.apache.pig.impl.logicalLayer.optimizer.StreamOptimizer -->
  <class name="StreamOptimizer" extends="org.apache.pig.impl.logicalLayer.optimizer.LogicalTransformer"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="StreamOptimizer" type="org.apache.pig.impl.logicalLayer.LogicalPlan, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="check" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nodes" type="java.util.List"/>
      <exception name="OptimizerException" type="org.apache.pig.impl.plan.optimizer.OptimizerException"/>
    </method>
    <method name="transform"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nodes" type="java.util.List"/>
      <exception name="OptimizerException" type="org.apache.pig.impl.plan.optimizer.OptimizerException"/>
    </method>
    <doc>
    <![CDATA[A visitor to optimize in the following scenario with
 streaming:
 Optimize when LOAD precedes STREAM and the loader class
 is the same as the serializer for the STREAM.
 Similarly optimize when STREAM is followed by store and the
 deserializer class is same as the Storage class.
 Specifically in both these cases the optimization is to
 replace the loader/serializer with BinaryStorage which 
 just moves bytes around and likewise replace the storer/deserializer
 with BinaryStorage]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.optimizer.StreamOptimizer -->
  <!-- start class org.apache.pig.impl.logicalLayer.optimizer.TypeCastInserter -->
  <class name="TypeCastInserter" extends="org.apache.pig.impl.logicalLayer.optimizer.LogicalTransformer"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TypeCastInserter" type="org.apache.pig.impl.logicalLayer.LogicalPlan, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="check" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nodes" type="java.util.List"/>
      <exception name="OptimizerException" type="org.apache.pig.impl.plan.optimizer.OptimizerException"/>
    </method>
    <method name="transform"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nodes" type="java.util.List"/>
      <exception name="OptimizerException" type="org.apache.pig.impl.plan.optimizer.OptimizerException"/>
    </method>
    <doc>
    <![CDATA[A visitor to discover if any schema has been specified for a file being
 loaded.  If so, a projection will be injected into the plan to cast the
 data being loaded to the appropriate types.  The optimizer can then come
 along and move those casts as far down as possible, or in some cases remove
 them altogether.  This visitor does not handle finding the schemas for the 
 file, that has already been done as part of parsing.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.optimizer.TypeCastInserter -->
</package>
<package name="org.apache.pig.impl.logicalLayer.schema">
  <!-- start class org.apache.pig.impl.logicalLayer.schema.Schema -->
  <class name="Schema" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <implements name="java.lang.Cloneable"/>
    <constructor name="Schema"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="Schema" type="java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param fields List of field schemas that describes the fields.]]>
      </doc>
    </constructor>
    <constructor name="Schema" type="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a schema with only one field.
 @param fieldSchema field to put in this schema.]]>
      </doc>
    </constructor>
    <constructor name="Schema" type="org.apache.pig.impl.logicalLayer.schema.Schema"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Copy Constructor.
 @param s source schema]]>
      </doc>
    </constructor>
    <method name="getField" return="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="alias" type="java.lang.String"/>
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
      <doc>
      <![CDATA[Given an alias name, find the associated FieldSchema.
 @param alias Alias to look up.
 @return FieldSchema, or null if no such alias is in this tuple.]]>
      </doc>
    </method>
    <method name="getField" return="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldNum" type="int"/>
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
      <doc>
      <![CDATA[Given a field number, find the associated FieldSchema.

 @param fieldNum
            Field number to look up.
 @return FieldSchema for this field.
 @throws ParseException
             if the field number exceeds the number of fields in the
             tuple.]]>
      </doc>
    </method>
    <method name="size" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Find the number of fields in the schema.

 @return number of fields.]]>
      </doc>
    </method>
    <method name="reconcile"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="other" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
      <doc>
      <![CDATA[Reconcile this schema with another schema.  The schema being reconciled
 with should have the same number of columns.  The use case is where a
 schema already exists but may not have alias and or type information.  If
 an alias exists in this schema and a new one is given, then the new one
 will be used.  Similarly with types, though this needs to be used
 carefully, as types should not be lightly changed.
 @param other Schema to reconcile with.
 @throws ParseException if this cannot be reconciled.]]>
      </doc>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="other" type="java.lang.Object"/>
      <doc>
      <![CDATA[For two schemas to be equal, they have to be deeply equal.
 Use Schema.equals(Schema schema,
                         Schema other,
                         boolean relaxInner,
                         boolean relaxAlias)
       if relaxation of aliases is a requirement.]]>
      </doc>
    </method>
    <method name="clone" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
      <doc>
      <![CDATA[Make a deep copy of a schema.
 @throws CloneNotSupportedException]]>
      </doc>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="stringifySchema"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sb" type="java.lang.StringBuilder"/>
      <param name="schema" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
      <param name="type" type="byte"/>
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="add"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="f" type="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"/>
    </method>
    <method name="getPosition" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="alias" type="java.lang.String"/>
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
      <doc>
      <![CDATA[Given an alias, find the associated position of the field schema.

 @param alias
            alias of the FieldSchema.
 @return position of the FieldSchema.]]>
      </doc>
    </method>
    <method name="addAlias"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="alias" type="java.lang.String"/>
      <param name="fs" type="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"/>
    </method>
    <method name="getAliases" return="java.util.Set"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="printAliases"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFields" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="castable" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cast" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
      <param name="input" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
      <doc>
      <![CDATA[Recursively compare two schemas to check if the input schema 
 can be cast to the cast schema
 @param cast schema of the cast operator
 @param  input schema of the cast input
 @return true or falsew!]]>
      </doc>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="schema" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
      <param name="other" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
      <param name="relaxInner" type="boolean"/>
      <param name="relaxAlias" type="boolean"/>
      <doc>
      <![CDATA[Recursively compare two schemas for equality
 @param schema
 @param other
 @param relaxInner if true, inner schemas will not be checked
 @param relaxAlias if true, aliases will not be checked
 @return true if schemas are equal, false otherwise]]>
      </doc>
    </method>
    <method name="merge" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="other" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
      <param name="otherTakesAliasPrecedence" type="boolean"/>
      <doc>
      <![CDATA[Merge this schema with the other schema
 @param other the other schema to be merged with
 @param otherTakesAliasPrecedence true if aliases from the other
                                  schema take precedence
 @return the merged schema, null if they are not compatible]]>
      </doc>
    </method>
    <method name="mergeSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="schema" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
      <param name="other" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
      <param name="otherTakesAliasPrecedence" type="boolean"/>
      <doc>
      <![CDATA[Recursively merge two schemas
 @param schema the initial schema
 @param other the other schema to be merged with
 @param otherTakesAliasPrecedence true if aliases from the other
                                  schema take precedence
 @return the merged schema, null if they are not compatible]]>
      </doc>
    </method>
    <method name="mergeSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="schema" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
      <param name="other" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
      <param name="otherTakesAliasPrecedence" type="boolean"/>
      <param name="allowDifferentSizeMerge" type="boolean"/>
      <param name="allowIncompatibleTypes" type="boolean"/>
      <exception name="SchemaMergeException" type="org.apache.pig.impl.logicalLayer.schema.SchemaMergeException"/>
      <doc>
      <![CDATA[Recursively merge two schemas
 @param schema the initial schema
 @param other the other schema to be merged with
 @param otherTakesAliasPrecedence true if aliases from the other
                                  schema take precedence
 @param allowDifferentSizeMerge allow merging of schemas of different types
 @param allowIncompatibleTypes 1) if types in schemas are not compatible
                               they will be treated as ByteArray (untyped)
                               2) if schemas in schemas are not compatible
                               and allowIncompatibleTypes is true
                               those inner schemas in the output
                               will be null.
 @return the merged schema this can be null if one schema is null and
         allowIncompatibleTypes is true

 @throws SchemaMergeException if they cannot be merged]]>
      </doc>
    </method>
    <method name="generateNestedSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="topLevelType" type="byte"/>
      <param name="innerTypes" type="byte[]"/>
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
      <doc>
      <![CDATA[@param topLevelType DataType type of the top level element
 @param innerTypes DataType types of the inner level element
 @return nested schema representing type of top level element at first level and inner schema
 representing types of inner element(s)]]>
      </doc>
    </method>
    <method name="mergePrefixSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="other" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
      <param name="otherTakesAliasPrecedence" type="boolean"/>
      <exception name="SchemaMergeException" type="org.apache.pig.impl.logicalLayer.schema.SchemaMergeException"/>
      <doc>
      <![CDATA[Recursively prefix merge two schemas
 @param other the other schema to be merged with
 @param otherTakesAliasPrecedence true if aliases from the other
                                  schema take precedence
 @return the prefix merged schema this can be null if one schema is null and
         allowIncompatibleTypes is true

 @throws SchemaMergeException if they cannot be merged]]>
      </doc>
    </method>
    <method name="mergePrefixSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="other" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
      <param name="otherTakesAliasPrecedence" type="boolean"/>
      <param name="allowMergeableTypes" type="boolean"/>
      <exception name="SchemaMergeException" type="org.apache.pig.impl.logicalLayer.schema.SchemaMergeException"/>
      <doc>
      <![CDATA[Recursively prefix merge two schemas
 @param other the other schema to be merged with
 @param otherTakesAliasPrecedence true if aliases from the other
                                  schema take precedence
 @param allowMergeableTypes true if "mergeable" types should be allowed.
   Two types are mergeable if any of the following conditions is true IN THE 
   BELOW ORDER of checks:
   1) if either one has a type null or unknown and other has a type OTHER THAN
   null or unknown, the result type will be the latter non null/unknown type
   2) If either type is bytearray, then result type will be the other (possibly  non BYTEARRAY) type
   3) If current type can be cast to the other type, then the result type will be the
   other type 
 @return the prefix merged schema this can be null if one schema is null and
         allowIncompatibleTypes is true

 @throws SchemaMergeException if they cannot be merged]]>
      </doc>
    </method>
    <method name="setSchemaDefaultType"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="s" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
      <param name="t" type="byte"/>
      <doc>
      <![CDATA[Recursively set NULL type to the specifid type in a schema
 @param s the schema whose NULL type has to be set 
 @param t the specified type]]>
      </doc>
    </method>
    <method name="isTwoLevelAccessRequired" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the twoLevelAccess]]>
      </doc>
    </method>
    <method name="setTwoLevelAccessRequired"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="twoLevelAccess" type="boolean"/>
      <doc>
      <![CDATA[@param twoLevelAccess the twoLevelAccess to set]]>
      </doc>
    </method>
    <doc>
    <![CDATA[The Schema class encapsulates the notion of a schema for a relational operator.
 A schema is a list of columns that describe the output of a relational operator.
 Each column in the relation is represented as a FieldSchema, a static class inside
 the Schema. A column by definition has an alias, a type and a possible schema (if the
 column is a bag or a tuple). In addition, each column in the schema has a unique
 auto generated name used for tracking the lineage of the column in a sequence of
 statements.

 The lineage of the column is tracked using a map of the predecessors' columns to
 the operators that generate the predecessor columns. The predecessor columns are the
 columns required in order to generate the column under consideration.  Similarly, a
 reverse lookup of operators that generate the predecessor column to the predecessor
 column is maintained.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.schema.Schema -->
  <!-- start class org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema -->
  <class name="Schema.FieldSchema" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <implements name="java.lang.Cloneable"/>
    <constructor name="Schema.FieldSchema" type="java.lang.String, byte"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor for any type.
 
 @param a
            Alias, if known. If unknown leave null.
 @param t
            Type, using codes from
            {@link org.apache.pig.data.DataType}.]]>
      </doc>
    </constructor>
    <constructor name="Schema.FieldSchema" type="java.lang.String, org.apache.pig.impl.logicalLayer.schema.Schema"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor for tuple fields.
 
 @param a
            Alias, if known. If unknown leave null.
 @param s
            Schema of this tuple.]]>
      </doc>
    </constructor>
    <constructor name="Schema.FieldSchema" type="java.lang.String, org.apache.pig.impl.logicalLayer.schema.Schema, byte"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
      <doc>
      <![CDATA[Constructor for tuple fields.
 
 @param a
            Alias, if known. If unknown leave null.
 @param s
            Schema of this tuple.
 @param t
            Type, using codes from
            {@link org.apache.pig.data.DataType}.]]>
      </doc>
    </constructor>
    <constructor name="Schema.FieldSchema" type="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Copy Constructor.
 
 @param fs
           Source FieldSchema]]>
      </doc>
    </constructor>
    <method name="setParent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parentCanonicalName" type="java.lang.String"/>
      <param name="parent" type="org.apache.pig.impl.logicalLayer.LogicalOperator"/>
    </method>
    <method name="getCanonicalMap" return="java.util.Map"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getReverseCanonicalMap" return="org.apache.pig.impl.util.MultiMap"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="other" type="java.lang.Object"/>
      <doc>
      <![CDATA[Two field schemas are equal if types and schemas
  are equal in all levels.

  In order to relax alias equivalent requirement,
  instead use equals(FieldSchema fschema,
                               FieldSchema fother,
                               boolean relaxInner,
                               boolean relaxAlias)]]>
      </doc>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="castable" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="castFs" type="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"/>
      <param name="inputFs" type="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"/>
      <doc>
      <![CDATA[Recursively compare two schemas to check if the input schema 
 can be cast to the cast schema
 @param castFs schema of the cast operator
 @param  inputFs schema of the cast input
 @return true or falsew!]]>
      </doc>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fschema" type="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"/>
      <param name="fother" type="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"/>
      <param name="relaxInner" type="boolean"/>
      <param name="relaxAlias" type="boolean"/>
      <doc>
      <![CDATA[Compare two field schema for equality
 @param fschema
 @param fother
 @param relaxInner If true, we don't check inner tuple schemas
 @param relaxAlias If true, we don't check aliases
 @return true if FieldSchemas are equal, false otherwise]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="clone" return="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
      <doc>
      <![CDATA[Make a deep copy of this FieldSchema and return it.
 @return clone of the this FieldSchema.
 @throws CloneNotSupportedException]]>
      </doc>
    </method>
    <method name="mergePrefixFieldSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="otherFs" type="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"/>
      <exception name="SchemaMergeException" type="org.apache.pig.impl.logicalLayer.schema.SchemaMergeException"/>
      <doc>
      <![CDATA[Recursively prefix merge two schemas
 @param otherFs the other field schema to be merged with
 @return the prefix merged field schema this can be null if one schema is null and
         allowIncompatibleTypes is true

 @throws SchemaMergeException if they cannot be merged]]>
      </doc>
    </method>
    <method name="mergePrefixFieldSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="otherFs" type="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"/>
      <param name="otherTakesAliasPrecedence" type="boolean"/>
      <exception name="SchemaMergeException" type="org.apache.pig.impl.logicalLayer.schema.SchemaMergeException"/>
      <doc>
      <![CDATA[Recursively prefix merge two schemas
 @param otherFs the other field schema to be merged with
 @param otherTakesAliasPrecedence true if aliases from the other
                                  field schema take precedence
 @return the prefix merged field schema this can be null if one schema is null and
         allowIncompatibleTypes is true

 @throws SchemaMergeException if they cannot be merged]]>
      </doc>
    </method>
    <method name="mergePrefixFieldSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="otherFs" type="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"/>
      <param name="otherTakesAliasPrecedence" type="boolean"/>
      <param name="allowMergeableTypes" type="boolean"/>
      <exception name="SchemaMergeException" type="org.apache.pig.impl.logicalLayer.schema.SchemaMergeException"/>
      <doc>
      <![CDATA[Recursively prefix merge two schemas
 @param otherFs the other field schema to be merged with
 @param otherTakesAliasPrecedence true if aliases from the other
                                  field schema take precedence
 @param allowMergeableTypes true if "mergeable" types should be allowed.
   Two types are mergeable if any of the following conditions is true IN THE
   BELOW ORDER of checks:
   1) if either one has a type null or unknown and other has a type OTHER THAN
   null or unknown, the result type will be the latter non null/unknown type
   2) If either type is bytearray, then result type will be the other (possibly non BYTEARRAY) type
   3) If current type can be cast to the other type, then the result type will be the
   other type 
 @return the prefix merged field schema this can be null. 

 @throws SchemaMergeException if they cannot be merged]]>
      </doc>
    </method>
    <method name="setFieldSchemaDefaultType"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fs" type="org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema"/>
      <param name="t" type="byte"/>
      <doc>
      <![CDATA[Recursively set NULL type to the specifid type 
 @param fs the field schema whose NULL type has to be set 
 @param t the specified type]]>
      </doc>
    </method>
    <field name="alias" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Alias for this field.]]>
      </doc>
    </field>
    <field name="type" type="byte"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Datatype, using codes from {@link org.apache.pig.data.DataType}.]]>
      </doc>
    </field>
    <field name="schema" type="org.apache.pig.impl.logicalLayer.schema.Schema"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[If this is a tuple itself, it can have a schema. Otherwise this field
 must be null.]]>
      </doc>
    </field>
    <field name="canonicalName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Canonical name.  This name uniquely identifies a field throughout
 the query.  Unlike a an alias, it cannot be changed.  It will
 change when the field is transformed in some way (such as being
 used in an arithmetic expression or passed to a udf).  At that
 point a new canonical name will be generated for the field.]]>
      </doc>
    </field>
    <field name="canonicalNamer" type="org.apache.pig.impl.logicalLayer.CanonicalNamer"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Canonical namer object to generate new canonical names on
 request. In order to ensure unique and consistent names, across
 all field schema objects, the object is made static.]]>
      </doc>
    </field>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema -->
  <!-- start class org.apache.pig.impl.logicalLayer.schema.SchemaMergeException -->
  <class name="SchemaMergeException" extends="org.apache.pig.impl.logicalLayer.FrontendException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SchemaMergeException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new FrontendException with null as the error message.]]>
      </doc>
    </constructor>
    <constructor name="SchemaMergeException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new FrontendException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user]]>
      </doc>
    </constructor>
    <constructor name="SchemaMergeException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new FrontendException with the specified cause.

 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="SchemaMergeException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new FrontendException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="SchemaMergeException" type="java.lang.String, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new FrontendException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user]]>
      </doc>
    </constructor>
    <constructor name="SchemaMergeException" type="java.lang.String, int, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new FrontendException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="SchemaMergeException" type="java.lang.String, int, byte"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new FrontendException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source]]>
      </doc>
    </constructor>
    <constructor name="SchemaMergeException" type="java.lang.String, int, byte, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new FrontendException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="SchemaMergeException" type="java.lang.String, int, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new FrontendException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param retry - If the exception is retriable or not]]>
      </doc>
    </constructor>
    <constructor name="SchemaMergeException" type="java.lang.String, int, byte, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new FrontendException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source 
 @param retry - If the exception is retriable or not]]>
      </doc>
    </constructor>
    <constructor name="SchemaMergeException" type="java.lang.String, int, byte, boolean, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new FrontendException with the specified message, error code, error source, retriable or not, detalied message for the developer and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source 
 @param retry - If the exception is retriable or not
 @param detailedMsg - The detailed message shown to the developer]]>
      </doc>
    </constructor>
    <constructor name="SchemaMergeException" type="java.lang.String, int, byte, boolean, java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new FrontendException with the specified message, error code, error source, retriable or not, detalied message for the developer and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source 
 @param retry - If the exception is retriable or not
 @param detailedMsg - The detailed message shown to the developer 
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.schema.SchemaMergeException -->
  <!-- start class org.apache.pig.impl.logicalLayer.schema.SchemaUtil -->
  <class name="SchemaUtil" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SchemaUtil"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="newTupleSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tupleName" type="java.lang.String"/>
      <param name="fieldNames" type="java.util.List"/>
      <param name="dataTypes" type="java.util.List"/>
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
      <doc>
      <![CDATA[Create a new tuple schema according the tuple name and two list: names of
 fields, types of fields
 
 @param tupleName
 @param fieldNames
 @param dataTypes
 @return tuple schema
 @throws FrontendException]]>
      </doc>
    </method>
    <method name="newTupleSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tupleName" type="java.lang.String"/>
      <param name="fieldNames" type="java.lang.String[]"/>
      <param name="dataTypes" type="java.lang.Byte[]"/>
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
      <doc>
      <![CDATA[Create a new tuple schema according the tuple name and two arrays: names
 of fields, types of fields
 
 @param tupleName
 @param fieldNames
 @param dataTypes
 @return tuple schema
 @throws FrontendException]]>
      </doc>
    </method>
    <method name="newTupleSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldNames" type="java.util.List"/>
      <param name="dataTypes" type="java.util.List"/>
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
      <doc>
      <![CDATA[Create a new tuple schema according the two list: names of fields, types
 of fields, the default tuple name is t.
 
 @param fieldNames
 @param dataTypes
 @return tuple schema
 @throws FrontendException]]>
      </doc>
    </method>
    <method name="newTupleSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dataTypes" type="java.util.List"/>
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
      <doc>
      <![CDATA[Create a new tuple schema according one list: types of fields, the
 default names of fields are f0,f1,f2..., and the tuple name is t.
 
 @param dataTypes
 @return tuple schema
 @throws FrontendException]]>
      </doc>
    </method>
    <method name="newTupleSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="names" type="java.lang.String[]"/>
      <param name="dataTypes" type="java.lang.Byte[]"/>
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
      <doc>
      <![CDATA[Create a new tuple schema according the two arrays: names of fields,
 types of fields, the default tuple name is t.
 
 @param names
 @param dataTypes
 @return tuple schema
 @throws FrontendException]]>
      </doc>
    </method>
    <method name="newTupleSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dataTypes" type="java.lang.Byte[]"/>
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
      <doc>
      <![CDATA[Create a new tuple schema according one array: types of fields, the
 default names of fields are f0,f1,f2..., and the tuple name is t.
 
 @param dataTypes
 @return tuple schema
 @throws FrontendException]]>
      </doc>
    </method>
    <method name="newBagSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="bagName" type="java.lang.String"/>
      <param name="tupleName" type="java.lang.String"/>
      <param name="fieldNames" type="java.util.List"/>
      <param name="dataTypes" type="java.util.List"/>
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
      <doc>
      <![CDATA[Create a bag schema according the bag name,tuple name and two list: name
 of fields, type of fields
 
 @param bagName
 @param tupleName
 @param fieldNames
 @param dataTypes
 @return bag schema
 @throws FrontendException]]>
      </doc>
    </method>
    <method name="newBagSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="bagName" type="java.lang.String"/>
      <param name="tupleName" type="java.lang.String"/>
      <param name="fieldNames" type="java.lang.String[]"/>
      <param name="dataTypes" type="java.lang.Byte[]"/>
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
    </method>
    <method name="newBagSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="names" type="java.util.List"/>
      <param name="dataTypes" type="java.util.List"/>
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
      <doc>
      <![CDATA[Create a bag schema according two list: name of fields, type of fields,
 and the default bag name is b, the default tuple name is t.
 
 @param names
 @param dataTypes
 @return bag schema
 @throws FrontendException]]>
      </doc>
    </method>
    <method name="newBagSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dataTypes" type="java.util.List"/>
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
      <doc>
      <![CDATA[Create a new tuple schema according one list: types of fields, the
 default names of fields are f0,f1,f2..., and the tuple is t, the bag name
 is b.
 
 @param dataTypes
 @return bag schema
 @throws FrontendException]]>
      </doc>
    </method>
    <method name="newBagSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="names" type="java.lang.String[]"/>
      <param name="dataTypes" type="java.lang.Byte[]"/>
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
      <doc>
      <![CDATA[Create a new tuple schema according two arrays: names of field,types of
 fields. The default tuple name is t, and the bag is b.
 
 @param names
 @param dataTypes
 @return bag schema
 @throws FrontendException]]>
      </doc>
    </method>
    <method name="newBagSchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dataTypes" type="java.lang.Byte[]"/>
      <exception name="FrontendException" type="org.apache.pig.impl.logicalLayer.FrontendException"/>
      <doc>
      <![CDATA[Create a new tuple schema according one array: the type of fields, the
 tuple name is t, and the bag name is b.
 
 @param dataTypes
 @return bag schema
 @throws FrontendException]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A utility class for simplify the schema creation, especially for bag and
 tuple schema. Currently, it only support simple schema creation, nested tuple
 and bag is not supported]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.schema.SchemaUtil -->
</package>
<package name="org.apache.pig.impl.logicalLayer.validators">
  <!-- start class org.apache.pig.impl.logicalLayer.validators.InputOutputFileValidator -->
  <class name="InputOutputFileValidator" extends="org.apache.pig.impl.plan.PlanValidator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="InputOutputFileValidator" type="org.apache.pig.impl.PigContext"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="validate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="plan" type="org.apache.pig.impl.logicalLayer.LogicalPlan"/>
      <param name="messageCollector" type="org.apache.pig.impl.plan.CompilationMessageCollector"/>
      <exception name="PlanValidationException" type="org.apache.pig.impl.plan.PlanValidationException"/>
    </method>
    <doc>
    <![CDATA[This validator does check
 1) Input files referred to by all LOLoads exist
 2) Output files referred to by all LOStores do not exist]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.validators.InputOutputFileValidator -->
  <!-- start class org.apache.pig.impl.logicalLayer.validators.InputOutputFileVisitor -->
  <class name="InputOutputFileVisitor" extends="org.apache.pig.impl.logicalLayer.LOVisitor"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="InputOutputFileVisitor" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.CompilationMessageCollector, org.apache.pig.impl.PigContext"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="store" type="org.apache.pig.impl.logicalLayer.LOStore"/>
      <exception name="PlanValidationException" type="org.apache.pig.impl.plan.PlanValidationException"/>
      <doc>
      <![CDATA[The logic here is just to check that the file(s) do not exist]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Visitor for checking input/output files
 Exceptions in here do not affect later operations
 so we don't throw any exception but log all of 
 them in msgCollector.
 
 We assume input/output files can exist only in the top level plan.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.validators.InputOutputFileVisitor -->
  <!-- start class org.apache.pig.impl.logicalLayer.validators.LogicalPlanValidationExecutor -->
  <class name="LogicalPlanValidationExecutor" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.impl.plan.PlanValidationExecutor"/>
    <constructor name="LogicalPlanValidationExecutor" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.PigContext"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[All the necessary validation logics can be plugged-in here.
 Logics are executed from head to tail of the List.
 
 In the PIG-111 Configuration patch, we can call 
 pigContext.getProperties which holds current configuration
 set. This allows us to let users enable/disable some validation
 logics. The code will look like this:-
 
 if ((Boolean)pigContext.getProperties().getProperty("pig.compiler.validationX") ) {
      validatorList.add(new ValidationLogicX(plan)) ;
 }]]>
      </doc>
    </constructor>
    <method name="validate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="plan" type="org.apache.pig.impl.logicalLayer.LogicalPlan"/>
      <param name="msgCollector" type="org.apache.pig.impl.plan.CompilationMessageCollector"/>
      <exception name="PlanValidationException" type="org.apache.pig.impl.plan.PlanValidationException"/>
    </method>
    <doc>
    <![CDATA[This class is responsible for all logical plan validations
 after the parsing stage. 
 All the validation logics should be added in the constructor.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.validators.LogicalPlanValidationExecutor -->
  <!-- start class org.apache.pig.impl.logicalLayer.validators.TypeCheckerException -->
  <class name="TypeCheckerException" extends="org.apache.pig.impl.plan.VisitorException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TypeCheckerException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new TypeCheckerException with null as the error message.]]>
      </doc>
    </constructor>
    <constructor name="TypeCheckerException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new TypeCheckerException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user]]>
      </doc>
    </constructor>
    <constructor name="TypeCheckerException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new TypeCheckerException with the specified cause.

 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="TypeCheckerException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new TypeCheckerException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="TypeCheckerException" type="java.lang.String, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new TypeCheckerException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user]]>
      </doc>
    </constructor>
    <constructor name="TypeCheckerException" type="java.lang.String, int, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new TypeCheckerException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="TypeCheckerException" type="java.lang.String, int, byte"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new TypeCheckerException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source]]>
      </doc>
    </constructor>
    <constructor name="TypeCheckerException" type="java.lang.String, int, byte, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new TypeCheckerException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="TypeCheckerException" type="java.lang.String, int, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new TypeCheckerException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param retry - If the exception is retriable or not]]>
      </doc>
    </constructor>
    <constructor name="TypeCheckerException" type="java.lang.String, int, byte, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new TypeCheckerException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source 
 @param retry - If the exception is retriable or not]]>
      </doc>
    </constructor>
    <constructor name="TypeCheckerException" type="java.lang.String, int, byte, boolean, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new TypeCheckerException with the specified message, error code, error source, retriable or not, detalied message for the developer and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source 
 @param retry - If the exception is retriable or not
 @param detailedMsg - The detailed message shown to the developer]]>
      </doc>
    </constructor>
    <constructor name="TypeCheckerException" type="java.lang.String, int, byte, boolean, java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new TypeCheckerException with the specified message, error code, error source, retriable or not, detalied message for the developer and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source 
 @param retry - If the exception is retriable or not
 @param detailedMsg - The detailed message shown to the developer 
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.validators.TypeCheckerException -->
  <!-- start class org.apache.pig.impl.logicalLayer.validators.TypeCheckingValidator -->
  <class name="TypeCheckingValidator" extends="org.apache.pig.impl.plan.PlanValidator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TypeCheckingValidator"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="validate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="plan" type="org.apache.pig.impl.logicalLayer.LogicalPlan"/>
      <param name="msgCollector" type="org.apache.pig.impl.plan.CompilationMessageCollector"/>
      <exception name="PlanValidationException" type="org.apache.pig.impl.plan.PlanValidationException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.validators.TypeCheckingValidator -->
  <!-- start class org.apache.pig.impl.logicalLayer.validators.TypeCheckingVisitor -->
  <class name="TypeCheckingVisitor" extends="org.apache.pig.impl.logicalLayer.LOVisitor"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TypeCheckingVisitor" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.plan.CompilationMessageCollector"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="eOp" type="org.apache.pig.impl.logicalLayer.ExpressionOperator"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="lOp" type="org.apache.pig.impl.logicalLayer.LogicalOperator"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="pj" type="org.apache.pig.impl.logicalLayer.LOProject"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="cs" type="org.apache.pig.impl.logicalLayer.LOConst"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[LOConst. Type information should be associated with LOConst
 in the parsing stage so we don't need any logic here]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="map" type="org.apache.pig.impl.logicalLayer.LOMapLookup"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="rg" type="org.apache.pig.impl.logicalLayer.LORegexp"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[LORegexp expects CharArray as input
 Itself always returns Boolean
 @param rg]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="binOp" type="org.apache.pig.impl.logicalLayer.LOAnd"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="binOp" type="org.apache.pig.impl.logicalLayer.LOOr"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="binOp" type="org.apache.pig.impl.logicalLayer.LOMultiply"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="binOp" type="org.apache.pig.impl.logicalLayer.LODivide"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="binOp" type="org.apache.pig.impl.logicalLayer.LOAdd"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="binOp" type="org.apache.pig.impl.logicalLayer.LOSubtract"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="binOp" type="org.apache.pig.impl.logicalLayer.LOGreaterThan"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="binOp" type="org.apache.pig.impl.logicalLayer.LOGreaterThanEqual"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="binOp" type="org.apache.pig.impl.logicalLayer.LOLesserThan"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="binOp" type="org.apache.pig.impl.logicalLayer.LOLesserThanEqual"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="binOp" type="org.apache.pig.impl.logicalLayer.LOEqual"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="binOp" type="org.apache.pig.impl.logicalLayer.LONotEqual"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="binOp" type="org.apache.pig.impl.logicalLayer.LOMod"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="uniOp" type="org.apache.pig.impl.logicalLayer.LONegative"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="uniOp" type="org.apache.pig.impl.logicalLayer.LONot"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="uniOp" type="org.apache.pig.impl.logicalLayer.LOIsNull"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="uniOp" type="org.apache.pig.impl.logicalLayer.UnaryExpressionOperator"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[Currently, there are two unaryOps: Neg and Not.]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="func" type="org.apache.pig.impl.logicalLayer.LOUserFunc"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="schemaEqualsForMatching" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="inputSchema" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
      <param name="udfSchema" type="org.apache.pig.impl.logicalLayer.schema.Schema"/>
      <param name="ignoreByteArrays" type="boolean"/>
      <doc>
      <![CDATA[Compare two schemas for equality for argument matching purposes. This is
 a more relaxed form of Schema.equals wherein first the Datatypes of the
 field schema are checked for equality. Then if a field schema in the udf
 schema is for a complex type AND if the inner schema is NOT null, check
 for schema equality of the inner schemas of the UDF field schema and
 input field schema
 
 @param inputSchema
 @param udfSchema
 @param ignoreByteArrays
 @return true if FieldSchemas are equal for argument matching, false
         otherwise]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="binCond" type="org.apache.pig.impl.logicalLayer.LOBinCond"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[For Bincond, lhsOp and rhsOp must have the same output type
 or both sides have to be number]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="cast" type="org.apache.pig.impl.logicalLayer.LOCast"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[For Basic Types:
 0) Casting to itself is always ok
 1) Casting from number to number is always ok 
 2) ByteArray to anything is ok
 3) (number or chararray) to (bytearray or chararray) is ok
 For Composite Types:
 Recursively traverse the schemas till you get a basic type]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="u" type="org.apache.pig.impl.logicalLayer.LOUnion"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOSplitOutput"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LODistinct"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[LODistinct, output schema should be the same as input
 @param op
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOLimit"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="cs" type="org.apache.pig.impl.logicalLayer.LOCross"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[Return concatenated of all fields from all input operators
 If one of the inputs have no schema then we cannot construct
 the output schema.
 @param cs
 @throws VisitorException]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="s" type="org.apache.pig.impl.logicalLayer.LOSort"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[The schema of sort output will be the same as sort input.]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="filter" type="org.apache.pig.impl.logicalLayer.LOFilter"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[The schema of filter output will be the same as filter input]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="split" type="org.apache.pig.impl.logicalLayer.LOSplit"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[The schema of split output will be the same as split input]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="frj" type="org.apache.pig.impl.logicalLayer.LOFRJoin"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[Mimics the type checking of LOCogroup]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="cg" type="org.apache.pig.impl.logicalLayer.LOCogroup"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[COGroup
 All group by cols from all inputs have to be of the
 same type]]>
      </doc>
    </method>
    <method name="getAtomicGroupByType" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cg" type="org.apache.pig.impl.logicalLayer.LOCogroup"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[This can be used to get the merged type of output group col
 only when the group col is of atomic type
 TODO: This doesn't work with group by complex type
 @return The type of the group by]]>
      </doc>
    </method>
    <method name="getTupleGroupBySchema" return="org.apache.pig.impl.logicalLayer.schema.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cg" type="org.apache.pig.impl.logicalLayer.LOCogroup"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="f" type="org.apache.pig.impl.logicalLayer.LOForEach"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[Output schema of LOForEach is a tuple schma
 which is the output of all inner plans

 Flatten also has to be taken care on in here]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="load" type="org.apache.pig.impl.logicalLayer.LOLoad"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="store" type="org.apache.pig.impl.logicalLayer.LOStore"/>
    </method>
    <field name="castLookup" type="org.apache.pig.impl.util.MultiMap"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Visitor for type checking. For simplicity of the first implementation,
 we throw exception immediately once something doesn't look alright.
 This is not quite smart e.g. if the plan has another unrelated branch.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.logicalLayer.validators.TypeCheckingVisitor -->
</package>
<package name="org.apache.pig.impl.plan">
  <!-- start class org.apache.pig.impl.plan.CompilationMessageCollector -->
  <class name="CompilationMessageCollector" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.Iterable"/>
    <constructor name="CompilationMessageCollector"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="collect"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="message" type="java.lang.String"/>
      <param name="messageType" type="org.apache.pig.impl.plan.CompilationMessageCollector.MessageType"/>
    </method>
    <method name="collect"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="message" type="java.lang.String"/>
      <param name="messageType" type="org.apache.pig.impl.plan.CompilationMessageCollector.MessageType"/>
      <param name="kind" type="java.lang.Enum"/>
    </method>
    <method name="hasMessageType" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="messageType" type="org.apache.pig.impl.plan.CompilationMessageCollector.MessageType"/>
    </method>
    <method name="hasError" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="iterator" return="java.util.Iterator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hasMessage" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="size" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="get" return="org.apache.pig.impl.plan.CompilationMessageCollector.Message"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="int"/>
    </method>
    <method name="getKindAggregate" return="java.util.Map"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="messageType" type="org.apache.pig.impl.plan.CompilationMessageCollector.MessageType"/>
    </method>
    <method name="logAggregate"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="aggMap" type="java.util.Map"/>
      <param name="messageType" type="org.apache.pig.impl.plan.CompilationMessageCollector.MessageType"/>
      <param name="log" type="org.apache.commons.logging.Log"/>
    </method>
    <method name="logMessages"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="messageCollector" type="org.apache.pig.impl.plan.CompilationMessageCollector"/>
      <param name="messageType" type="org.apache.pig.impl.plan.CompilationMessageCollector.MessageType"/>
      <param name="aggregate" type="boolean"/>
      <param name="log" type="org.apache.commons.logging.Log"/>
    </method>
    <method name="logMessages"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="messageType" type="org.apache.pig.impl.plan.CompilationMessageCollector.MessageType"/>
      <param name="aggregate" type="boolean"/>
      <param name="log" type="org.apache.commons.logging.Log"/>
    </method>
    <method name="logAllMessages"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="messageCollector" type="org.apache.pig.impl.plan.CompilationMessageCollector"/>
      <param name="log" type="org.apache.commons.logging.Log"/>
    </method>
    <method name="logAllMessages"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="log" type="org.apache.commons.logging.Log"/>
    </method>
    <doc>
    <![CDATA[This class is used for collecting all messages (error + warning) in 
 compilation process. These messages are reported back to users 
 at the end of compilation.
 
 iterator() has to be called after CompilationMessageCollector is fully 
 populated otherwise the state is undefined.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.plan.CompilationMessageCollector -->
  <!-- start class org.apache.pig.impl.plan.CompilationMessageCollector.Message -->
  <class name="CompilationMessageCollector.Message" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="CompilationMessageCollector.Message" type="java.lang.String, org.apache.pig.impl.plan.CompilationMessageCollector.MessageType"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="CompilationMessageCollector.Message" type="java.lang.String, org.apache.pig.impl.plan.CompilationMessageCollector.MessageType, java.lang.Enum"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getMessage" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getMessageType" return="org.apache.pig.impl.plan.CompilationMessageCollector.MessageType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getKind" return="java.lang.Enum"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.impl.plan.CompilationMessageCollector.Message -->
  <!-- start class org.apache.pig.impl.plan.CompilationMessageCollector.MessageType -->
  <class name="CompilationMessageCollector.MessageType" extends="java.lang.Enum"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.apache.pig.impl.plan.CompilationMessageCollector.MessageType[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.apache.pig.impl.plan.CompilationMessageCollector.MessageType"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <field name="Unknown" type="org.apache.pig.impl.plan.CompilationMessageCollector.MessageType"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="Error" type="org.apache.pig.impl.plan.CompilationMessageCollector.MessageType"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="Warning" type="org.apache.pig.impl.plan.CompilationMessageCollector.MessageType"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="Info" type="org.apache.pig.impl.plan.CompilationMessageCollector.MessageType"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.impl.plan.CompilationMessageCollector.MessageType -->
  <!-- start class org.apache.pig.impl.plan.DependencyOrderWalker -->
  <class name="DependencyOrderWalker" extends="org.apache.pig.impl.plan.PlanWalker"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DependencyOrderWalker" type="org.apache.pig.impl.plan.OperatorPlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan Plan for this walker to traverse.]]>
      </doc>
    </constructor>
    <method name="walk"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="visitor" type="org.apache.pig.impl.plan.PlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[Begin traversing the graph.
 @param visitor Visitor this walker is being used by.
 @throws VisitorException if an error is encountered while walking.]]>
      </doc>
    </method>
    <method name="spawnChildWalker" return="org.apache.pig.impl.plan.PlanWalker"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="plan" type="org.apache.pig.impl.plan.OperatorPlan"/>
    </method>
    <method name="doAllPredecessors"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="node" type="org.apache.pig.impl.plan.Operator"/>
      <param name="seen" type="java.util.Set"/>
      <param name="fifo" type="java.util.Collection"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <doc>
    <![CDATA[DependencyOrderWalker traverses the graph in such a way that no node is visited
 before all the nodes it depends on have been visited.  Beyond this, it does not
 guarantee any particular order.  So, you have a graph with node 1 2 3 4, and
 edges 1->3, 2->3, and 3->4, this walker guarnatees that 1 and 2 will be visited
 before 3 and 3 before 4, but it does not guarantee whether 1 or 2 will be
 visited first.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.plan.DependencyOrderWalker -->
  <!-- start class org.apache.pig.impl.plan.DependencyOrderWalkerWOSeenChk -->
  <class name="DependencyOrderWalkerWOSeenChk" extends="org.apache.pig.impl.plan.PlanWalker"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DependencyOrderWalkerWOSeenChk" type="org.apache.pig.impl.plan.OperatorPlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan Plan for this walker to traverse.]]>
      </doc>
    </constructor>
    <method name="walk"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="visitor" type="org.apache.pig.impl.plan.PlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[Begin traversing the graph.
 @param visitor Visitor this walker is being used by.
 @throws VisitorException if an error is encountered while walking.]]>
      </doc>
    </method>
    <method name="spawnChildWalker" return="org.apache.pig.impl.plan.PlanWalker"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="plan" type="org.apache.pig.impl.plan.OperatorPlan"/>
    </method>
    <doc>
    <![CDATA[DependencyOrderWalker traverses the graph in such a way that no node is visited
 before all the nodes it depends on have been visited.  Beyond this, it does not
 guarantee any particular order.  So, you have a graph with node 1 2 3 4, and
 edges 1->3, 2->3, and 3->4, this walker guarnatees that 1 and 2 will be visited
 before 3 and 3 before 4, but it does not guarantee whether 1 or 2 will be
 visited first.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.plan.DependencyOrderWalkerWOSeenChk -->
  <!-- start class org.apache.pig.impl.plan.DepthFirstWalker -->
  <class name="DepthFirstWalker" extends="org.apache.pig.impl.plan.PlanWalker"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DepthFirstWalker" type="org.apache.pig.impl.plan.OperatorPlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan Plan for this walker to traverse.]]>
      </doc>
    </constructor>
    <method name="walk"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="visitor" type="org.apache.pig.impl.plan.PlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[Begin traversing the graph.
 @param visitor Visitor this walker is being used by.
 @throws VisitorException if an error is encountered while walking.]]>
      </doc>
    </method>
    <method name="spawnChildWalker" return="org.apache.pig.impl.plan.PlanWalker"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="plan" type="org.apache.pig.impl.plan.OperatorPlan"/>
    </method>
    <doc>
    <![CDATA[DepthFirstWalker traverses a plan in a depth first manner.  One important note
 is that, in compliance with the PlanWalker contract, it only visits each node in
 the graph once.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.plan.DepthFirstWalker -->
  <!-- start class org.apache.pig.impl.plan.DotPlanDumper -->
  <class name="DotPlanDumper" extends="org.apache.pig.impl.plan.PlanDumper"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DotPlanDumper" type="org.apache.pig.impl.plan.OperatorPlan, java.io.PrintStream"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="DotPlanDumper" type="org.apache.pig.impl.plan.OperatorPlan, java.io.PrintStream, boolean, java.util.Set, java.util.Set, java.util.Set"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <method name="dump"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="dumpMultiInputNestedOperator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.plan.Operator"/>
      <param name="plans" type="org.apache.pig.impl.util.MultiMap"/>
    </method>
    <method name="dumpMultiOutputNestedOperator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.plan.Operator"/>
      <param name="plans" type="java.util.Collection"/>
    </method>
    <method name="dumpNestedOperator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.plan.Operator"/>
      <param name="plans" type="java.util.Collection"/>
    </method>
    <method name="dumpOperator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.plan.Operator"/>
    </method>
    <method name="dumpEdge"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.plan.Operator"/>
      <param name="suc" type="org.apache.pig.impl.plan.Operator"/>
    </method>
    <method name="makeDumper" return="org.apache.pig.impl.plan.PlanDumper"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="plan" type="org.apache.pig.impl.plan.OperatorPlan"/>
      <param name="ps" type="java.io.PrintStream"/>
    </method>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.plan.Operator"/>
      <doc>
      <![CDATA[Used to generate the label for an operator.
 @param op operator to dump]]>
      </doc>
    </method>
    <method name="getAttributes" return="java.lang.String[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.plan.Operator"/>
      <doc>
      <![CDATA[Used to generate the the attributes of a node
 @param op operator]]>
      </doc>
    </method>
    <method name="dumpInvisibleOperators"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.plan.Operator"/>
    </method>
    <field name="mSubgraphs" type="java.util.Set"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="mMultiInputSubgraphs" type="java.util.Set"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="mMultiOutputSubgraphs" type="java.util.Set"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[This class puts everything that is needed to dump a plan in a
 format readable by graphviz's dot algorithm. Out of the box it does
 not print any nested plans.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.plan.DotPlanDumper -->
  <!-- start class org.apache.pig.impl.plan.NodeIdGenerator -->
  <class name="NodeIdGenerator" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getGenerator" return="org.apache.pig.impl.plan.NodeIdGenerator"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNextNodeId" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="scope" type="java.lang.String"/>
    </method>
    <method name="reset"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="scope" type="java.lang.String"/>
    </method>
  </class>
  <!-- end class org.apache.pig.impl.plan.NodeIdGenerator -->
  <!-- start class org.apache.pig.impl.plan.Operator -->
  <class name="Operator" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <implements name="java.lang.Comparable"/>
    <implements name="java.lang.Cloneable"/>
    <constructor name="Operator" type="org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param k Operator key to assign to this node.]]>
      </doc>
    </constructor>
    <method name="getOperatorKey" return="org.apache.pig.impl.plan.OperatorKey"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the operator key for this operator.]]>
      </doc>
    </method>
    <method name="visit"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.plan.PlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[Visit this node with the provided visitor. This should only be called by
 the visitor class itself, never directly.
 
 @param v
            Visitor to visit with.
 @throws VisitorException
             if the visitor has a problem.]]>
      </doc>
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Indicates whether this operator supports multiple inputs.
 
 @return true if it does, otherwise false.]]>
      </doc>
    </method>
    <method name="supportsMultipleOutputs" return="boolean"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Indicates whether this operator supports multiple outputs.
 
 @return true if it does, otherwise false.]]>
      </doc>
    </method>
    <method name="name" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
      <doc>
      <![CDATA[Compares to Operators based on their opKey]]>
      </doc>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Needed to ensure that the list iterators'
 outputs are deterministic. Without this
 we are totally at object id's mercy.]]>
      </doc>
    </method>
    <method name="compareTo" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="org.apache.pig.impl.plan.Operator"/>
    </method>
    <method name="clone" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
      <doc>
      <![CDATA[@see java.lang.Object#clone()
 Do not use the clone method directly. Operators are cloned when logical plans
 are cloned using {@link LogicalPlanCloner}]]>
      </doc>
    </method>
    <field name="mKey" type="org.apache.pig.impl.plan.OperatorKey"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[OperatorKey associated with this operator. This key is used to find the
 operator in an OperatorPlan.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Base class for all types of operators.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.plan.Operator -->
  <!-- start class org.apache.pig.impl.plan.OperatorKey -->
  <class name="OperatorKey" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <implements name="java.lang.Comparable"/>
    <constructor name="OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="OperatorKey" type="java.lang.String, long"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getScope" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getId" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="compareTo" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="org.apache.pig.impl.plan.OperatorKey"/>
    </method>
    <method name="genOpKey" return="org.apache.pig.impl.plan.OperatorKey"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="scope" type="java.lang.String"/>
      <doc>
      <![CDATA[Utility function for creating operator keys.
 @param scope Scope to use in creating the key.
 @return new operator key.]]>
      </doc>
    </method>
    <field name="scope" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="id" type="long"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.impl.plan.OperatorKey -->
  <!-- start class org.apache.pig.impl.plan.OperatorPlan -->
  <class name="OperatorPlan" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.Iterable"/>
    <implements name="java.io.Serializable"/>
    <implements name="java.lang.Cloneable"/>
    <constructor name="OperatorPlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getRoots" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get a list of all nodes in the graph that are roots.  A root is defined to
 be a node that has no input.]]>
      </doc>
    </method>
    <method name="getLeaves" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get a list of all nodes in the graph that are leaves.  A leaf is defined to
 be a node that has no output.]]>
      </doc>
    </method>
    <method name="getOperatorKey" return="org.apache.pig.impl.plan.OperatorKey"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.plan.Operator"/>
      <doc>
      <![CDATA[Given an operator, find its OperatorKey.
 @param op Logical operator.
 @return associated OperatorKey]]>
      </doc>
    </method>
    <method name="getOperator" return="org.apache.pig.impl.plan.Operator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="opKey" type="org.apache.pig.impl.plan.OperatorKey"/>
      <doc>
      <![CDATA[Given an OperatorKey, find the associated operator.
 @param opKey OperatorKey
 @return associated operator.]]>
      </doc>
    </method>
    <method name="getKeys" return="java.util.Map"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the map of operator key and associated operators
 @return map of operator key and operators.]]>
      </doc>
    </method>
    <method name="add"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.plan.Operator"/>
      <doc>
      <![CDATA[Insert an operator into the plan.  This only inserts it as a node in
 the graph, it does not connect it to any other operators.  That should
 be done as a separate step using connect.
 @param op Operator to add to the plan.]]>
      </doc>
    </method>
    <method name="connect"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="from" type="org.apache.pig.impl.plan.Operator"/>
      <param name="to" type="org.apache.pig.impl.plan.Operator"/>
      <exception name="PlanException" type="org.apache.pig.impl.plan.PlanException"/>
      <doc>
      <![CDATA[Create an edge between two nodes.  The direction of the edge implies data
 flow.
 @param from Operator data will flow from.
 @param to Operator data will flow to.
 @throws PlanException if this edge will create multiple inputs for an
 operator that does not support multiple inputs or create multiple outputs
 for an operator that does not support multiple outputs.]]>
      </doc>
    </method>
    <method name="disconnect" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="from" type="org.apache.pig.impl.plan.Operator"/>
      <param name="to" type="org.apache.pig.impl.plan.Operator"/>
      <doc>
      <![CDATA[Remove an edge from between two nodes. 
 Use {@link org.apache.pig.impl.plan.OperatorPlan#insertBetween(Operator, Operator, Operator)} 
 if disconnect is used in the process of inserting a new node between two nodes 
 by calling disconnect followed by a connect.
 @param from Operator data would flow from.
 @param to Operator data would flow to.
 @return true if the nodes were connected according to the specified data
 flow, false otherwise.]]>
      </doc>
    </method>
    <method name="remove"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.plan.Operator"/>
      <doc>
      <![CDATA[Remove an operator from the plan.  Any edges that the node has will
 be removed as well.
 @param op Operator to remove.]]>
      </doc>
    </method>
    <method name="trimBelow"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.plan.Operator"/>
      <doc>
      <![CDATA[Trim everything below a given operator.  The specified operator will
 NOT be removed.
 @param op Operator to trim everything after.]]>
      </doc>
    </method>
    <method name="trimAbove"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.plan.Operator"/>
      <doc>
      <![CDATA[Trim everything above a given operator.  The specified operator will
 NOT be removed.
 @param op Operator to trim everything before.]]>
      </doc>
    </method>
    <method name="getPredecessors" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.plan.Operator"/>
      <doc>
      <![CDATA[Find all of the nodes that have edges to the indicated node from
 themselves.
 @param op Node to look to
 @return Collection of nodes.]]>
      </doc>
    </method>
    <method name="getSuccessors" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.plan.Operator"/>
      <doc>
      <![CDATA[Find all of the nodes that have edges from the indicated node to
 themselves.
 @param op Node to look from
 @return Collection of nodes.]]>
      </doc>
    </method>
    <method name="iterator" return="java.util.Iterator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="merge" return="org.apache.pig.impl.plan.OperatorPlan"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="inpPlan" type="org.apache.pig.impl.plan.OperatorPlan"/>
      <exception name="PlanException" type="org.apache.pig.impl.plan.PlanException"/>
      <doc>
      <![CDATA[Merges the operators in the incoming operPlan with
 this plan's operators. By merging I mean just making
 a combined graph with each one as a component
 It doesn't support merging of shared plans
 @param inpPlan
 @return this pointer
 @throws PlanException]]>
      </doc>
    </method>
    <method name="mergeSharedPlan" return="org.apache.pig.impl.plan.OperatorPlan"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="inpPlan" type="org.apache.pig.impl.plan.OperatorPlan"/>
      <exception name="PlanException" type="org.apache.pig.impl.plan.PlanException"/>
      <doc>
      <![CDATA[Merges the operators in the incoming plan with this plan's operators.
 The plans can have shared components. 

 @param inpPlan
 @return this pointer
 @throws PlanException]]>
      </doc>
    </method>
    <method name="addAsLeaf"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="leaf" type="org.apache.pig.impl.plan.Operator"/>
      <exception name="PlanException" type="org.apache.pig.impl.plan.PlanException"/>
      <doc>
      <![CDATA[Utility method heavily used in the MRCompiler
 Adds the leaf operator to the plan and connects
 all existing leaves to the new leaf
 @param leaf
 @throws PlanException]]>
      </doc>
    </method>
    <method name="isSingleLeafPlan" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="size" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="insertBetween"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="after" type="org.apache.pig.impl.plan.Operator"/>
      <param name="newNode" type="org.apache.pig.impl.plan.Operator"/>
      <param name="before" type="org.apache.pig.impl.plan.Operator"/>
      <exception name="PlanException" type="org.apache.pig.impl.plan.PlanException"/>
      <doc>
      <![CDATA[Given two connected nodes add another node between them.
 'newNode' will be placed in same position in predecessor list as 'before' (old node).
 @param after Node to insert this node after
 @param newNode new node to insert.  This node must have already been
 added to the plan.
 @param before Node to insert this node before
 @throws PlanException if it encounters trouble disconnecting or
 connecting nodes.]]>
      </doc>
    </method>
    <method name="replace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="oldNode" type="org.apache.pig.impl.plan.Operator"/>
      <param name="newNode" type="org.apache.pig.impl.plan.Operator"/>
      <exception name="PlanException" type="org.apache.pig.impl.plan.PlanException"/>
      <doc>
      <![CDATA[Replace an existing node in the graph with a new node.  The new node
 will be connected to all the nodes the old node was.  The old node will
 be removed.
 @param oldNode Node to be replaced
 @param newNode Node to add in place of oldNode
 @throws PlanException]]>
      </doc>
    </method>
    <method name="removeAndReconnect"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.apache.pig.impl.plan.Operator"/>
      <exception name="PlanException" type="org.apache.pig.impl.plan.PlanException"/>
      <doc>
      <![CDATA[Remove a node in a way that connects the node's predecessor (if any)
 with the node's successor (if any).  This function does not handle the
 case where the node has multiple predecessors or successors.
 @param node Node to be removed
 @throws PlanException if the node has more than one predecessor or
 successor.]]>
      </doc>
    </method>
    <method name="removeAndReconnectMultiSucc"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="node" type="org.apache.pig.impl.plan.Operator"/>
      <exception name="PlanException" type="org.apache.pig.impl.plan.PlanException"/>
      <doc>
      <![CDATA[Remove a node in a way that connects the node's predecessor (if any)
 with the node's successors (if any).  This function handles the
 case where the node has *one* predecessor and one or more successors.
 It replaces the predecessor in same position as node was in
 each of the successors predecessor list(getPredecessors()), to 
 preserve input ordering 
 for eg, it is used to remove redundant project(*) from plan
 which will have only one predecessor,but can have multiple success
 @param node Node to be removed
 @throws PlanException if the node has more than one predecessor]]>
      </doc>
    </method>
    <method name="dump"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ps" type="java.io.PrintStream"/>
    </method>
    <method name="explain"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.OutputStream"/>
      <param name="ps" type="java.io.PrintStream"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="swap"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="first" type="org.apache.pig.impl.plan.Operator"/>
      <param name="second" type="org.apache.pig.impl.plan.Operator"/>
      <exception name="PlanException" type="org.apache.pig.impl.plan.PlanException"/>
      <doc>
      <![CDATA[Swap two operators in a plan.  Both of the operators must have single
 inputs and single outputs.
 @param first operator
 @param second operator
 @throws PlanException if either operator is not single input and output.]]>
      </doc>
    </method>
    <method name="pushBefore"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="first" type="org.apache.pig.impl.plan.Operator"/>
      <param name="second" type="org.apache.pig.impl.plan.Operator"/>
      <param name="inputNum" type="int"/>
      <exception name="PlanException" type="org.apache.pig.impl.plan.PlanException"/>
      <doc>
      <![CDATA[Push one operator in front of another.  This function is for use when
 the first operator has multiple inputs.  The caller can specify
 which input of the first operator the second operator should be pushed to.
 @param first operator, assumed to have multiple inputs.
 @param second operator, will be pushed in front of first
 @param inputNum indicates which input of the first operator the second
 operator will be pushed onto.  Numbered from 0.
 @throws PlanException if inputNum does not exist for first operator]]>
      </doc>
    </method>
    <method name="pushAfter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="first" type="org.apache.pig.impl.plan.Operator"/>
      <param name="second" type="org.apache.pig.impl.plan.Operator"/>
      <param name="outputNum" type="int"/>
      <exception name="PlanException" type="org.apache.pig.impl.plan.PlanException"/>
      <doc>
      <![CDATA[Push one operator after another.  This function is for use when the second
 operator has multiple outputs.  The caller can specify which output of the
 second operator the first operator should be pushed to.
 @param first operator, assumed to have multiple outputs
 @param second operator, will be pushed after the first operator
 @param outputNum indicates which output of the first operator the second 
 operator will be pushed onto.  Numbered from 0.
 @throws PlanException if outputNum does not exist for first operator]]>
      </doc>
    </method>
    <field name="mOps" type="java.util.Map"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="mKeys" type="java.util.Map"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="mFromEdges" type="org.apache.pig.impl.util.MultiMap"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="mToEdges" type="org.apache.pig.impl.util.MultiMap"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="log" type="org.apache.commons.logging.Log"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[A generic graphing class for use by LogicalPlan, PhysicalPlan, etc.  One
 important aspect of this package is that it guarantees that once a graph is
 constructed, manipulations on that graph will maintain the ordering of
 inputs and outputs for a given node.  That is, if a node has two inputs, 0
 and 1, it is guaranteed that everytime it asks for its inputs, it will
 receive them in the same order.  This allows operators that need to
 distinguish their inputs (such as binary operators that need to know left
 from right) to work without needing to store their inputs themselves.  This
 is an extra burden on the graph package and not in line with the way graphs
 are generally understood mathematically.  But it greatly reducing the need
 for graph manipulators (such as the validators and optimizers) to
 understand the internals of various nodes.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.plan.OperatorPlan -->
  <!-- start class org.apache.pig.impl.plan.PlanDumper -->
  <class name="PlanDumper" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PlanDumper" type="org.apache.pig.impl.plan.OperatorPlan, java.io.PrintStream"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setVerbose"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="verbose" type="boolean"/>
    </method>
    <method name="isVerbose" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="dump"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This is the public interface. Dump writes the plan and nested
 plans to the stream.]]>
      </doc>
    </method>
    <method name="makeDumper" return="org.apache.pig.impl.plan.PlanDumper"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="plan" type="org.apache.pig.impl.plan.OperatorPlan"/>
      <param name="ps" type="java.io.PrintStream"/>
      <doc>
      <![CDATA[makeDumper is a factory method. Used by subclasses to specify
 what dumper should handle the nested plan.
 @param plan Plan that the new dumper should handle
 @return the dumper for plan]]>
      </doc>
    </method>
    <method name="dumpOperator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.plan.Operator"/>
      <doc>
      <![CDATA[Will be called to dump a simple operator
 @param op the operator to be dumped]]>
      </doc>
    </method>
    <method name="dumpMultiInputNestedOperator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.plan.Operator"/>
      <param name="plans" type="org.apache.pig.impl.util.MultiMap"/>
      <doc>
      <![CDATA[Will be called when an operator has nested plans, which are
 connected to one of the multiple inputs.
 @param op the nested operator
 @param plans a map of input operator to connected nested plan]]>
      </doc>
    </method>
    <method name="dumpMultiOutputNestedOperator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.plan.Operator"/>
      <param name="plans" type="java.util.Collection"/>
      <doc>
      <![CDATA[Will be called for nested operators, where the plans represent
 how the output of the operator is processed. 
 @param op the nested operator
 @param plans a collection of sub plans.]]>
      </doc>
    </method>
    <method name="dumpNestedOperator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.plan.Operator"/>
      <param name="plans" type="java.util.Collection"/>
      <doc>
      <![CDATA[Will be called for nested operators. The operators are not
 specifically connected to any input or output operators of E
 @param op the nested operator
 @param plans a collection of sub plans.]]>
      </doc>
    </method>
    <method name="dumpEdge"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.plan.Operator"/>
      <param name="suc" type="org.apache.pig.impl.plan.Operator"/>
      <doc>
      <![CDATA[Will be called to dump the edges of the plan. Each edge results
 in one call.
 @param op tail of the edge
 @param suc head of the edge]]>
      </doc>
    </method>
    <method name="getMultiInputNestedPlans" return="org.apache.pig.impl.util.MultiMap"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.plan.Operator"/>
      <doc>
      <![CDATA[Used to determine if an operator has nested plans, which are
 connected to specific input operators.
 @param op operator
 @return Map describing the input to nested plan relationship.]]>
      </doc>
    </method>
    <method name="getMultiOutputNestedPlans" return="java.util.Collection"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.plan.Operator"/>
      <doc>
      <![CDATA[Used to determine if an operator has nested output plans

 @param op operator
 @return Map describing the input to nested plan relationship.]]>
      </doc>
    </method>
    <method name="getNestedPlans" return="java.util.Collection"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.plan.Operator"/>
      <doc>
      <![CDATA[Used to determine if an operator has nested plans (without
 connections to in- or output operators.
 @param op operator
 @return Collection of nested plans.]]>
      </doc>
    </method>
    <method name="join"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="sep" type="java.lang.String"/>
      <param name="strings" type="java.lang.String[]"/>
      <doc>
      <![CDATA[Helper function to print a string array.
 @param sep Separator
 @param strings Array to print]]>
      </doc>
    </method>
    <field name="ps" type="java.io.PrintStream"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="plan" type="org.apache.pig.impl.plan.OperatorPlan"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="isVerbose" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[This class dumps a nested plan to a print stream. It does not walk
 the graph in any particular fashion it merely iterates over all
 operators and edges and calls a corresponding dump function. If a
 node of the plan has nested plans this will be dumped when the
 node is handled.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.plan.PlanDumper -->
  <!-- start class org.apache.pig.impl.plan.PlanException -->
  <class name="PlanException" extends="org.apache.pig.impl.logicalLayer.FrontendException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PlanException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new PlanException with null as the error message.]]>
      </doc>
    </constructor>
    <constructor name="PlanException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new PlanException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user]]>
      </doc>
    </constructor>
    <constructor name="PlanException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new PlanException with the specified cause.

 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="PlanException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new PlanException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="PlanException" type="java.lang.String, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new PlanException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user]]>
      </doc>
    </constructor>
    <constructor name="PlanException" type="java.lang.String, int, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new PlanException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="PlanException" type="java.lang.String, int, byte"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new PlanException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source]]>
      </doc>
    </constructor>
    <constructor name="PlanException" type="java.lang.String, int, byte, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new PlanException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="PlanException" type="java.lang.String, int, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new PlanException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param retry - If the exception is retriable or not]]>
      </doc>
    </constructor>
    <constructor name="PlanException" type="java.lang.String, int, byte, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new PlanException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source 
 @param retry - If the exception is retriable or not]]>
      </doc>
    </constructor>
    <constructor name="PlanException" type="java.lang.String, int, byte, boolean, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new PlanException with the specified message, error code, error source, retriable or not, detalied message for the developer and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source 
 @param retry - If the exception is retriable or not
 @param detailedMsg - The detailed message shown to the developer]]>
      </doc>
    </constructor>
    <constructor name="PlanException" type="java.lang.String, int, byte, boolean, java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new PlanException with the specified message, error code, error source, retriable or not, detalied message for the developer and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source 
 @param retry - If the exception is retriable or not
 @param detailedMsg - The detailed message shown to the developer 
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
  </class>
  <!-- end class org.apache.pig.impl.plan.PlanException -->
  <!-- start class org.apache.pig.impl.plan.PlanPrinter -->
  <class name="PlanPrinter" extends="org.apache.pig.impl.plan.PlanVisitor"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PlanPrinter" type="java.io.PrintStream, org.apache.pig.impl.plan.OperatorPlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param ps PrintStream to output plan information to
 @param plan Logical plan to print]]>
      </doc>
    </constructor>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="print"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="printer" type="java.io.OutputStream"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="depthFirst" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[A visitor mechanism printing out the logical plan.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.plan.PlanPrinter -->
  <!-- start class org.apache.pig.impl.plan.PlanValidationException -->
  <class name="PlanValidationException" extends="org.apache.pig.impl.plan.VisitorException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PlanValidationException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new PlanValidationException with null as the error message.]]>
      </doc>
    </constructor>
    <constructor name="PlanValidationException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new PlanValidationException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user]]>
      </doc>
    </constructor>
    <constructor name="PlanValidationException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new PlanValidationException with the specified cause.

 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="PlanValidationException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new PlanValidationException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="PlanValidationException" type="java.lang.String, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new PlanValidationException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user]]>
      </doc>
    </constructor>
    <constructor name="PlanValidationException" type="java.lang.String, int, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new PlanValidationException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="PlanValidationException" type="java.lang.String, int, byte"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new PlanValidationException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source]]>
      </doc>
    </constructor>
    <constructor name="PlanValidationException" type="java.lang.String, int, byte, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new PlanValidationException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="PlanValidationException" type="java.lang.String, int, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new PlanValidationException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param retry - If the exception is retriable or not]]>
      </doc>
    </constructor>
    <constructor name="PlanValidationException" type="java.lang.String, int, byte, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new PlanValidationException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source 
 @param retry - If the exception is retriable or not]]>
      </doc>
    </constructor>
    <constructor name="PlanValidationException" type="java.lang.String, int, byte, boolean, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new PlanValidationException with the specified message, error code, error source, retriable or not, detalied message for the developer and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source 
 @param retry - If the exception is retriable or not
 @param detailedMsg - The detailed message shown to the developer]]>
      </doc>
    </constructor>
    <constructor name="PlanValidationException" type="java.lang.String, int, byte, boolean, java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new PlanValidationException with the specified message, error code, error source, retriable or not, detalied message for the developer and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source 
 @param retry - If the exception is retriable or not
 @param detailedMsg - The detailed message shown to the developer 
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
  </class>
  <!-- end class org.apache.pig.impl.plan.PlanValidationException -->
  <!-- start interface org.apache.pig.impl.plan.PlanValidationExecutor -->
  <interface name="PlanValidationExecutor"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="validate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="plan" type="org.apache.pig.impl.plan.OperatorPlan"/>
      <param name="msgCollector" type="org.apache.pig.impl.plan.CompilationMessageCollector"/>
      <exception name="PlanValidationException" type="org.apache.pig.impl.plan.PlanValidationException"/>
    </method>
    <doc>
    <![CDATA[This is an abstract of classes for plan validation executor]]>
    </doc>
  </interface>
  <!-- end interface org.apache.pig.impl.plan.PlanValidationExecutor -->
  <!-- start class org.apache.pig.impl.plan.PlanValidator -->
  <class name="PlanValidator" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PlanValidator"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="validate"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="plan" type="org.apache.pig.impl.plan.OperatorPlan"/>
      <param name="messageCollector" type="org.apache.pig.impl.plan.CompilationMessageCollector"/>
      <exception name="PlanValidationException" type="org.apache.pig.impl.plan.PlanValidationException"/>
      <doc>
      <![CDATA[If there are errors during validation, all of the errors have
 to be collected in the supplied messageCollector. The exception should
 be thrown only when the validation logic finds something too bad 
 that other validation logics should not try to do more work.]]>
      </doc>
    </method>
    <method name="validate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="visitor" type="org.apache.pig.impl.plan.PlanVisitor"/>
      <param name="messageCollector" type="org.apache.pig.impl.plan.CompilationMessageCollector"/>
      <exception name="PlanValidationException" type="org.apache.pig.impl.plan.PlanValidationException"/>
      <doc>
      <![CDATA[This convenient method is used when: 
 - if an exception being thrown from the current validation logic
   indicates that the whole validation pipeline should stop.
 @param visitor
 @param messageCollector
 @throws PlanValidationException]]>
      </doc>
    </method>
    <method name="validateTolerateException"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="visitor" type="org.apache.pig.impl.plan.PlanVisitor"/>
      <param name="messageCollector" type="org.apache.pig.impl.plan.CompilationMessageCollector"/>
      <exception name="PlanValidationException" type="org.apache.pig.impl.plan.PlanValidationException"/>
      <doc>
      <![CDATA[This convenient method is used when: 
 - if an exception being thrown from the current validation logic
   indicates that the whole validation pipeline should keep going
   by continuing with the next validation logic in the pipeline
   (skip the rest of the current logic)
 @param visitor
 @param messageCollector
 @throws PlanValidationException]]>
      </doc>
    </method>
    <method name="validateSkipCollectException"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="visitor" type="org.apache.pig.impl.plan.PlanVisitor"/>
      <param name="messageCollector" type="org.apache.pig.impl.plan.CompilationMessageCollector"/>
      <exception name="PlanValidationException" type="org.apache.pig.impl.plan.PlanValidationException"/>
      <doc>
      <![CDATA[This convenient method is used when: 
 - if an exception being thrown from the current validation logic
   indicates that the whole validation pipeline should stop.

   This method also assumes that the appropriate error message
   has already been recorded in the message collector so
   there is no need to duplicate the error message again here.

 @param visitor
 @param messageCollector
 @throws PlanValidationException]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Master of all plan validation classes.
 @param <P>]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.plan.PlanValidator -->
  <!-- start class org.apache.pig.impl.plan.PlanVisitor -->
  <class name="PlanVisitor" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PlanVisitor" type="org.apache.pig.impl.plan.OperatorPlan, org.apache.pig.impl.plan.PlanWalker"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan OperatorPlan this visitor will visit.
 @param walker PlanWalker this visitor will use to traverse the plan.]]>
      </doc>
    </constructor>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[Entry point for visiting the plan.
 @throws VisitorException if an error is encountered while visiting.]]>
      </doc>
    </method>
    <method name="getPlan" return="org.apache.pig.impl.plan.OperatorPlan"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="pushWalker"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="walker" type="org.apache.pig.impl.plan.PlanWalker"/>
      <doc>
      <![CDATA[Push the current walker onto the stack of saved walkers and begin using
 the newly passed walker as the current walker.
 @param walker new walker to set as the current walker.]]>
      </doc>
    </method>
    <method name="popWalker"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[Pop the next to previous walker off of the stack and set it as the current
 walker.  This will drop the reference to the current walker.
 @throws VisitorException if there are no more walkers on the stack.  In
 this case the current walker is not reset.]]>
      </doc>
    </method>
    <field name="mPlan" type="org.apache.pig.impl.plan.OperatorPlan"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="mCurrentWalker" type="org.apache.pig.impl.plan.PlanWalker"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Guaranteed to always point to the walker currently being used.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[A visitor mechanism for navigating and operating on a plan of 
 Operators.  This class contains the logic to traverse the plan.  It does not
 visit individual nodes.  That is left to implementing classes (such as
 LOVisitor).]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.plan.PlanVisitor -->
  <!-- start class org.apache.pig.impl.plan.PlanWalker -->
  <class name="PlanWalker" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PlanWalker" type="org.apache.pig.impl.plan.OperatorPlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan Plan for this walker to traverse.]]>
      </doc>
    </constructor>
    <method name="walk"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="visitor" type="org.apache.pig.impl.plan.PlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[Begin traversing the graph.
 @param visitor Visitor this walker is being used by.  This can't be set in
 the constructor because the visitor is constructing this class, and does
 not yet have a 'this' pointer to send as an argument.
 @throws VisitorException if an error is encountered while walking.]]>
      </doc>
    </method>
    <method name="spawnChildWalker" return="org.apache.pig.impl.plan.PlanWalker"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="plan" type="org.apache.pig.impl.plan.OperatorPlan"/>
      <doc>
      <![CDATA[Return a new instance of this same type of walker for a subplan.
 When this method is called the same type of walker with the
 provided plan set as the plan, must be returned.  This can then be
 used to walk subplans.  This allows abstract visitors to clone
 walkers without knowning the type of walker their subclasses used.
 @param plan Plan for the new walker.
 @return Instance of the same type of walker with mPlan set to plan.]]>
      </doc>
    </method>
    <method name="getPlan" return="org.apache.pig.impl.plan.OperatorPlan"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setPlan"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="plan" type="org.apache.pig.impl.plan.OperatorPlan"/>
    </method>
    <field name="mPlan" type="org.apache.pig.impl.plan.OperatorPlan"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[PlanWalker encapsulates the logic to traverse a plan.  It is used only by
 visitors.

 All walkers must be constructed in a way that they only visit a given node
 once in a traversal.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.plan.PlanWalker -->
  <!-- start class org.apache.pig.impl.plan.ProjectionMap -->
  <class name="ProjectionMap" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ProjectionMap" type="boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param changes
            to indicate if this projection map changes its input or not]]>
      </doc>
    </constructor>
    <constructor name="ProjectionMap" type="org.apache.pig.impl.util.MultiMap, java.util.List, java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param mapFields
            the mapping of input column to output column
 @param removedFields
            the list of input columns that are removed
 @param addedFields
            the list of columns that are added to the output]]>
      </doc>
    </constructor>
    <method name="getMappedFields" return="org.apache.pig.impl.util.MultiMap"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the mapping of input column to output column]]>
      </doc>
    </method>
    <method name="setMappedFields"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fields" type="org.apache.pig.impl.util.MultiMap"/>
      <doc>
      <![CDATA[@param fields
            the mapping of input column to output column]]>
      </doc>
    </method>
    <method name="getRemovedFields" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the list of input columns that are removed]]>
      </doc>
    </method>
    <method name="setRemovedFields"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fields" type="java.util.List"/>
      <doc>
      <![CDATA[@param fields
            the list of input columns that are removed]]>
      </doc>
    </method>
    <method name="getAddedFields" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the list of columns that are added to the output]]>
      </doc>
    </method>
    <method name="setAddedFields"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fields" type="java.util.List"/>
      <doc>
      <![CDATA[@param fields
            the list of columns that are added to the output]]>
      </doc>
    </method>
    <method name="changes" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return if this projection map changes its input or not]]>
      </doc>
    </method>
    <method name="getChanges" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return if this projection map changes its input or not]]>
      </doc>
    </method>
    <method name="setChanges"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="changes" type="boolean"/>
      <doc>
      <![CDATA[@param changes
            if this projection map changes its input or not]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A struct detailing how a projection is altered by an operator.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.plan.ProjectionMap -->
  <!-- start class org.apache.pig.impl.plan.RequiredFields -->
  <class name="RequiredFields" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="RequiredFields" type="boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param needAllFields
            to indicate if this required fields needs all the fields from
            its input]]>
      </doc>
    </constructor>
    <constructor name="RequiredFields" type="boolean, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param needAllFields
            to indicate if this required fields needs no fields from
            its input]]>
      </doc>
    </constructor>
    <constructor name="RequiredFields" type="java.util.List"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param fields
            the list of input columns that are required]]>
      </doc>
    </constructor>
    <method name="getFields" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the list of input columns that are required]]>
      </doc>
    </method>
    <method name="setFields"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fields" type="java.util.List"/>
      <doc>
      <![CDATA[@param fields
            the list of input columns that are required]]>
      </doc>
    </method>
    <method name="needAllFields" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return if this required fields needs all the fields from its input(s)]]>
      </doc>
    </method>
    <method name="getNeedAllFields" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return if this required fields needs all the fields from its input(s)]]>
      </doc>
    </method>
    <method name="setNeedAllFields"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="needAllFields" type="boolean"/>
      <doc>
      <![CDATA[@param needAllFields
            to indicate if this required fields needs all the fields from
            its input; cannot be true if needNoFields() is true]]>
      </doc>
    </method>
    <method name="needNoFields" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return if this required fields needs no fields from its input(s)]]>
      </doc>
    </method>
    <method name="getNeedNoFields" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return if this required fields needs no fields from its input(s)]]>
      </doc>
    </method>
    <method name="setNeedNoFields"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="needNoFields" type="boolean"/>
      <doc>
      <![CDATA[@param needNoFields
            to indicate if this required fields needs no fields from
            its input; cannot be true if needAllFields() is true]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A struct detailing how a projection is altered by an operator.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.plan.RequiredFields -->
  <!-- start class org.apache.pig.impl.plan.ReverseDependencyOrderWalker -->
  <class name="ReverseDependencyOrderWalker" extends="org.apache.pig.impl.plan.PlanWalker"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ReverseDependencyOrderWalker" type="org.apache.pig.impl.plan.OperatorPlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan Plan for this walker to traverse.]]>
      </doc>
    </constructor>
    <method name="walk"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="visitor" type="org.apache.pig.impl.plan.PlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[Begin traversing the graph.
 @param visitor Visitor this walker is being used by.
 @throws VisitorException if an error is encountered while walking.]]>
      </doc>
    </method>
    <method name="spawnChildWalker" return="org.apache.pig.impl.plan.PlanWalker"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="plan" type="org.apache.pig.impl.plan.OperatorPlan"/>
    </method>
    <method name="doAllSuccessors"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="node" type="org.apache.pig.impl.plan.Operator"/>
      <param name="seen" type="java.util.Set"/>
      <param name="fifo" type="java.util.Collection"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <doc>
    <![CDATA[ReverseDependencyOrderWalker traverses the graph in such a way that no node is visited
 before all the nodes that are its successors on have been visited.  Beyond this, it does not
 guarantee any particular order.  So, you have a graph with node 1 2 3 4, and
 edges 1->3, 2->3, and 3->4, this walker guarantees that 4 will be visited
 before 3 and 3 before 1 and 2, but it does not guarantee whether 1 or 2 will be
 visited first.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.plan.ReverseDependencyOrderWalker -->
  <!-- start class org.apache.pig.impl.plan.VisitorException -->
  <class name="VisitorException" extends="org.apache.pig.impl.logicalLayer.FrontendException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="VisitorException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new VisitorException with null as the error message.]]>
      </doc>
    </constructor>
    <constructor name="VisitorException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new VisitorException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user]]>
      </doc>
    </constructor>
    <constructor name="VisitorException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new VisitorException with the specified cause.

 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="VisitorException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new VisitorException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="VisitorException" type="java.lang.String, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new VisitorException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user]]>
      </doc>
    </constructor>
    <constructor name="VisitorException" type="java.lang.String, int, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new VisitorException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="VisitorException" type="java.lang.String, int, byte"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new VisitorException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source]]>
      </doc>
    </constructor>
    <constructor name="VisitorException" type="java.lang.String, int, byte, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new VisitorException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="VisitorException" type="java.lang.String, int, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new VisitorException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param retry - If the exception is retriable or not]]>
      </doc>
    </constructor>
    <constructor name="VisitorException" type="java.lang.String, int, byte, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new VisitorException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source 
 @param retry - If the exception is retriable or not]]>
      </doc>
    </constructor>
    <constructor name="VisitorException" type="java.lang.String, int, byte, boolean, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new VisitorException with the specified message, error code, error source, retriable or not, detalied message for the developer and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source 
 @param retry - If the exception is retriable or not
 @param detailedMsg - The detailed message shown to the developer]]>
      </doc>
    </constructor>
    <constructor name="VisitorException" type="java.lang.String, int, byte, boolean, java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new VisitorException with the specified message, error code, error source, retriable or not, detalied message for the developer and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source 
 @param retry - If the exception is retriable or not
 @param detailedMsg - The detailed message shown to the developer 
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
  </class>
  <!-- end class org.apache.pig.impl.plan.VisitorException -->
</package>
<package name="org.apache.pig.impl.plan.optimizer">
  <!-- start class org.apache.pig.impl.plan.optimizer.CommonNodeFinder -->
  <class name="CommonNodeFinder" extends="org.apache.pig.impl.plan.optimizer.RulePlanVisitor"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="CommonNodeFinder" type="org.apache.pig.impl.plan.optimizer.RulePlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getCommonNodes" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="ruleOp" type="org.apache.pig.impl.plan.optimizer.RuleOperator"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param ruleOp
            the rule operator that has to be visited
 @throws VisitorException]]>
      </doc>
    </method>
  </class>
  <!-- end class org.apache.pig.impl.plan.optimizer.CommonNodeFinder -->
  <!-- start class org.apache.pig.impl.plan.optimizer.OptimizerException -->
  <class name="OptimizerException" extends="org.apache.pig.impl.plan.VisitorException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="OptimizerException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new OptimizerException with null as the error message.]]>
      </doc>
    </constructor>
    <constructor name="OptimizerException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new OptimizerException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user]]>
      </doc>
    </constructor>
    <constructor name="OptimizerException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new OptimizerException with the specified cause.

 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="OptimizerException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new OptimizerException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="OptimizerException" type="java.lang.String, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new OptimizerException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user]]>
      </doc>
    </constructor>
    <constructor name="OptimizerException" type="java.lang.String, int, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new OptimizerException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="OptimizerException" type="java.lang.String, int, byte"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new OptimizerException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source]]>
      </doc>
    </constructor>
    <constructor name="OptimizerException" type="java.lang.String, int, byte, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new OptimizerException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
    <constructor name="OptimizerException" type="java.lang.String, int, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new OptimizerException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param retry - If the exception is retriable or not]]>
      </doc>
    </constructor>
    <constructor name="OptimizerException" type="java.lang.String, int, byte, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new OptimizerException with the specified message and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source 
 @param retry - If the exception is retriable or not]]>
      </doc>
    </constructor>
    <constructor name="OptimizerException" type="java.lang.String, int, byte, boolean, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new OptimizerException with the specified message, error code, error source, retriable or not, detalied message for the developer and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source 
 @param retry - If the exception is retriable or not
 @param detailedMsg - The detailed message shown to the developer]]>
      </doc>
    </constructor>
    <constructor name="OptimizerException" type="java.lang.String, int, byte, boolean, java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new OptimizerException with the specified message, error code, error source, retriable or not, detalied message for the developer and cause.

 @param message - The error message (which is saved for later retrieval by the <link>Throwable.getMessage()</link> method) shown to the user 
 @param errCode - The error code shown to the user 
 @param errSrc - The error source 
 @param retry - If the exception is retriable or not
 @param detailedMsg - The detailed message shown to the developer 
 @param cause - The cause (which is saved for later retrieval by the <link>Throwable.getCause()</link> method) indicating the source of this exception. A null value is permitted, and indicates that the cause is nonexistent or unknown.]]>
      </doc>
    </constructor>
  </class>
  <!-- end class org.apache.pig.impl.plan.optimizer.OptimizerException -->
  <!-- start class org.apache.pig.impl.plan.optimizer.PlanOptimizer -->
  <class name="PlanOptimizer" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PlanOptimizer" type="org.apache.pig.impl.plan.OperatorPlan"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan Plan to optimize]]>
      </doc>
    </constructor>
    <constructor name="PlanOptimizer" type="org.apache.pig.impl.plan.OperatorPlan, int"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan Plan to optimize
 @param iterations maximum number of optimization iterations]]>
      </doc>
    </constructor>
    <method name="optimize"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <exception name="OptimizerException" type="org.apache.pig.impl.plan.optimizer.OptimizerException"/>
      <doc>
      <![CDATA[Run the optimizer.  This method attempts to match each of the Rules
 against the plan.  If a Rule matches, it then calls the check
 method of the associated Transformer to give the it a chance to
 check whether it really wants to do the optimization.  If that
 returns true as well, then Transformer.transform is called. 
 @throws OptimizerException]]>
      </doc>
    </method>
    <field name="mRules" type="java.util.List"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="mPlan" type="org.apache.pig.impl.plan.OperatorPlan"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="mMaxIterations" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[A class to optimize plans.  This class need not be subclassed for a
 particular type of plan.  It can be instantiated with a set of Rules and
 then optimize called.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.plan.optimizer.PlanOptimizer -->
  <!-- start class org.apache.pig.impl.plan.optimizer.Rule -->
  <class name="Rule" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Rule" type="org.apache.pig.impl.plan.optimizer.RulePlan, org.apache.pig.impl.plan.optimizer.Transformer, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            pattern to look for
 @param t
            Transformer to apply if the rule matches.]]>
      </doc>
    </constructor>
    <constructor name="Rule" type="org.apache.pig.impl.plan.optimizer.RulePlan, org.apache.pig.impl.plan.optimizer.Transformer, java.lang.String, org.apache.pig.impl.plan.optimizer.Rule.WalkerAlgo"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            pattern to look for
 @param t
            Transformer to apply if the rule matches.
 @param al
            Walker algorithm to find rule match within the plan.]]>
      </doc>
    </constructor>
    <method name="getPlan" return="org.apache.pig.impl.plan.optimizer.RulePlan"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTransformer" return="org.apache.pig.impl.plan.optimizer.Transformer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRuleName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getWalkerAlgo" return="org.apache.pig.impl.plan.optimizer.Rule.WalkerAlgo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A rule for optimizing a plan. The rule contains a pattern that must be
 matched in the plan before the optimizer can consider applying the rule and a
 transformer to do further checks and possibly transform the plan. The rule
 pattern is expressed as a list of node names, a map of edges in the plan, and
 a list of boolean values indicating whether the node is required. For
 example, a rule pattern could be expressed as: [Filter, Filter] {[0, 1]}
 [true, true], which would indicate this rule matches two nodes of class name
 Filter, with an edge between the two, and both are required.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.plan.optimizer.Rule -->
  <!-- start class org.apache.pig.impl.plan.optimizer.Rule.WalkerAlgo -->
  <class name="Rule.WalkerAlgo" extends="java.lang.Enum"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.apache.pig.impl.plan.optimizer.Rule.WalkerAlgo[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.apache.pig.impl.plan.optimizer.Rule.WalkerAlgo"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <field name="DepthFirstWalker" type="org.apache.pig.impl.plan.optimizer.Rule.WalkerAlgo"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="DependencyOrderWalker" type="org.apache.pig.impl.plan.optimizer.Rule.WalkerAlgo"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.impl.plan.optimizer.Rule.WalkerAlgo -->
  <!-- start class org.apache.pig.impl.plan.optimizer.RuleMatcher -->
  <class name="RuleMatcher" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="RuleMatcher"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="match" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rule" type="org.apache.pig.impl.plan.optimizer.Rule"/>
      <exception name="OptimizerException" type="org.apache.pig.impl.plan.optimizer.OptimizerException"/>
      <doc>
      <![CDATA[Test a rule to see if it matches the current plan. Save all matched nodes using BFS
 @param rule Rule to test for a match.
 @return true if the plan matches.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[RuleMatcher contains the logic to determine whether a given rule matches.
 This alone does not mean the rule will be applied.  Transformer.check()
 still has to pass before Transfomer.transform() is called.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.plan.optimizer.RuleMatcher -->
  <!-- start class org.apache.pig.impl.plan.optimizer.RuleOperator -->
  <class name="RuleOperator" extends="org.apache.pig.impl.plan.Operator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="RuleOperator" type="java.lang.Class, org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param clazz
            Class type of this node, e.g.: LOFilter.class
 @param k
            Operator key to assign to this node.]]>
      </doc>
    </constructor>
    <constructor name="RuleOperator" type="java.lang.Class, org.apache.pig.impl.plan.optimizer.RuleOperator.NodeType, org.apache.pig.impl.plan.OperatorKey"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param clazz
            Class type of this node, e.g.: LOFilter.class
 @param nodeType
            Node type of this node             
 @param k
            Operator key to assign to this node.]]>
      </doc>
    </constructor>
    <method name="setNodeType"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="org.apache.pig.impl.plan.optimizer.RuleOperator.NodeType"/>
      <doc>
      <![CDATA[Set the node type of this rule operator.
 
 @param type 
            Node type to set this operator to.]]>
      </doc>
    </method>
    <method name="getNodeType" return="org.apache.pig.impl.plan.optimizer.RuleOperator.NodeType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the node type of this operator.]]>
      </doc>
    </method>
    <method name="getNodeClass" return="java.lang.Class"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the node class of this operator.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="org.apache.pig.impl.plan.optimizer.RulePlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[Visit this node with the provided visitor. This should only be called by
 the visitor class itself, never directly.
 
 @param v
            Visitor to visit with.
 @throws VisitException
             if the visitor has a problem.]]>
      </doc>
    </method>
    <method name="supportsMultipleOutputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="supportsMultipleInputs" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="clone" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="CloneNotSupportedException" type="java.lang.CloneNotSupportedException"/>
      <doc>
      <![CDATA[@see org.apache.pig.impl.plan.Operator#clone()
 Do not use the clone method directly. Operators are cloned when logical plans
 are cloned using {@link LogicalPlanCloner}]]>
      </doc>
    </method>
    <method name="name" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Parent for all Logical operators.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.plan.optimizer.RuleOperator -->
  <!-- start class org.apache.pig.impl.plan.optimizer.RuleOperator.NodeType -->
  <class name="RuleOperator.NodeType" extends="java.lang.Enum"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.apache.pig.impl.plan.optimizer.RuleOperator.NodeType[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.apache.pig.impl.plan.optimizer.RuleOperator.NodeType"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <field name="ANY_NODE" type="org.apache.pig.impl.plan.optimizer.RuleOperator.NodeType"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="SIMPLE_NODE" type="org.apache.pig.impl.plan.optimizer.RuleOperator.NodeType"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="MULTI_NODE" type="org.apache.pig.impl.plan.optimizer.RuleOperator.NodeType"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="COMMON_NODE" type="org.apache.pig.impl.plan.optimizer.RuleOperator.NodeType"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.impl.plan.optimizer.RuleOperator.NodeType -->
  <!-- start class org.apache.pig.impl.plan.optimizer.RulePlan -->
  <class name="RulePlan" extends="org.apache.pig.impl.plan.OperatorPlan"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="RulePlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="explain"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.OutputStream"/>
      <param name="ps" type="java.io.PrintStream"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.impl.plan.optimizer.RulePlan -->
  <!-- start class org.apache.pig.impl.plan.optimizer.RulePlanPrinter -->
  <class name="RulePlanPrinter" extends="org.apache.pig.impl.plan.optimizer.RulePlanVisitor"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="RulePlanPrinter" type="java.io.PrintStream, org.apache.pig.impl.plan.optimizer.RulePlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param ps PrintStream to output plan information to
 @param plan Logical plan to print]]>
      </doc>
    </constructor>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="print"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="printer" type="java.io.OutputStream"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="depthFirst" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[A visitor mechanism printing out the logical plan.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.plan.optimizer.RulePlanPrinter -->
  <!-- start class org.apache.pig.impl.plan.optimizer.RulePlanVisitor -->
  <class name="RulePlanVisitor" extends="org.apache.pig.impl.plan.PlanVisitor"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="RulePlanVisitor" type="org.apache.pig.impl.plan.optimizer.RulePlan, org.apache.pig.impl.plan.PlanWalker"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="ruleOp" type="org.apache.pig.impl.plan.optimizer.RuleOperator"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[@param ruleOp
            the rule operator that has to be visited
 @throws VisitorException]]>
      </doc>
    </method>
  </class>
  <!-- end class org.apache.pig.impl.plan.optimizer.RulePlanVisitor -->
  <!-- start class org.apache.pig.impl.plan.optimizer.Transformer -->
  <class name="Transformer" extends="org.apache.pig.impl.plan.PlanVisitor"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Transformer" type="org.apache.pig.impl.plan.OperatorPlan, org.apache.pig.impl.plan.PlanWalker"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan OperatorPlan to be optimized.]]>
      </doc>
    </constructor>
    <method name="check" return="boolean"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nodes" type="java.util.List"/>
      <exception name="OptimizerException" type="org.apache.pig.impl.plan.optimizer.OptimizerException"/>
      <doc>
      <![CDATA[check if the transform should be done.  If this is being called then
 the pattern matches, but there may be other criteria that must be met
 as well.
 @param nodes - List of nodes declared in transform ($1 = nodes[0],
 etc.)  Remember that somes entries in node[] may be NULL since they may
 not be created until after the transform.
 @return true if the transform should be done.
 @throws OptimizerException]]>
      </doc>
    </method>
    <method name="transform"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nodes" type="java.util.List"/>
      <exception name="OptimizerException" type="org.apache.pig.impl.plan.optimizer.OptimizerException"/>
      <doc>
      <![CDATA[Transform the tree
 @param nodes - List of nodes declared in transform ($1 = nodes[0],
 etc.)  This call must destruct any nodes that are being removed as part
 of the transform and remove them from the nodes vector and construct
 any that are being created as part of the transform and add them at the
 appropriate point to the nodes vector.
 @throws OptimizerException]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Transformer represents one tranform that the optimizer can
 apply to a graph.  This class is a special case of a PlanVisitor,so it
 can navigate the plan.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.plan.optimizer.Transformer -->
</package>
<package name="org.apache.pig.impl.streaming">
  <!-- start class org.apache.pig.impl.streaming.DefaultInputHandler -->
  <class name="DefaultInputHandler" extends="org.apache.pig.impl.streaming.InputHandler"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DefaultInputHandler"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="DefaultInputHandler" type="org.apache.pig.impl.streaming.StreamingCommand.HandleSpec"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getInputType" return="org.apache.pig.impl.streaming.InputHandler.InputType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="bindTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="os" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="process" type="java.lang.Process"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[DefaultInputHandler handles the input for the Pig-Streaming
 executable in a synchronous manner by feeding it input
 via its <code>stdin</code>.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.streaming.DefaultInputHandler -->
  <!-- start class org.apache.pig.impl.streaming.DefaultOutputHandler -->
  <class name="DefaultOutputHandler" extends="org.apache.pig.impl.streaming.OutputHandler"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DefaultOutputHandler"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="DefaultOutputHandler" type="org.apache.pig.impl.streaming.StreamingCommand.HandleSpec"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getOutputType" return="org.apache.pig.impl.streaming.OutputHandler.OutputType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="bindTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <param name="is" type="org.apache.pig.impl.io.BufferedPositionedInputStream"/>
      <param name="offset" type="long"/>
      <param name="end" type="long"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[FileOutputHandler handles the output from the Pig-Streaming
 executable in an synchronous manner by reading its output
 via its <code>stdout</code>.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.streaming.DefaultOutputHandler -->
  <!-- start class org.apache.pig.impl.streaming.ExecutableManager -->
  <class name="ExecutableManager" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ExecutableManager"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new {@link ExecutableManager}.]]>
      </doc>
    </constructor>
    <method name="configure"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stream" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Configure and initialize the {@link ExecutableManager}.
 
 @param stream POStream operator
 @throws IOException
 @throws ExecException]]>
      </doc>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Close and cleanup the {@link ExecutableManager}.
 @throws IOException]]>
      </doc>
    </method>
    <method name="setupEnvironment"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="pb" type="java.lang.ProcessBuilder"/>
      <doc>
      <![CDATA[Set up the run-time environment of the managed process.
 
 @param pb
            {@link ProcessBuilder} used to exec the process]]>
      </doc>
    </method>
    <method name="exec"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Start execution of the external process.
 
 This takes care of setting up the environment of the process and also
 starts ProcessErrorThread to process the <code>stderr</code> of
 the managed process.
 
 @throws IOException]]>
      </doc>
    </method>
    <method name="run"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Start execution of the {@link ExecutableManager}.
 
 @throws IOException]]>
      </doc>
    </method>
    <method name="processError"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="error" type="java.lang.String"/>
      <doc>
      <![CDATA[Workhorse to process the stderr stream of the managed process.
 
 By default <code>ExecuatbleManager</code> just sends out the received
 error message to the <code>stderr</code> of itself.
 
 @param error
            error message from the managed process.]]>
      </doc>
    </method>
    <field name="command" type="org.apache.pig.impl.streaming.StreamingCommand"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="exitCode" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="stdin" type="java.io.DataOutputStream"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="inputRecords" type="long"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="inputBytes" type="long"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="outputRecords" type="long"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="outputBytes" type="long"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="outerrThreadsError" type="java.lang.Throwable"
      transient="false" volatile="true"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[{@link ExecutableManager} manages an external executable which processes data
 in a Pig query.
 
 The <code>ExecutableManager</code> is responsible for startup/teardown of
 the external process and also for managing it. It feeds input records to the
 executable via it's <code>stdin</code>, collects the output records from
 the <code>stdout</code> and also diagnostic information from the
 <code>stdout</code>.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.streaming.ExecutableManager -->
  <!-- start class org.apache.pig.impl.streaming.FileInputHandler -->
  <class name="FileInputHandler" extends="org.apache.pig.impl.streaming.InputHandler"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FileInputHandler" type="org.apache.pig.impl.streaming.StreamingCommand.HandleSpec"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </constructor>
    <method name="getInputType" return="org.apache.pig.impl.streaming.InputHandler.InputType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="bindTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="os" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="process" type="java.lang.Process"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[FileInputHandler handles the input for the Pig-Streaming
 executable in an asynchronous manner by feeding it input
 via an external file specified by the user.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.streaming.FileInputHandler -->
  <!-- start class org.apache.pig.impl.streaming.FileOutputHandler -->
  <class name="FileOutputHandler" extends="org.apache.pig.impl.streaming.OutputHandler"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FileOutputHandler" type="org.apache.pig.impl.streaming.StreamingCommand.HandleSpec"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </constructor>
    <method name="getOutputType" return="org.apache.pig.impl.streaming.OutputHandler.OutputType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="bindTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <param name="is" type="org.apache.pig.impl.io.BufferedPositionedInputStream"/>
      <param name="offset" type="long"/>
      <param name="end" type="long"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[FileOutputHandler handles the output from the Pig-Streaming
 executable in an asynchronous manner by reading it from
 an external file specified by the user.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.streaming.FileOutputHandler -->
  <!-- start class org.apache.pig.impl.streaming.HandlerFactory -->
  <class name="HandlerFactory" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="HandlerFactory"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="createInputHandler" return="org.apache.pig.impl.streaming.InputHandler"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="command" type="org.apache.pig.impl.streaming.StreamingCommand"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Create an <code>InputHandler</code> for the given input specification
 of the <code>StreamingCommand</code>.
 
 @param command <code>StreamingCommand</code>
 @return <code>InputHandler</code> for the given input specification
 @throws ExecException]]>
      </doc>
    </method>
    <method name="createOutputHandler" return="org.apache.pig.impl.streaming.OutputHandler"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="command" type="org.apache.pig.impl.streaming.StreamingCommand"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
      <doc>
      <![CDATA[Create an <code>OutputHandler</code> for the given output specification
 of the <code>StreamingCommand</code>.
 
 @param command <code>StreamingCommand</code>
 @return <code>OutputHandler</code> for the given output specification
 @throws ExecException]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Factory to create an {@link InputHandler} or {@link OutputHandler}
 depending on the specification of the {@link StreamingCommand}.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.streaming.HandlerFactory -->
  <!-- start class org.apache.pig.impl.streaming.InputHandler -->
  <class name="InputHandler" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="InputHandler"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getInputType" return="org.apache.pig.impl.streaming.InputHandler.InputType"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the handled <code>InputType</code>
 @return the handled <code>InputType</code>]]>
      </doc>
    </method>
    <method name="putNext"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Send the given input <code>Tuple</code> to the managed executable.
 
 @param t input <code>Tuple</code>
 @throws IOException]]>
      </doc>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="process" type="java.lang.Process"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Close the <code>InputHandler</code> since there is no more input
 to be sent to the managed process.
 @param process the managed process - this could be null in some cases
 like when input is through files. In that case, the process would not
 have been exec'ed yet - if this method if overridden it is the responsibility
 of the implementer to check that the process is usable. The managed process
 object is supplied by the ExecutableManager to this call so that this method
 can check if the process is alive if it needs to know.
 
 @throws IOException]]>
      </doc>
    </method>
    <method name="bindTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="os" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Bind the <code>InputHandler</code> to the <code>OutputStream</code>
 from which it reads input and sends it to the managed process.
 
 @param os <code>OutputStream</code> from which to read input data for the
           managed process
 @throws IOException]]>
      </doc>
    </method>
    <field name="serializer" type="org.apache.pig.StoreFunc"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="alreadyClosed" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[{@link InputHandler} is responsible for handling the input to the 
 Pig-Streaming external command.
 
 The managed executable could be fed input in a {@link InputType#SYNCHRONOUS} 
 manner via its <code>stdin</code> or in an {@link InputType#ASYNCHRONOUS} 
 manner via an external file which is subsequently read by the executable.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.streaming.InputHandler -->
  <!-- start class org.apache.pig.impl.streaming.InputHandler.InputType -->
  <class name="InputHandler.InputType" extends="java.lang.Enum"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.apache.pig.impl.streaming.InputHandler.InputType[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.apache.pig.impl.streaming.InputHandler.InputType"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <field name="SYNCHRONOUS" type="org.apache.pig.impl.streaming.InputHandler.InputType"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ASYNCHRONOUS" type="org.apache.pig.impl.streaming.InputHandler.InputType"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.impl.streaming.InputHandler.InputType -->
  <!-- start class org.apache.pig.impl.streaming.OutputHandler -->
  <class name="OutputHandler" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="OutputHandler"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getOutputType" return="org.apache.pig.impl.streaming.OutputHandler.OutputType"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the handled <code>OutputType</code>.
 @return the handled <code>OutputType</code>]]>
      </doc>
    </method>
    <method name="bindTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <param name="is" type="org.apache.pig.impl.io.BufferedPositionedInputStream"/>
      <param name="offset" type="long"/>
      <param name="end" type="long"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Bind the <code>OutputHandler</code> to the <code>InputStream</code>
 from which to read the output data of the managed process.
 
 @param is <code>InputStream</code> from which to read the output data 
           of the managed process
 @throws IOException]]>
      </doc>
    </method>
    <method name="getNext" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Get the next output <code>Tuple</code> of the managed process.
 
 @return the next output <code>Tuple</code> of the managed process
 @throws IOException]]>
      </doc>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Close the <code>OutputHandler</code>.
 @throws IOException]]>
      </doc>
    </method>
    <field name="deserializer" type="org.apache.pig.LoadFunc"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="alreadyClosed" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[{@link OutputHandler} is responsible for handling the output of the 
 Pig-Streaming external command.
 
 The output of the managed executable could be fetched in a 
 {@link OutputType#SYNCHRONOUS} manner via its <code>stdout</code> or in an 
 {@link OutputType#ASYNCHRONOUS} manner via an external file to which the
 process wrote its output.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.streaming.OutputHandler -->
  <!-- start class org.apache.pig.impl.streaming.OutputHandler.OutputType -->
  <class name="OutputHandler.OutputType" extends="java.lang.Enum"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.apache.pig.impl.streaming.OutputHandler.OutputType[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.apache.pig.impl.streaming.OutputHandler.OutputType"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <field name="SYNCHRONOUS" type="org.apache.pig.impl.streaming.OutputHandler.OutputType"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ASYNCHRONOUS" type="org.apache.pig.impl.streaming.OutputHandler.OutputType"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.impl.streaming.OutputHandler.OutputType -->
  <!-- start class org.apache.pig.impl.streaming.StreamingCommand -->
  <class name="StreamingCommand" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <implements name="java.lang.Cloneable"/>
    <constructor name="StreamingCommand" type="org.apache.pig.impl.PigContext, java.lang.String[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new <code>StreamingCommand</code> with the given command.
 
 @param pigContext PigContext structure
 @param argv parsed arguments of the <code>command</code>]]>
      </doc>
    </constructor>
    <method name="getExecutable" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the command to be executed.
 
 @return the command to be executed]]>
      </doc>
    </method>
    <method name="setExecutable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="executable" type="java.lang.String"/>
      <doc>
      <![CDATA[Set the executable for the <code>StreamingCommand</code>.
 
 @param executable the executable for the <code>StreamingCommand</code>]]>
      </doc>
    </method>
    <method name="setCommandArgs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="argv" type="java.lang.String[]"/>
      <doc>
      <![CDATA[Set the command line arguments for the <code>StreamingCommand</code>.
 
 @param argv the command line arguments for the 
             <code>StreamingCommand</code>]]>
      </doc>
    </method>
    <method name="getCommandArgs" return="java.lang.String[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the parsed command arguments.
 
 @return the parsed command arguments as <code>String[]</code>]]>
      </doc>
    </method>
    <method name="getShipSpecs" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the list of files which need to be shipped to the cluster.
 
 @return the list of files which need to be shipped to the cluster]]>
      </doc>
    </method>
    <method name="getCacheSpecs" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the list of files which need to be cached on the execute nodes.
 
 @return the list of files which need to be cached on the execute nodes]]>
      </doc>
    </method>
    <method name="addPathToShip"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="path" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Add a file to be shipped to the cluster. 
 
 Users can use this to distribute executables and other necessary files
 to the clusters.
 
 @param path path of the file to be shipped to the cluster]]>
      </doc>
    </method>
    <method name="addPathToCache"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="path" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Add a file to be cached on execute nodes on the cluster. The file is
 assumed to be available at the shared filesystem.
 
 @param path path of the file to be cached on the execute nodes]]>
      </doc>
    </method>
    <method name="addHandleSpec"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="handle" type="org.apache.pig.impl.streaming.StreamingCommand.Handle"/>
      <param name="handleSpec" type="org.apache.pig.impl.streaming.StreamingCommand.HandleSpec"/>
      <doc>
      <![CDATA[Attach a {@link HandleSpec} to a given {@link Handle}
 @param handle <code>Handle</code> to which the specification is to 
               be attached.
 @param handleSpec <code>HandleSpec</code> for the given handle.]]>
      </doc>
    </method>
    <method name="setInputSpec"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="spec" type="org.apache.pig.impl.streaming.StreamingCommand.HandleSpec"/>
      <doc>
      <![CDATA[Set the input specification for the <code>StreamingCommand</code>.
 
 @param spec input specification]]>
      </doc>
    </method>
    <method name="getInputSpec" return="org.apache.pig.impl.streaming.StreamingCommand.HandleSpec"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the input specification of the <code>StreamingCommand</code>.
 
 @return input specification of the <code>StreamingCommand</code>]]>
      </doc>
    </method>
    <method name="setOutputSpec"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="spec" type="org.apache.pig.impl.streaming.StreamingCommand.HandleSpec"/>
      <doc>
      <![CDATA[Set the specification for the primary output of the 
 <code>StreamingCommand</code>.
 
 @param spec specification for the primary output of the 
             <code>StreamingCommand</code>]]>
      </doc>
    </method>
    <method name="getOutputSpec" return="org.apache.pig.impl.streaming.StreamingCommand.HandleSpec"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the specification of the primary output of the 
 <code>StreamingCommand</code>.
 
 @return specification of the primary output of the 
         <code>StreamingCommand</code>]]>
      </doc>
    </method>
    <method name="getHandleSpecs" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="handle" type="org.apache.pig.impl.streaming.StreamingCommand.Handle"/>
      <doc>
      <![CDATA[Get specifications for the given <code>Handle</code>.
 
 @param handle <code>Handle</code> of the stream
 @return specification for the given <code>Handle</code>]]>
      </doc>
    </method>
    <method name="getPersistStderr" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Should the stderr of the managed process be persisted?
 
 @return <code>true</code> if the stderr of the managed process should be
         persisted, <code>false</code> otherwise.]]>
      </doc>
    </method>
    <method name="setPersistStderr"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="persistStderr" type="boolean"/>
      <doc>
      <![CDATA[Specify if the stderr of the managed process should be persisted.
 
 @param persistStderr <code>true</code> if the stderr of the managed 
                      process should be persisted, else <code>false</code>]]>
      </doc>
    </method>
    <method name="getLogDir" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the directory where the log-files of the command are persisted.
 
 @return the directory where the log-files of the command are persisted]]>
      </doc>
    </method>
    <method name="setLogDir"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="logDir" type="java.lang.String"/>
      <doc>
      <![CDATA[Set the directory where the log-files of the command are persisted.
 
 @param logDir the directory where the log-files of the command are persisted]]>
      </doc>
    </method>
    <method name="getLogFilesLimit" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the maximum number of tasks whose stderr logs files are persisted.
 
 @return the maximum number of tasks whose stderr logs files are persisted]]>
      </doc>
    </method>
    <method name="setLogFilesLimit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="logFilesLimit" type="int"/>
      <doc>
      <![CDATA[Set the maximum number of tasks whose stderr logs files are persisted.
 @param logFilesLimit the maximum number of tasks whose stderr logs files 
                      are persisted]]>
      </doc>
    </method>
    <method name="setShipFiles"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="shipFiles" type="boolean"/>
      <doc>
      <![CDATA[Set whether files should be shipped or not.
 
 @param shipFiles <code>true</code> if files of this command should be
                  shipped, <code>false</code> otherwise]]>
      </doc>
    </method>
    <method name="getShipFiles" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get whether files for this command should be shipped or not.
 
 @return <code>true</code> if files of this command should be shipped, 
         <code>false</code> otherwise]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="clone" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="MAX_TASKS" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[{@link StreamingCommand} represents the specification of an external
 command to be executed in a Pig Query. 
 
 <code>StreamingCommand</code> encapsulates all relevant details of the
 command specified by the user either directly via the <code>STREAM</code>
 operator or indirectly via a <code>DEFINE</code> operator. It includes
 details such as input/output/error specifications and also files to be
 shipped to the cluster and files to be cached.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.streaming.StreamingCommand -->
  <!-- start class org.apache.pig.impl.streaming.StreamingCommand.Handle -->
  <class name="StreamingCommand.Handle" extends="java.lang.Enum"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.apache.pig.impl.streaming.StreamingCommand.Handle[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.apache.pig.impl.streaming.StreamingCommand.Handle"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <field name="INPUT" type="org.apache.pig.impl.streaming.StreamingCommand.Handle"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="OUTPUT" type="org.apache.pig.impl.streaming.StreamingCommand.Handle"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Handle to communicate with the external process.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.streaming.StreamingCommand.Handle -->
  <!-- start class org.apache.pig.impl.streaming.StreamingCommand.HandleSpec -->
  <class name="StreamingCommand.HandleSpec" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.Comparable"/>
    <implements name="java.io.Serializable"/>
    <implements name="java.lang.Cloneable"/>
    <constructor name="StreamingCommand.HandleSpec" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new {@link HandleSpec} with a given name using the default
 {@link PigStorage} serializer/deserializer.
 
 @param handleName name of the handle (one of <code>stdin</code>,
                   <code>stdout</code> or a file-path)]]>
      </doc>
    </constructor>
    <constructor name="StreamingCommand.HandleSpec" type="java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new {@link HandleSpec} with a given name using the default
 {@link PigStorage} serializer/deserializer.
 
 @param handleName name of the handle (one of <code>stdin</code>,
                   <code>stdout</code> or a file-path)
 @param spec serializer/deserializer spec]]>
      </doc>
    </constructor>
    <method name="compareTo" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="org.apache.pig.impl.streaming.StreamingCommand.HandleSpec"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the <b>name</b> of the <code>HandleSpec</code>.
 
 @return the <b>name</b> of the <code>HandleSpec</code> (one of 
         <code>stdin</code>, <code>stdout</code> or a file-path)]]>
      </doc>
    </method>
    <method name="setName"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Set the <b>name</b> of the <code>HandleSpec</code>.
 
 @param name <b>name</b> of the <code>HandleSpec</code> (one of 
         <code>stdin</code>, <code>stdout</code> or a file-path)]]>
      </doc>
    </method>
    <method name="getSpec" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the serializer/deserializer spec of the <code>HandleSpec</code>.
 
 @return the serializer/deserializer spec of the 
         <code>HandleSpec</code>]]>
      </doc>
    </method>
    <method name="setSpec"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="spec" type="java.lang.String"/>
      <doc>
      <![CDATA[Set the serializer/deserializer spec of the <code>HandleSpec</code>.
 
 @param spec the serializer/deserializer spec of the 
             <code>HandleSpec</code>]]>
      </doc>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
    </method>
    <method name="clone" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Specification about the usage of the {@link Handle} to communicate
 with the external process.
 
 It specifies the stream-handle which can be one of <code>stdin</code>/
 <code>stdout</code>/<code>stderr</code> or a named file and also the
 serializer/deserializer specification to be used to read/write data 
 to/from the stream.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.streaming.StreamingCommand.HandleSpec -->
</package>
<package name="org.apache.pig.impl.util">
  <!-- start class org.apache.pig.impl.util.ConfigurationValidator -->
  <class name="ConfigurationValidator" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ConfigurationValidator"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="validatePigProperties"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="properties" type="java.util.Properties"/>
      <doc>
      <![CDATA[All pig configurations should be validated in here before use
 @param properties]]>
      </doc>
    </method>
    <method name="getValidatedProperties" return="java.util.Properties"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="properties" type="java.util.Properties"/>
      <doc>
      <![CDATA[Validate properties which need to be validated and return *ONLY* those
 @param properties The Properties object containing all PIG properties
 @return The properties object containing *ONLY* properties which were validated
 (Typically these are user editable properties and should match the properties
 validated in ValidatePigProperties(Properties properties))]]>
      </doc>
    </method>
  </class>
  <!-- end class org.apache.pig.impl.util.ConfigurationValidator -->
  <!-- start class org.apache.pig.impl.util.IdentityHashSet -->
  <class name="IdentityHashSet" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.util.Set"/>
    <constructor name="IdentityHashSet"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="add" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="element" type="java.lang.Object"/>
    </method>
    <method name="addAll" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elements" type="java.util.Collection"/>
    </method>
    <method name="clear"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="contains" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="element" type="java.lang.Object"/>
    </method>
    <method name="containsAll" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elements" type="java.util.Collection"/>
    </method>
    <method name="isEmpty" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="iterator" return="java.util.Iterator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="remove" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="element" type="java.lang.Object"/>
    </method>
    <method name="removeAll" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elements" type="java.util.Collection"/>
    </method>
    <method name="retainAll" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elements" type="java.util.Collection"/>
    </method>
    <method name="size" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toArray" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toArray" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dummy" type="java.lang.Object[]"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.impl.util.IdentityHashSet -->
  <!-- start class org.apache.pig.impl.util.JarManager -->
  <class name="JarManager" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="JarManager"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="createJar"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="os" type="java.io.OutputStream"/>
      <param name="funcs" type="java.util.List"/>
      <param name="pigContext" type="org.apache.pig.impl.PigContext"/>
      <exception name="ClassNotFoundException" type="java.lang.ClassNotFoundException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Create a jarfile in a temporary path, that is a merge of all the jarfiles containing the
 functions and the core pig classes.
 
 @param funcs
            the functions that will be used in a job and whose jar files need to be included
            in the final merged jar file.
 @throws ClassNotFoundException
 @throws IOException]]>
      </doc>
    </method>
    <method name="findContainingJar" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="my_class" type="java.lang.Class"/>
      <doc>
      <![CDATA[Find a jar that contains a class of the same name, if any. It will return a jar file, even if
 that is not the first thing on the class path that has a class with the same name.
 
 @param my_class
            the class to find
 @return a jar file that contains the class, or null
 @throws IOException]]>
      </doc>
    </method>
  </class>
  <!-- end class org.apache.pig.impl.util.JarManager -->
  <!-- start class org.apache.pig.impl.util.LineageTracer -->
  <class name="LineageTracer" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LineageTracer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="insert"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
    </method>
    <method name="union"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t1" type="org.apache.pig.data.Tuple"/>
      <param name="t2" type="org.apache.pig.data.Tuple"/>
    </method>
    <method name="getRepresentative" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
    </method>
    <method name="getCounts" return="java.util.IdentityHashMap"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getWeightedCounts" return="java.util.IdentityHashMap"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="specialTuples" type="org.apache.pig.impl.util.IdentityHashSet"/>
      <param name="multiplier" type="int"/>
    </method>
    <method name="getMembers" return="java.util.Collection"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
    </method>
    <method name="getMembershipMap" return="java.util.IdentityHashMap"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.impl.util.LineageTracer -->
  <!-- start class org.apache.pig.impl.util.LogUtils -->
  <class name="LogUtils" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LogUtils"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="warn"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
      <param name="msg" type="java.lang.String"/>
      <param name="warningEnum" type="org.apache.pig.PigWarning"/>
      <param name="log" type="org.apache.commons.logging.Log"/>
    </method>
    <method name="getPermissionException" return="java.lang.Exception"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="top" type="java.lang.Exception"/>
    </method>
    <method name="getPigException" return="org.apache.pig.PigException"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="top" type="java.lang.Throwable"/>
    </method>
    <method name="writeLog"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <param name="logFileName" type="java.lang.String"/>
      <param name="log" type="org.apache.commons.logging.Log"/>
      <param name="verbose" type="boolean"/>
    </method>
    <method name="writeLog"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <param name="logFileName" type="java.lang.String"/>
      <param name="log" type="org.apache.commons.logging.Log"/>
      <param name="verbose" type="boolean"/>
      <param name="headerMessage" type="java.lang.String"/>
      <param name="displayFooter" type="boolean"/>
      <param name="displayMessage" type="boolean"/>
    </method>
  </class>
  <!-- end class org.apache.pig.impl.util.LogUtils -->
  <!-- start class org.apache.pig.impl.util.MultiMap -->
  <class name="MultiMap" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <constructor name="MultiMap"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="MultiMap" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param size Initial size of the map]]>
      </doc>
    </constructor>
    <method name="put"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.Object"/>
      <param name="value" type="java.lang.Object"/>
      <doc>
      <![CDATA[Add an element to the map.
 @param key The key to store the value under.  If the key already
 exists the value will be added to the collection for that key, it
 will not replace the existing value (as in a standard map).
 @param value value to store.]]>
      </doc>
    </method>
    <method name="put"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.Object"/>
      <param name="values" type="java.util.Collection"/>
      <doc>
      <![CDATA[Add a key to the map with a collection of elements.
 @param key The key to store the value under.  If the key already
 exists the value will be added to the collection for that key, it
 will not replace the existing value (as in a standard map).
 @param values collection of values to store.]]>
      </doc>
    </method>
    <method name="get" return="java.util.Collection"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.Object"/>
      <doc>
      <![CDATA[Get the collection of values associated with a given key.
 @param key Key to fetch values for.
 @return collection of values, or null if the key is not in the map.]]>
      </doc>
    </method>
    <method name="remove" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.Object"/>
      <param name="value" type="java.lang.Object"/>
      <doc>
      <![CDATA[Remove one value from an existing key.  If that is the last value
 for the key, then remove the key too.
 @param key Key to remove the value from.
 @param value Value to remove.
 @return The value being removed, or null if the key or value does
 not exist.]]>
      </doc>
    </method>
    <method name="removeKey" return="java.util.Collection"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.Object"/>
      <doc>
      <![CDATA[Remove all the values associated with the given key
 @param key the key to be removed
 @return list of all value being removed]]>
      </doc>
    </method>
    <method name="keySet" return="java.util.Set"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get a set of all the keys in this map.
 @return Set of keys.]]>
      </doc>
    </method>
    <method name="values" return="java.util.Collection"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get a single collection of all the values in the map.  All of the
 values in the map will be conglomerated into one collection.  There
 will not be any duplicate removal.
 @return collection of values.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="size" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the number of entries in the map.
 @return number of entries.]]>
      </doc>
    </method>
    <method name="isEmpty" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="clear"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="containsKey" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.Object"/>
    </method>
    <method name="containsValue" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="val" type="java.lang.Object"/>
    </method>
    <doc>
    <![CDATA[An implementation of multi-map.  We can't use Apache commons
 MultiValueMap because it isn't serializable.  And we don't want to use
 MultiHashMap, as it is marked deprecated.
 
 This class can't extend Map, because it needs to change the semantics of
 put, so that you give it one key and one value, and it either creates a
 new entry with the key and a new collection of value (if the is not yet
 in the map) or adds the values to the existing collection for the key
 (if the key is already in the map).]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.util.MultiMap -->
  <!-- start class org.apache.pig.impl.util.ObjectSerializer -->
  <class name="ObjectSerializer" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ObjectSerializer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="serialize" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.io.Serializable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="deserialize" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="str" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="encodeBytes" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="bytes" type="byte[]"/>
    </method>
    <method name="decodeBytes" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="str" type="java.lang.String"/>
    </method>
  </class>
  <!-- end class org.apache.pig.impl.util.ObjectSerializer -->
  <!-- start class org.apache.pig.impl.util.Pair -->
  <class name="Pair" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <constructor name="Pair" type="java.lang.Object, java.lang.Object"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param f First element in pair.
 @param s Second element in pair.]]>
      </doc>
    </constructor>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="other" type="java.lang.Object"/>
    </method>
    <field name="first" type="java.lang.Object"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="second" type="java.lang.Object"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Copy of C++ STL pair container.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.util.Pair -->
  <!-- start class org.apache.pig.impl.util.PropertiesUtil -->
  <class name="PropertiesUtil" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PropertiesUtil"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="loadPropertiesFromFile"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="properties" type="java.util.Properties"/>
    </method>
    <method name="loadPropertiesFromFile" return="java.util.Properties"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.impl.util.PropertiesUtil -->
  <!-- start class org.apache.pig.impl.util.RewindableIterator -->
  <class name="RewindableIterator" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="RewindableIterator" type="java.util.Iterator"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="hasNext" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hasNext" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="k" type="int"/>
    </method>
    <method name="rewind"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="noRewind"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="next" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.impl.util.RewindableIterator -->
  <!-- start interface org.apache.pig.impl.util.Spillable -->
  <interface name="Spillable"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="spill" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Instructs an object to spill whatever it can to disk and release
 references to any data structures it spills.
 @return number of objects spilled.]]>
      </doc>
    </method>
    <method name="getMemorySize" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Requests that an object return an estimate of its in memory size.
 @return estimated in memory size.]]>
      </doc>
    </method>
  </interface>
  <!-- end interface org.apache.pig.impl.util.Spillable -->
  <!-- start class org.apache.pig.impl.util.SpillableMemoryManager -->
  <class name="SpillableMemoryManager" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="javax.management.NotificationListener"/>
    <constructor name="SpillableMemoryManager"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="configure"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="properties" type="java.util.Properties"/>
    </method>
    <method name="handleNotification"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="javax.management.Notification"/>
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="registerSpillable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="s" type="org.apache.pig.impl.util.Spillable"/>
      <doc>
      <![CDATA[Register a spillable to be tracked. No need to unregister, the tracking will stop
 when the spillable is GCed.
 @param s the spillable to track.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This class Tracks the tenured pool and a list of Spillable objects. When memory gets low, this
 class will start requesting Spillable objects to free up memory.
 <p>
 Low memory is defined as more than 50% of the tenured pool being allocated. Spillable objects are
 tracked using WeakReferences so that the objects can be GCed even though this class has a reference
 to them.]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.util.SpillableMemoryManager -->
  <!-- start class org.apache.pig.impl.util.WrappedIOException -->
  <class name="WrappedIOException" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="WrappedIOException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="wrap" return="java.io.IOException"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="java.lang.Throwable"/>
    </method>
    <method name="wrap" return="java.io.IOException"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="message" type="java.lang.String"/>
      <param name="e" type="java.lang.Throwable"/>
    </method>
    <doc>
    <![CDATA[FIXME PIG-80 replace this code when pig will be java 6 compliant with "throw
 new IOException(e);"]]>
    </doc>
  </class>
  <!-- end class org.apache.pig.impl.util.WrappedIOException -->
</package>
<package name="org.apache.pig.pen">
  <!-- start class org.apache.pig.pen.AugmentBaseDataVisitor -->
  <class name="AugmentBaseDataVisitor" extends="org.apache.pig.impl.logicalLayer.LOVisitor"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AugmentBaseDataVisitor" type="org.apache.pig.impl.logicalLayer.LogicalPlan, java.util.Map, java.util.Map"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNewBaseData" return="java.util.Map"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="cg" type="org.apache.pig.impl.logicalLayer.LOCogroup"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="cs" type="org.apache.pig.impl.logicalLayer.LOCross"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="dt" type="org.apache.pig.impl.logicalLayer.LODistinct"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="filter" type="org.apache.pig.impl.logicalLayer.LOFilter"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="forEach" type="org.apache.pig.impl.logicalLayer.LOForEach"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="load" type="org.apache.pig.impl.logicalLayer.LOLoad"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="s" type="org.apache.pig.impl.logicalLayer.LOSort"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="split" type="org.apache.pig.impl.logicalLayer.LOSplit"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="store" type="org.apache.pig.impl.logicalLayer.LOStore"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="u" type="org.apache.pig.impl.logicalLayer.LOUnion"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.pen.AugmentBaseDataVisitor -->
  <!-- start class org.apache.pig.pen.DerivedDataVisitor -->
  <class name="DerivedDataVisitor" extends="org.apache.pig.impl.logicalLayer.LOVisitor"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DerivedDataVisitor" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.PigContext, java.util.Map, java.util.Map, org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="DerivedDataVisitor" type="org.apache.pig.impl.logicalLayer.LogicalOperator, org.apache.pig.impl.PigContext, java.util.Map, java.util.Map, org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setOperatorToEvaluate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LogicalOperator"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="cg" type="org.apache.pig.impl.logicalLayer.LOCogroup"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="cs" type="org.apache.pig.impl.logicalLayer.LOCross"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="dt" type="org.apache.pig.impl.logicalLayer.LODistinct"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="filter" type="org.apache.pig.impl.logicalLayer.LOFilter"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="forEach" type="org.apache.pig.impl.logicalLayer.LOForEach"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="load" type="org.apache.pig.impl.logicalLayer.LOLoad"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="split" type="org.apache.pig.impl.logicalLayer.LOSplit"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="store" type="org.apache.pig.impl.logicalLayer.LOStore"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="u" type="org.apache.pig.impl.logicalLayer.LOUnion"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="l" type="org.apache.pig.impl.logicalLayer.LOLimit"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="sort" type="org.apache.pig.impl.logicalLayer.LOSort"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="evaluateIsolatedOperator" return="org.apache.pig.data.DataBag"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOCogroup"/>
      <param name="inputBags" type="java.util.List"/>
    </method>
    <method name="evaluateIsolatedOperator" return="org.apache.pig.data.DataBag"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LOCogroup"/>
    </method>
  </class>
  <!-- end class org.apache.pig.pen.DerivedDataVisitor -->
  <!-- start class org.apache.pig.pen.EquivalenceClasses -->
  <class name="EquivalenceClasses" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="EquivalenceClasses"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="GetEquivalenceClasses" return="java.util.Collection"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LogicalOperator"/>
      <param name="derivedData" type="java.util.Map"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.pen.EquivalenceClasses -->
  <!-- start class org.apache.pig.pen.ExampleGenerator -->
  <class name="ExampleGenerator" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ExampleGenerator" type="org.apache.pig.impl.logicalLayer.LogicalPlan, org.apache.pig.impl.PigContext"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setMaxRecords"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="max" type="int"/>
    </method>
    <method name="getExamples" return="java.util.Map"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.pen.ExampleGenerator -->
  <!-- start class org.apache.pig.pen.LineageTrimmingVisitor -->
  <class name="LineageTrimmingVisitor" extends="org.apache.pig.impl.logicalLayer.LOVisitor"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LineageTrimmingVisitor" type="org.apache.pig.impl.logicalLayer.LogicalPlan, java.util.Map, java.util.Map, org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan, org.apache.pig.impl.PigContext"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="init"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="cg" type="org.apache.pig.impl.logicalLayer.LOCogroup"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="cs" type="org.apache.pig.impl.logicalLayer.LOCross"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="dt" type="org.apache.pig.impl.logicalLayer.LODistinct"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="filter" type="org.apache.pig.impl.logicalLayer.LOFilter"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="forEach" type="org.apache.pig.impl.logicalLayer.LOForEach"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="limOp" type="org.apache.pig.impl.logicalLayer.LOLimit"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="load" type="org.apache.pig.impl.logicalLayer.LOLoad"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="s" type="org.apache.pig.impl.logicalLayer.LOSort"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="split" type="org.apache.pig.impl.logicalLayer.LOSplit"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="u" type="org.apache.pig.impl.logicalLayer.LOUnion"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.pen.LineageTrimmingVisitor -->
</package>
<package name="org.apache.pig.pen.util">
  <!-- start class org.apache.pig.pen.util.DependencyOrderLimitedWalker -->
  <class name="DependencyOrderLimitedWalker" extends="org.apache.pig.impl.plan.DependencyOrderWalker"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DependencyOrderLimitedWalker" type="org.apache.pig.impl.plan.Operator, org.apache.pig.impl.plan.OperatorPlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="walk"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="visitor" type="org.apache.pig.impl.plan.PlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.pen.util.DependencyOrderLimitedWalker -->
  <!-- start class org.apache.pig.pen.util.DisplayExamples -->
  <class name="DisplayExamples" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DisplayExamples"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="PrintTabular" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="lp" type="org.apache.pig.impl.logicalLayer.LogicalPlan"/>
      <param name="exampleData" type="java.util.Map"/>
    </method>
    <method name="PrintSimple"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LogicalOperator"/>
      <param name="exampleData" type="java.util.Map"/>
    </method>
    <field name="Result" type="java.lang.StringBuffer"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="MAX_DATAATOM_LENGTH" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.pen.util.DisplayExamples -->
  <!-- start class org.apache.pig.pen.util.ExampleTuple -->
  <class name="ExampleTuple" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.pig.data.Tuple"/>
    <constructor name="ExampleTuple"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="ExampleTuple" type="org.apache.pig.data.Tuple"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.DataOutput"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="readFields"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.DataInput"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toTuple" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="append"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="val" type="java.lang.Object"/>
    </method>
    <method name="get" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldNum" type="int"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getAll" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getMemorySize" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getType" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldNum" type="int"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="isNull" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldNum" type="int"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="isNull" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="reference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
    </method>
    <method name="set"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldNum" type="int"/>
      <param name="val" type="java.lang.Object"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="setNull"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="isNull" type="boolean"/>
    </method>
    <method name="size" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toDelimitedString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="delim" type="java.lang.String"/>
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="compareTo" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <field name="synthetic" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="omittable" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.pen.util.ExampleTuple -->
  <!-- start class org.apache.pig.pen.util.FunctionalLogicalOptimizer -->
  <class name="FunctionalLogicalOptimizer" extends="org.apache.pig.impl.plan.optimizer.PlanOptimizer"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FunctionalLogicalOptimizer" type="org.apache.pig.impl.logicalLayer.LogicalPlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.apache.pig.pen.util.FunctionalLogicalOptimizer -->
  <!-- start class org.apache.pig.pen.util.LineageTracer -->
  <class name="LineageTracer" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LineageTracer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="insert"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
    </method>
    <method name="union"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t1" type="org.apache.pig.data.Tuple"/>
      <param name="t2" type="org.apache.pig.data.Tuple"/>
    </method>
    <method name="getRepresentative" return="org.apache.pig.data.Tuple"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
    </method>
    <method name="getCounts" return="java.util.IdentityHashMap"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getWeightedCounts" return="java.util.IdentityHashMap"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="syntheticMultipler" type="float"/>
      <param name="omittableMultiplier" type="float"/>
    </method>
    <method name="getMembers" return="java.util.Collection"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.apache.pig.data.Tuple"/>
    </method>
    <method name="getMembershipMap" return="java.util.IdentityHashMap"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.pen.util.LineageTracer -->
  <!-- start class org.apache.pig.pen.util.MetricEvaluation -->
  <class name="MetricEvaluation" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MetricEvaluation"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getRealness" return="float"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LogicalOperator"/>
      <param name="exampleData" type="java.util.Map"/>
      <param name="overallRealness" type="boolean"/>
    </method>
    <method name="getConciseness" return="float"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LogicalOperator"/>
      <param name="exampleData" type="java.util.Map"/>
      <param name="OperatorToEqClasses" type="java.util.Map"/>
      <param name="overallConciseness" type="boolean"/>
    </method>
    <method name="getCompleteness" return="float"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.apache.pig.impl.logicalLayer.LogicalOperator"/>
      <param name="exampleData" type="java.util.Map"/>
      <param name="OperatorToEqClasses" type="java.util.Map"/>
      <param name="overallCompleteness" type="boolean"/>
    </method>
  </class>
  <!-- end class org.apache.pig.pen.util.MetricEvaluation -->
  <!-- start class org.apache.pig.pen.util.PreOrderDepthFirstWalker -->
  <class name="PreOrderDepthFirstWalker" extends="org.apache.pig.impl.plan.PlanWalker"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PreOrderDepthFirstWalker" type="org.apache.pig.impl.plan.OperatorPlan"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param plan
            Plan for this walker to traverse.]]>
      </doc>
    </constructor>
    <method name="walk"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="visitor" type="org.apache.pig.impl.plan.PlanVisitor"/>
      <exception name="VisitorException" type="org.apache.pig.impl.plan.VisitorException"/>
      <doc>
      <![CDATA[Begin traversing the graph.
 
 @param visitor
            Visitor this walker is being used by.
 @throws VisitorException
             if an error is encountered while walking.]]>
      </doc>
    </method>
    <method name="spawnChildWalker" return="org.apache.pig.impl.plan.PlanWalker"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="plan" type="org.apache.pig.impl.plan.OperatorPlan"/>
    </method>
  </class>
  <!-- end class org.apache.pig.pen.util.PreOrderDepthFirstWalker -->
</package>
<package name="org.apache.pig.tools.cmdline">
  <!-- start class org.apache.pig.tools.cmdline.CmdLineParser -->
  <class name="CmdLineParser" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="CmdLineParser" type="java.lang.String[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param args String array of arguments passed to the program.]]>
      </doc>
    </constructor>
    <method name="registerOpt"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="c" type="char"/>
      <param name="s" type="java.lang.String"/>
      <param name="ve" type="org.apache.pig.tools.cmdline.CmdLineParser.ValueExpected"/>
      <doc>
      <![CDATA[Register a command line option.
 @param c Single character designator for this option.  It cannot be '-'.
 @param s Full word designator for this option.  This can be null, in which case
 no long designator will exist for this option.
 @param ve If REQUIRED, a value will be expected with this option.  If
 OPTIONAL a value will be accepted if it is seen.
 @throws AssertionError if there is no short option, or if this option has already been
 used.]]>
      </doc>
    </method>
    <method name="getNextOpt" return="char"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ParseException" type="java.text.ParseException"/>
      <doc>
      <![CDATA[Get the next option.
 @return The short designator for the next argument.  If there are no more arguments
 than the special designator CmdLineParser.EndOfOpts will be returned.
 @throws ParseException if an unknown option is found or an option that
 expects a value does not have one or a value that does not expect a value does have
 one.]]>
      </doc>
    </method>
    <method name="getRemainingArgs" return="java.lang.String[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get any remaining arguments.
 @return In general this function will null.
 Only if the caller passed a '-' or '--' followed by other arguments.  In that case
 the remainder of the args array will be returned.]]>
      </doc>
    </method>
    <method name="getValStr" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the value, as a string.
 @return The value associated with the current option.  If there is no value,
 then null will be returned.]]>
      </doc>
    </method>
    <method name="getValInt" return="java.lang.Integer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="NumberFormatException" type="java.lang.NumberFormatException"/>
      <doc>
      <![CDATA[Get the value, as an Integer.
 @return The value associated with the current option.  If there is not value, then
 null will be returned.
 @throws NumberFormatException if the value cannot be converted to an integer.]]>
      </doc>
    </method>
    <field name="EndOfOpts" type="char"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.tools.cmdline.CmdLineParser -->
  <!-- start class org.apache.pig.tools.cmdline.CmdLineParser.ValueExpected -->
  <class name="CmdLineParser.ValueExpected" extends="java.lang.Enum"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.apache.pig.tools.cmdline.CmdLineParser.ValueExpected[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.apache.pig.tools.cmdline.CmdLineParser.ValueExpected"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <field name="REQUIRED" type="org.apache.pig.tools.cmdline.CmdLineParser.ValueExpected"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="OPTIONAL" type="org.apache.pig.tools.cmdline.CmdLineParser.ValueExpected"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="NOT_ACCEPTED" type="org.apache.pig.tools.cmdline.CmdLineParser.ValueExpected"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.apache.pig.tools.cmdline.CmdLineParser.ValueExpected -->
</package>
<package name="org.apache.pig.tools.grunt">
  <!-- start class org.apache.pig.tools.grunt.Command -->
  <class name="Command" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Command"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="execute"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="commandline" type="java.lang.String"/>
    </method>
  </class>
  <!-- end class org.apache.pig.tools.grunt.Command -->
  <!-- start class org.apache.pig.tools.grunt.Grunt -->
  <class name="Grunt" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Grunt" type="java.io.BufferedReader, org.apache.pig.impl.PigContext"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </constructor>
    <method name="setConsoleReader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="c" type="jline.ConsoleReader"/>
    </method>
    <method name="run"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="exec" return="int[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="Throwable" type="java.lang.Throwable"/>
    </method>
  </class>
  <!-- end class org.apache.pig.tools.grunt.Grunt -->
  <!-- start class org.apache.pig.tools.grunt.GruntParser -->
  <class name="GruntParser" extends="org.apache.pig.tools.pigscript.parser.PigScriptParser"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GruntParser" type="java.io.Reader"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="GruntParser" type="java.io.InputStream, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="GruntParser" type="java.io.InputStream"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="GruntParser" type="org.apache.pig.tools.pigscript.parser.PigScriptParserTokenManager"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="parseStopOnError" return="int[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="ParseException" type="org.apache.pig.tools.pigscript.parser.ParseException"/>
    </method>
    <method name="parseStopOnError" return="int[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sameBatch" type="boolean"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="ParseException" type="org.apache.pig.tools.pigscript.parser.ParseException"/>
      <doc>
      <![CDATA[Parses Pig commands in either interactive mode or batch mode. 
 In interactive mode, executes the plan right away whenever a 
 STORE command is encountered.

 @throws IOException, ParseException]]>
      </doc>
    </method>
    <method name="setLoadOnly"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="loadOnly" type="boolean"/>
    </method>
    <method name="setParams"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pigServer" type="org.apache.pig.PigServer"/>
    </method>
    <method name="prompt"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="quit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
    <method name="isDone" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="processDescribe"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="alias" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="processExplain"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="alias" type="java.lang.String"/>
      <param name="script" type="java.lang.String"/>
      <param name="isVerbose" type="boolean"/>
      <param name="format" type="java.lang.String"/>
      <param name="target" type="java.lang.String"/>
      <param name="params" type="java.util.List"/>
      <param name="files" type="java.util.List"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="ParseException" type="org.apache.pig.tools.pigscript.parser.ParseException"/>
    </method>
    <method name="explainCurrentBatch"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="printAliases"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="processRegister"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="jar" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="processScript"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="script" type="java.lang.String"/>
      <param name="batch" type="boolean"/>
      <param name="params" type="java.util.List"/>
      <param name="files" type="java.util.List"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="ParseException" type="org.apache.pig.tools.pigscript.parser.ParseException"/>
    </method>
    <method name="processSet"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="ParseException" type="org.apache.pig.tools.pigscript.parser.ParseException"/>
    </method>
    <method name="processCat"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="path" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="processCD"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="path" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="processDump"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="alias" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="processIllustrate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="alias" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="processKill"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="jobid" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="processLS"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="path" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="processPWD"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="printHelp"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
    <method name="processMove"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="src" type="java.lang.String"/>
      <param name="dst" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="processCopy"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="src" type="java.lang.String"/>
      <param name="dst" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="processCopyToLocal"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="src" type="java.lang.String"/>
      <param name="dst" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="processCopyFromLocal"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="src" type="java.lang.String"/>
      <param name="dst" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="processMkdir"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="dir" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="processPig"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="cmd" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="processRemove"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="path" type="java.lang.String"/>
      <param name="options" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.apache.pig.tools.grunt.GruntParser -->
  <!-- start class org.apache.pig.tools.grunt.PigCompletor -->
  <class name="PigCompletor" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="jline.Completor"/>
    <constructor name="PigCompletor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="loadCandidateKeywords" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stream" type="java.io.InputStream"/>
      <param name="candidates" type="java.util.Set"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="complete" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="buffer" type="java.lang.String"/>
      <param name="cursor" type="int"/>
      <param name="candidates" type="java.util.List"/>
    </method>
  </class>
  <!-- end class org.apache.pig.tools.grunt.PigCompletor -->
  <!-- start class org.apache.pig.tools.grunt.PigCompletorAliases -->
  <class name="PigCompletorAliases" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="jline.Completor"/>
    <constructor name="PigCompletorAliases" type="org.apache.pig.PigServer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="complete" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="buffer" type="java.lang.String"/>
      <param name="cursor" type="int"/>
      <param name="candidates" type="java.util.List"/>
    </method>
  </class>
  <!-- end class org.apache.pig.tools.grunt.PigCompletorAliases -->
</package>
<package name="org.apache.pig.tools.parameters">
  <!-- start class org.apache.pig.tools.parameters.ParameterSubstitutionPreprocessor -->
  <class name="ParameterSubstitutionPreprocessor" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ParameterSubstitutionPreprocessor" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param limit - max number of parameters to expect. Smaller values would
 would not cause incorrect behavior but would impact performance]]>
      </doc>
    </constructor>
    <method name="genSubstitutedFile"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pigInput" type="java.io.BufferedReader"/>
      <param name="pigOutput" type="java.io.Writer"/>
      <param name="args" type="java.lang.String[]"/>
      <param name="argFiles" type="java.lang.String[]"/>
      <exception name="ParseException" type="org.apache.pig.tools.parameters.ParseException"/>
      <doc>
      <![CDATA[This is the main API that takes script template and produces pig script 
 @param pigInput - input stream that contains pig file
 @param pigOutput - stream where transformed file is written
 @param args - command line arguments in the order they appear on the command line; format: key=val
 @param argFiles - list of configuration files in the order they appear on the command line]]>
      </doc>
    </method>
  </class>
  <!-- end class org.apache.pig.tools.parameters.ParameterSubstitutionPreprocessor -->
  <!-- start class org.apache.pig.tools.parameters.PreprocessorContext -->
  <class name="PreprocessorContext" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PreprocessorContext" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param limit - max number of parameters. Passing
                smaller number only impacts performance]]>
      </doc>
    </constructor>
    <method name="processShellCmd"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <param name="val" type="java.lang.String"/>
      <doc>
      <![CDATA[This method generates parameter value by running specified command

 @param key - parameter name
 @param val - string containing command to be executed]]>
      </doc>
    </method>
    <method name="processOrdLine"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <param name="val" type="java.lang.String"/>
      <doc>
      <![CDATA[This method generates value for the specified key by
 performing substitution if needed within the value first.

 @param key - parameter name
 @param val - value supplied for the key]]>
      </doc>
    </method>
    <method name="processShellCmd"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <param name="val" type="java.lang.String"/>
      <param name="overwrite" type="java.lang.Boolean"/>
      <doc>
      <![CDATA[This method generates parameter value by running specified command

 @param key - parameter name
 @param val - string containing command to be executed]]>
      </doc>
    </method>
    <method name="processOrdLine"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <param name="val" type="java.lang.String"/>
      <param name="overwrite" type="java.lang.Boolean"/>
      <doc>
      <![CDATA[This method generates value for the specified key by
 performing substitution if needed within the value first.

 @param key - parameter name
 @param val - value supplied for the key
 @param overwrite - specifies whether the value should be replaced if it already exists]]>
      </doc>
    </method>
    <method name="substitute" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="line" type="java.lang.String"/>
    </method>
  </class>
  <!-- end class org.apache.pig.tools.parameters.PreprocessorContext -->
</package>
<package name="org.apache.pig.tools.pigstats">
  <!-- start class org.apache.pig.tools.pigstats.PigStats -->
  <class name="PigStats" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PigStats"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setMROperatorPlan"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mrp" type="org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.MROperPlan"/>
    </method>
    <method name="setJobControl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jc" type="org.apache.hadoop.mapred.jobcontrol.JobControl"/>
    </method>
    <method name="setJobClient"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jobClient" type="org.apache.hadoop.mapred.JobClient"/>
    </method>
    <method name="getMRPlan" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setExecType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mode" type="org.apache.pig.ExecType"/>
    </method>
    <method name="setPhysicalPlan"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="php" type="org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan"/>
    </method>
    <method name="getPhysicalPlan" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="accumulateStats" return="java.util.Map"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecException" type="org.apache.pig.backend.executionengine.ExecException"/>
    </method>
    <method name="getRootJobIDs" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getPigStats" return="java.util.Map"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRecordsWritten" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getBytesWritten" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.tools.pigstats.PigStats -->
</package>
<package name="org.apache.pig.tools.streams">
  <!-- start class org.apache.pig.tools.streams.StreamGenerator -->
  <class name="StreamGenerator" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.awt.event.ActionListener"/>
    <constructor name="StreamGenerator"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="actionPerformed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="event" type="java.awt.event.ActionEvent"/>
    </method>
    <method name="main"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="args" type="java.lang.String[]"/>
    </method>
  </class>
  <!-- end class org.apache.pig.tools.streams.StreamGenerator -->
</package>
<package name="org.apache.pig.tools.timer">
  <!-- start class org.apache.pig.tools.timer.PerformanceTimer -->
  <class name="PerformanceTimer" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="start"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Start the timer.]]>
      </doc>
    </method>
    <method name="stop"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Stop the timer.]]>
      </doc>
    </method>
    <method name="print"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.PrintStream"/>
      <doc>
      <![CDATA[Dump the total time, total number of starts and stops, and average run time of the
 timer to an output stream.
 @param out output stream to write info to.]]>
      </doc>
    </method>
  </class>
  <!-- end class org.apache.pig.tools.timer.PerformanceTimer -->
  <!-- start class org.apache.pig.tools.timer.PerformanceTimerFactory -->
  <class name="PerformanceTimerFactory" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getPerfTimerFactory" return="org.apache.pig.tools.timer.PerformanceTimerFactory"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the timer factory.
 @return timer factory.]]>
      </doc>
    </method>
    <method name="getTimer" return="org.apache.pig.tools.timer.PerformanceTimer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Get a performance timer.  If the indicated timer does not exist, it will be
 created.  If a timer of that name already exists, it will be returned.
 @param name Name of the timer to return.
 @return the timer.]]>
      </doc>
    </method>
    <method name="dumpTimers"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.PrintStream"/>
      <doc>
      <![CDATA[Call print on all of the known performance timers.
 @param out output stream to dump to]]>
      </doc>
    </method>
    <method name="dumpTimers"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.apache.pig.tools.timer.PerformanceTimerFactory -->
</package>

</api>
